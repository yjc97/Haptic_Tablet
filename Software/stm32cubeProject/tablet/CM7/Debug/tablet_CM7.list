
tablet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800fb48  0800fb48  0001fb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801039c  0801039c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801039c  0801039c  0002039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103a4  080103a4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103a4  080103a4  000203a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103a8  080103a8  000203a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  080103ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  240001e8  08010590  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00002404  240004b4  08010590  000304b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001854d  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  0004875f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0004b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0004c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003db8b  00000000  00000000  0004d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001707b  00000000  00000000  0008af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00181f6f  00000000  00000000  000a1f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00223eed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  00223f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb2c 	.word	0x0800fb2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800fb2c 	.word	0x0800fb2c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <_ZN3ArmC1ENS_3DirEddd>:
//		base_theta = atan2(
//				sin(ref_big) * BIGARM_LEN + sin(ref_big + ref_fore) * FOREARM_LEN - base_y,
//				cos(ref_big) * BIGARM_LEN + cos(ref_big + ref_fore) * FOREARM_LEN - base_x);
//	}
//	Arm() : type(Left), base_x(52.8), base_y(165.5), base_theta(0){}
	Arm(Arm::Dir dir, double x, double y, double theta):
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	61f8      	str	r0, [r7, #28]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	ed87 0b04 	vstr	d0, [r7, #16]
 8000bb6:	ed87 1b02 	vstr	d1, [r7, #8]
 8000bba:	ed87 2b00 	vstr	d2, [r7]
 8000bbe:	76fb      	strb	r3, [r7, #27]
		type(dir), base_x_(x), base_y_(y), base_theta_(theta){}
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	7efa      	ldrb	r2, [r7, #27]
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	69f9      	ldr	r1, [r7, #28]
 8000bc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000bd0:	69f9      	ldr	r1, [r7, #28]
 8000bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bd6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000bda:	69f9      	ldr	r1, [r7, #28]
 8000bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000be0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	0000      	movs	r0, r0
 8000bf4:	0000      	movs	r0, r0
	...

08000bf8 <_ZN3Arm11GetArmAngleERdS0_dd>:
	void GetArmAngle(double& bigarm_angle, double& forearm_angle, double pos_x, double pos_y) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	ed2d 8b02 	vpush	{d8}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	61f8      	str	r0, [r7, #28]
 8000c04:	61b9      	str	r1, [r7, #24]
 8000c06:	617a      	str	r2, [r7, #20]
 8000c08:	ed87 0b02 	vstr	d0, [r7, #8]
 8000c0c:	ed87 1b00 	vstr	d1, [r7]
		x_ = base_x_ + pos_x * cos(base_theta_) - pos_y * sin(base_theta_);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	ed93 8b02 	vldr	d8, [r3, #8]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	ed93 7b06 	vldr	d7, [r3, #24]
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f008 fe32 	bl	8009888 <cos>
 8000c24:	eeb0 6b40 	vmov.f64	d6, d0
 8000c28:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c30:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	ed93 7b06 	vldr	d7, [r3, #24]
 8000c3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c3e:	f008 fe6f 	bl	8009920 <sin>
 8000c42:	eeb0 6b40 	vmov.f64	d6, d0
 8000c46:	ed97 7b00 	vldr	d7, [r7]
 8000c4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c4e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	ed83 7b08 	vstr	d7, [r3, #32]
		y_ = base_y_ + pos_y * cos(base_theta_) + pos_x * sin(base_theta_);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	ed93 8b04 	vldr	d8, [r3, #16]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	ed93 7b06 	vldr	d7, [r3, #24]
 8000c64:	eeb0 0b47 	vmov.f64	d0, d7
 8000c68:	f008 fe0e 	bl	8009888 <cos>
 8000c6c:	eeb0 6b40 	vmov.f64	d6, d0
 8000c70:	ed97 7b00 	vldr	d7, [r7]
 8000c74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c78:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000c82:	eeb0 0b47 	vmov.f64	d0, d7
 8000c86:	f008 fe4b 	bl	8009920 <sin>
 8000c8a:	eeb0 6b40 	vmov.f64	d6, d0
 8000c8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		dis_ = sqrt(x_ * x_ + y_ * y_);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	ed93 6b08 	vldr	d6, [r3, #32]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	ed93 7b08 	vldr	d7, [r3, #32]
 8000cac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000cbc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cc4:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc8:	f008 fea6 	bl	8009a18 <sqrt>
 8000ccc:	eeb0 7b40 	vmov.f64	d7, d0
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		theta_total_ = (M_PI - atan2(y_, x_));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	ed93 6b08 	vldr	d6, [r3, #32]
 8000ce2:	eeb0 1b46 	vmov.f64	d1, d6
 8000ce6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cea:	f008 fe91 	bl	8009a10 <atan2>
 8000cee:	eeb0 7b40 	vmov.f64	d7, d0
 8000cf2:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8000e58 <_ZN3Arm11GetArmAngleERdS0_dd+0x260>
 8000cf6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		theta_big_ = acos((dis_ * dis_ + BIGARM_LEN * BIGARM_LEN - FOREARM_LEN * FOREARM_LEN) / (2 * BIGARM_LEN * dis_));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d10:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8000e60 <_ZN3Arm11GetArmAngleERdS0_dd+0x268>
 8000d14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d18:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8000e60 <_ZN3Arm11GetArmAngleERdS0_dd+0x268>
 8000d1c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000d26:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000e68 <_ZN3Arm11GetArmAngleERdS0_dd+0x270>
 8000d2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d2e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000d32:	eeb0 0b45 	vmov.f64	d0, d5
 8000d36:	f008 fe3f 	bl	80099b8 <acos>
 8000d3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		theta_fore_ = acos((dis_ * dis_ - BIGARM_LEN * BIGARM_LEN + FOREARM_LEN * FOREARM_LEN) / (2 * FOREARM_LEN * dis_));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000d50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d54:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8000e60 <_ZN3Arm11GetArmAngleERdS0_dd+0x268>
 8000d58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d5c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8000e60 <_ZN3Arm11GetArmAngleERdS0_dd+0x268>
 8000d60:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000d6a:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8000e68 <_ZN3Arm11GetArmAngleERdS0_dd+0x270>
 8000d6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d72:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000d76:	eeb0 0b45 	vmov.f64	d0, d5
 8000d7a:	f008 fe1d 	bl	80099b8 <acos>
 8000d7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		if (this->type == Left){
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d12e      	bne.n	8000dee <_ZN3Arm11GetArmAngleERdS0_dd+0x1f6>
			bigarm_angle = (theta_total_ - theta_big_ - BIG_0) / M_TWOPI * REDUCTION_RATIO;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000d9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000da0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000e70 <_ZN3Arm11GetArmAngleERdS0_dd+0x278>
 8000da4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000da8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000e78 <_ZN3Arm11GetArmAngleERdS0_dd+0x280>
 8000dac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000db0:	eeb2 6b09 	vmov.f64	d6, #41	; 0x41480000  12.5
 8000db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	ed83 7b00 	vstr	d7, [r3]
			forearm_angle = (theta_total_ + theta_fore_ - FORE_0)/ M_TWOPI * REDUCTION_RATIO;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000dca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000e80 <_ZN3Arm11GetArmAngleERdS0_dd+0x288>
 8000dd2:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000dd6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000e78 <_ZN3Arm11GetArmAngleERdS0_dd+0x280>
 8000dda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dde:	eeb2 6b09 	vmov.f64	d6, #41	; 0x41480000  12.5
 8000de2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	ed83 7b00 	vstr	d7, [r3]
		} else {
			bigarm_angle = (theta_total_ + theta_big_ - BIG_1) / M_TWOPI * REDUCTION_RATIO;
			forearm_angle = (theta_total_ - theta_fore_ - FORE_1)/ M_TWOPI * REDUCTION_RATIO;
		}
	}
 8000dec:	e02d      	b.n	8000e4a <_ZN3Arm11GetArmAngleERdS0_dd+0x252>
			bigarm_angle = (theta_total_ + theta_big_ - BIG_1) / M_TWOPI * REDUCTION_RATIO;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000dfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dfe:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000e88 <_ZN3Arm11GetArmAngleERdS0_dd+0x290>
 8000e02:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e06:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000e78 <_ZN3Arm11GetArmAngleERdS0_dd+0x280>
 8000e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e0e:	eeb2 6b09 	vmov.f64	d6, #41	; 0x41480000  12.5
 8000e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	ed83 7b00 	vstr	d7, [r3]
			forearm_angle = (theta_total_ - theta_fore_ - FORE_1)/ M_TWOPI * REDUCTION_RATIO;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e2c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000e90 <_ZN3Arm11GetArmAngleERdS0_dd+0x298>
 8000e30:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e34:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000e78 <_ZN3Arm11GetArmAngleERdS0_dd+0x280>
 8000e38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e3c:	eeb2 6b09 	vmov.f64	d6, #41	; 0x41480000  12.5
 8000e40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	ed83 7b00 	vstr	d7, [r3]
	}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	ecbd 8b02 	vpop	{d8}
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	54442d18 	.word	0x54442d18
 8000e5c:	400921fb 	.word	0x400921fb
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40dfa400 	.word	0x40dfa400
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	40768000 	.word	0x40768000
 8000e70:	ae3fd8a0 	.word	0xae3fd8a0
 8000e74:	3fd1c1cb 	.word	0x3fd1c1cb
 8000e78:	54442d18 	.word	0x54442d18
 8000e7c:	401921fb 	.word	0x401921fb
 8000e80:	79abd830 	.word	0x79abd830
 8000e84:	3ffa024a 	.word	0x3ffa024a
 8000e88:	de7c3204 	.word	0xde7c3204
 8000e8c:	4006e9c1 	.word	0x4006e9c1
 8000e90:	2edc8200 	.word	0x2edc8200
 8000e94:	3ff841ac 	.word	0x3ff841ac

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000e9e:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <main+0xa8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d008      	beq.n	8000ec6 <main+0x2e>
 8000eb4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dd01      	ble.n	8000ec6 <main+0x2e>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <main+0x30>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d000      	beq.n	8000ece <main+0x36>
 8000ecc:	e7ec      	b.n	8000ea8 <main+0x10>
  if ( timeout < 0 )
 8000ece:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da01      	bge.n	8000eda <main+0x42>
  {
  Error_Handler();
 8000ed6:	f001 f885 	bl	8001fe4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f001 fc3f 	bl	800275c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 fd0f 	bl	8001900 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <main+0xa8>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <main+0xa8>)
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <main+0xa8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f00:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 fd37 	bl	8003978 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 fd4d 	bl	80039ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f16:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <main+0xa8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <main+0xa0>
 8000f26:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd01      	ble.n	8000f38 <main+0xa0>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <main+0xa2>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <main+0xac>
 8000f3e:	e7ec      	b.n	8000f1a <main+0x82>
 8000f40:	58024400 	.word	0x58024400
if ( timeout < 0 )
 8000f44:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da01      	bge.n	8000f50 <main+0xb8>
{
Error_Handler();
 8000f4c:	f001 f84a 	bl	8001fe4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 fed2 	bl	8001cf8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000f54:	f000 fdac 	bl	8001ab0 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000f58:	f000 fe0c 	bl	8001b74 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000f5c:	f000 fd5a 	bl	8001a14 <_ZL12MX_I2C1_Initv>
  MX_USART3_UART_Init();
 8000f60:	f000 fe6a 	bl	8001c38 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  // start get screen data
  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	49cc      	ldr	r1, [pc, #816]	; (8001298 <main+0x400>)
 8000f68:	48cc      	ldr	r0, [pc, #816]	; (800129c <main+0x404>)
 8000f6a:	f006 fa15 	bl	8007398 <HAL_UART_Receive_IT>
  // calibrate motor
  {
//    char cal_cmd_0_[] = "w axis0.requested_state 3\n";
//    char cal_cmd_1_[] = "w axis1.requested_state 3\n";
    char set_vel_max_0[] = "w axis0.controller.config.vel_limit 8 \n";
 8000f6e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000f72:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000f76:	4aca      	ldr	r2, [pc, #808]	; (80012a0 <main+0x408>)
 8000f78:	461c      	mov	r4, r3
 8000f7a:	4615      	mov	r5, r2
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f88:	e884 0003 	stmia.w	r4, {r0, r1}
    char set_vel_max_1[] = "w axis1.controller.config.vel_limit 8 \n";
 8000f8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000f90:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000f94:	4ac3      	ldr	r2, [pc, #780]	; (80012a4 <main+0x40c>)
 8000f96:	461c      	mov	r4, r3
 8000f98:	4615      	mov	r5, r2
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa6:	e884 0003 	stmia.w	r4, {r0, r1}
	char calsw_cmd_0_[] = "w axis0.requested_state 8\n";
 8000faa:	4bbf      	ldr	r3, [pc, #764]	; (80012a8 <main+0x410>)
 8000fac:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fba:	c403      	stmia	r4!, {r0, r1}
 8000fbc:	8022      	strh	r2, [r4, #0]
 8000fbe:	3402      	adds	r4, #2
 8000fc0:	0c13      	lsrs	r3, r2, #16
 8000fc2:	7023      	strb	r3, [r4, #0]
	char calsw_cmd_1_[] = "w axis1.requested_state 8\n";
 8000fc4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fcc:	4ab7      	ldr	r2, [pc, #732]	; (80012ac <main+0x414>)
 8000fce:	461c      	mov	r4, r3
 8000fd0:	4615      	mov	r5, r2
 8000fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fda:	c403      	stmia	r4!, {r0, r1}
 8000fdc:	8022      	strh	r2, [r4, #0]
 8000fde:	3402      	adds	r4, #2
 8000fe0:	0c13      	lsrs	r3, r2, #16
 8000fe2:	7023      	strb	r3, [r4, #0]
	char idel_cmd_0_[] = "w axis0.requested_state 1\n";
 8000fe4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000fe8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fec:	4ab0      	ldr	r2, [pc, #704]	; (80012b0 <main+0x418>)
 8000fee:	461c      	mov	r4, r3
 8000ff0:	4615      	mov	r5, r2
 8000ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffa:	c403      	stmia	r4!, {r0, r1}
 8000ffc:	8022      	strh	r2, [r4, #0]
 8000ffe:	3402      	adds	r4, #2
 8001000:	0c13      	lsrs	r3, r2, #16
 8001002:	7023      	strb	r3, [r4, #0]
	char idel_cmd_1_[] = "w axis1.requested_state 1\n";
 8001004:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001008:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800100c:	4aa9      	ldr	r2, [pc, #676]	; (80012b4 <main+0x41c>)
 800100e:	461c      	mov	r4, r3
 8001010:	4615      	mov	r5, r2
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	c403      	stmia	r4!, {r0, r1}
 800101c:	8022      	strh	r2, [r4, #0]
 800101e:	3402      	adds	r4, #2
 8001020:	0c13      	lsrs	r3, r2, #16
 8001022:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)idel_cmd_0_, strlen(calsw_cmd_0_), 0xffff); HAL_Delay(200);
 8001024:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f959 	bl	80002e0 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103a:	489f      	ldr	r0, [pc, #636]	; (80012b8 <main+0x420>)
 800103c:	f006 f842 	bl	80070c4 <HAL_UART_Transmit>
 8001040:	20c8      	movs	r0, #200	; 0xc8
 8001042:	f001 fc1d 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)idel_cmd_1_, strlen(calsw_cmd_1_), 0xffff); HAL_Delay(200);
 8001046:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f948 	bl	80002e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105c:	4896      	ldr	r0, [pc, #600]	; (80012b8 <main+0x420>)
 800105e:	f006 f831 	bl	80070c4 <HAL_UART_Transmit>
 8001062:	20c8      	movs	r0, #200	; 0xc8
 8001064:	f001 fc0c 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)idel_cmd_0_, strlen(calsw_cmd_0_), 0xffff); HAL_Delay(200);
 8001068:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f937 	bl	80002e0 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <main+0x424>)
 8001080:	f006 f820 	bl	80070c4 <HAL_UART_Transmit>
 8001084:	20c8      	movs	r0, #200	; 0xc8
 8001086:	f001 fbfb 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)idel_cmd_1_, strlen(calsw_cmd_1_), 0xffff); HAL_Delay(200);
 800108a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f926 	bl	80002e0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	4886      	ldr	r0, [pc, #536]	; (80012bc <main+0x424>)
 80010a2:	f006 f80f 	bl	80070c4 <HAL_UART_Transmit>
 80010a6:	20c8      	movs	r0, #200	; 0xc8
 80010a8:	f001 fbea 	bl	8002880 <HAL_Delay>
	 HAL_Delay(15000);
 80010ac:	f643 2098 	movw	r0, #15000	; 0x3a98
 80010b0:	f001 fbe6 	bl	8002880 <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t *)set_vel_max_0, strlen(set_vel_max_0), 0xffff); HAL_Delay(500);
 80010b4:	463b      	mov	r3, r7
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f912 	bl	80002e0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4639      	mov	r1, r7
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	487c      	ldr	r0, [pc, #496]	; (80012b8 <main+0x420>)
 80010c8:	f005 fffc 	bl	80070c4 <HAL_UART_Transmit>
 80010cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d0:	f001 fbd6 	bl	8002880 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)set_vel_max_1, strlen(set_vel_max_1), 0xffff); HAL_Delay(500);
 80010d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f901 	bl	80002e0 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	4873      	ldr	r0, [pc, #460]	; (80012b8 <main+0x420>)
 80010ec:	f005 ffea 	bl	80070c4 <HAL_UART_Transmit>
 80010f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f4:	f001 fbc4 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)calsw_cmd_0_, strlen(calsw_cmd_0_), 0xffff); HAL_Delay(500);
 80010f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8ef 	bl	80002e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	486a      	ldr	r0, [pc, #424]	; (80012b8 <main+0x420>)
 8001110:	f005 ffd8 	bl	80070c4 <HAL_UART_Transmit>
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f001 fbb2 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)calsw_cmd_1_, strlen(calsw_cmd_1_), 0xffff); HAL_Delay(500);
 800111c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f8dd 	bl	80002e0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	4861      	ldr	r0, [pc, #388]	; (80012b8 <main+0x420>)
 8001134:	f005 ffc6 	bl	80070c4 <HAL_UART_Transmit>
 8001138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113c:	f001 fba0 	bl	8002880 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t *)set_vel_max_0, strlen(set_vel_max_0), 0xffff); HAL_Delay(500);
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f8cc 	bl	80002e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	4639      	mov	r1, r7
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	485a      	ldr	r0, [pc, #360]	; (80012bc <main+0x424>)
 8001154:	f005 ffb6 	bl	80070c4 <HAL_UART_Transmit>
 8001158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115c:	f001 fb90 	bl	8002880 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t *)set_vel_max_1, strlen(set_vel_max_1), 0xffff); HAL_Delay(500);
 8001160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f8bb 	bl	80002e0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001176:	4851      	ldr	r0, [pc, #324]	; (80012bc <main+0x424>)
 8001178:	f005 ffa4 	bl	80070c4 <HAL_UART_Transmit>
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f001 fb7e 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)calsw_cmd_0_, strlen(calsw_cmd_0_), 0xffff); HAL_Delay(500);
 8001184:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f8a9 	bl	80002e0 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	4848      	ldr	r0, [pc, #288]	; (80012bc <main+0x424>)
 800119c:	f005 ff92 	bl	80070c4 <HAL_UART_Transmit>
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f001 fb6c 	bl	8002880 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)calsw_cmd_1_, strlen(calsw_cmd_1_), 0xffff); HAL_Delay(500);
 80011a8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f897 	bl	80002e0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	483f      	ldr	r0, [pc, #252]	; (80012bc <main+0x424>)
 80011c0:	f005 ff80 	bl	80070c4 <HAL_UART_Transmit>
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f001 fb5a 	bl	8002880 <HAL_Delay>
//    }
  }

// zero reference getting
  {
	    char req_0_pos_[] = "f 0\n";
 80011cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80011d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80011d4:	4a3a      	ldr	r2, [pc, #232]	; (80012c0 <main+0x428>)
 80011d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011da:	6018      	str	r0, [r3, #0]
 80011dc:	3304      	adds	r3, #4
 80011de:	7019      	strb	r1, [r3, #0]
	    char req_1_pos_[] = "f 1\n";
 80011e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80011e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011e8:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <main+0x42c>)
 80011ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	7019      	strb	r1, [r3, #0]
	    float temp;
	    char temp_char;
	    HAL_UART_Transmit(&huart1, (uint8_t *)req_0_pos_, strlen(req_0_pos_), 0xffff);
 80011f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f871 	bl	80002e0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8001206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120a:	482b      	ldr	r0, [pc, #172]	; (80012b8 <main+0x420>)
 800120c:	f005 ff5a 	bl	80070c4 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart1, (uint8_t *)rece_uart1_, 18, 0xffff);
 8001210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001214:	2212      	movs	r2, #18
 8001216:	492c      	ldr	r1, [pc, #176]	; (80012c8 <main+0x430>)
 8001218:	4827      	ldr	r0, [pc, #156]	; (80012b8 <main+0x420>)
 800121a:	f005 ffe9 	bl	80071f0 <HAL_UART_Receive>
	    while (HAL_UART_Receive(&huart1, (uint8_t *)&temp_char, 1, 1) != HAL_TIMEOUT);
 800121e:	f107 01cf 	add.w	r1, r7, #207	; 0xcf
 8001222:	2301      	movs	r3, #1
 8001224:	2201      	movs	r2, #1
 8001226:	4824      	ldr	r0, [pc, #144]	; (80012b8 <main+0x420>)
 8001228:	f005 ffe2 	bl	80071f0 <HAL_UART_Receive>
 800122c:	4603      	mov	r3, r0
 800122e:	2b03      	cmp	r3, #3
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d000      	beq.n	800123e <main+0x3a6>
 800123c:	e7ef      	b.n	800121e <main+0x386>
	    sscanf(rece_uart1_,"%f %f", &left_big_cal, &temp);
 800123e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <main+0x434>)
 8001244:	4922      	ldr	r1, [pc, #136]	; (80012d0 <main+0x438>)
 8001246:	4820      	ldr	r0, [pc, #128]	; (80012c8 <main+0x430>)
 8001248:	f00a fc40 	bl	800bacc <siscanf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)req_1_pos_, strlen(req_1_pos_), 0xffff);
 800124c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f845 	bl	80002e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800125e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001262:	4815      	ldr	r0, [pc, #84]	; (80012b8 <main+0x420>)
 8001264:	f005 ff2e 	bl	80070c4 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart1, (uint8_t *)rece_uart1_, 18, 0xffff);
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	2212      	movs	r2, #18
 800126e:	4916      	ldr	r1, [pc, #88]	; (80012c8 <main+0x430>)
 8001270:	4811      	ldr	r0, [pc, #68]	; (80012b8 <main+0x420>)
 8001272:	f005 ffbd 	bl	80071f0 <HAL_UART_Receive>
	    while (HAL_UART_Receive(&huart1, (uint8_t *)&temp_char, 1, 1) != HAL_TIMEOUT);
 8001276:	f107 01cf 	add.w	r1, r7, #207	; 0xcf
 800127a:	2301      	movs	r3, #1
 800127c:	2201      	movs	r2, #1
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <main+0x420>)
 8001280:	f005 ffb6 	bl	80071f0 <HAL_UART_Receive>
 8001284:	4603      	mov	r3, r0
 8001286:	2b03      	cmp	r3, #3
 8001288:	bf14      	ite	ne
 800128a:	2301      	movne	r3, #1
 800128c:	2300      	moveq	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01f      	beq.n	80012d4 <main+0x43c>
 8001294:	e7ef      	b.n	8001276 <main+0x3de>
 8001296:	bf00      	nop
 8001298:	24000458 	.word	0x24000458
 800129c:	24000370 	.word	0x24000370
 80012a0:	0800fb70 	.word	0x0800fb70
 80012a4:	0800fb98 	.word	0x0800fb98
 80012a8:	0800fbc0 	.word	0x0800fbc0
 80012ac:	0800fbdc 	.word	0x0800fbdc
 80012b0:	0800fbf8 	.word	0x0800fbf8
 80012b4:	0800fc14 	.word	0x0800fc14
 80012b8:	24000250 	.word	0x24000250
 80012bc:	240002e0 	.word	0x240002e0
 80012c0:	0800fc30 	.word	0x0800fc30
 80012c4:	0800fc38 	.word	0x0800fc38
 80012c8:	24000400 	.word	0x24000400
 80012cc:	24000434 	.word	0x24000434
 80012d0:	0800fb48 	.word	0x0800fb48
	    sscanf(rece_uart1_,"%f %f", &left_fore_cal, &temp);
 80012d4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012d8:	4abd      	ldr	r2, [pc, #756]	; (80015d0 <main+0x738>)
 80012da:	49be      	ldr	r1, [pc, #760]	; (80015d4 <main+0x73c>)
 80012dc:	48be      	ldr	r0, [pc, #760]	; (80015d8 <main+0x740>)
 80012de:	f00a fbf5 	bl	800bacc <siscanf>

	    HAL_UART_Transmit(&huart2, (uint8_t *)req_0_pos_, strlen(req_0_pos_), 0xffff);
 80012e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe fffa 	bl	80002e0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	48b8      	ldr	r0, [pc, #736]	; (80015dc <main+0x744>)
 80012fa:	f005 fee3 	bl	80070c4 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart2, (uint8_t *)rece_uart1_, 18, 0xffff);
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	2212      	movs	r2, #18
 8001304:	49b4      	ldr	r1, [pc, #720]	; (80015d8 <main+0x740>)
 8001306:	48b5      	ldr	r0, [pc, #724]	; (80015dc <main+0x744>)
 8001308:	f005 ff72 	bl	80071f0 <HAL_UART_Receive>
	    while (HAL_UART_Receive(&huart2, (uint8_t *)&temp_char, 1, 1) != HAL_TIMEOUT);
 800130c:	f107 01cf 	add.w	r1, r7, #207	; 0xcf
 8001310:	2301      	movs	r3, #1
 8001312:	2201      	movs	r2, #1
 8001314:	48b1      	ldr	r0, [pc, #708]	; (80015dc <main+0x744>)
 8001316:	f005 ff6b 	bl	80071f0 <HAL_UART_Receive>
 800131a:	4603      	mov	r3, r0
 800131c:	2b03      	cmp	r3, #3
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d000      	beq.n	800132c <main+0x494>
 800132a:	e7ef      	b.n	800130c <main+0x474>
	    sscanf(rece_uart1_,"%f %f", &right_big_cal, &temp);
 800132c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001330:	4aab      	ldr	r2, [pc, #684]	; (80015e0 <main+0x748>)
 8001332:	49a8      	ldr	r1, [pc, #672]	; (80015d4 <main+0x73c>)
 8001334:	48a8      	ldr	r0, [pc, #672]	; (80015d8 <main+0x740>)
 8001336:	f00a fbc9 	bl	800bacc <siscanf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)req_1_pos_, strlen(req_1_pos_), 0xffff);
 800133a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ffce 	bl	80002e0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800134c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001350:	48a2      	ldr	r0, [pc, #648]	; (80015dc <main+0x744>)
 8001352:	f005 feb7 	bl	80070c4 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart2, (uint8_t *)rece_uart1_, 18, 0xffff);
 8001356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135a:	2212      	movs	r2, #18
 800135c:	499e      	ldr	r1, [pc, #632]	; (80015d8 <main+0x740>)
 800135e:	489f      	ldr	r0, [pc, #636]	; (80015dc <main+0x744>)
 8001360:	f005 ff46 	bl	80071f0 <HAL_UART_Receive>
	    while (HAL_UART_Receive(&huart2, (uint8_t *)&temp_char, 1, 1) != HAL_TIMEOUT);
 8001364:	f107 01cf 	add.w	r1, r7, #207	; 0xcf
 8001368:	2301      	movs	r3, #1
 800136a:	2201      	movs	r2, #1
 800136c:	489b      	ldr	r0, [pc, #620]	; (80015dc <main+0x744>)
 800136e:	f005 ff3f 	bl	80071f0 <HAL_UART_Receive>
 8001372:	4603      	mov	r3, r0
 8001374:	2b03      	cmp	r3, #3
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <main+0x4ec>
 8001382:	e7ef      	b.n	8001364 <main+0x4cc>
	    sscanf(rece_uart1_,"%f %f", &right_fore_cal, &temp);
 8001384:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001388:	4a96      	ldr	r2, [pc, #600]	; (80015e4 <main+0x74c>)
 800138a:	4992      	ldr	r1, [pc, #584]	; (80015d4 <main+0x73c>)
 800138c:	4892      	ldr	r0, [pc, #584]	; (80015d8 <main+0x740>)
 800138e:	f00a fb9d 	bl	800bacc <siscanf>
  }


  Arm left_arm(Arm::Left, 27.5774374, 173.34744929, 0);
 8001392:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001396:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8001558 <main+0x6c0>
 800139a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001560 <main+0x6c8>
 800139e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001568 <main+0x6d0>
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fbff 	bl	8000ba8 <_ZN3ArmC1ENS_3DirEddd>
  Arm right_arm(Arm::Right, -52.0225626, 173.34744929, 0);
 80013aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013ae:	ed9f 2b6a 	vldr	d2, [pc, #424]	; 8001558 <main+0x6c0>
 80013b2:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8001560 <main+0x6c8>
 80013b6:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 8001570 <main+0x6d8>
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fbf3 	bl	8000ba8 <_ZN3ArmC1ENS_3DirEddd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  {
	char out[30];
	sprintf(out,"q 1 %f 12 0.2\n", 0.4 + left_fore_cal);
 80013c2:	4b83      	ldr	r3, [pc, #524]	; (80015d0 <main+0x738>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001578 <main+0x6e0>
 80013d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013d4:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80013d8:	ec53 2b17 	vmov	r2, r3, d7
 80013dc:	4982      	ldr	r1, [pc, #520]	; (80015e8 <main+0x750>)
 80013de:	f00a fb55 	bl	800ba8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)out, strlen(out), 0xffff);
 80013e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff7a 	bl	80002e0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80013f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f8:	487c      	ldr	r0, [pc, #496]	; (80015ec <main+0x754>)
 80013fa:	f005 fe63 	bl	80070c4 <HAL_UART_Transmit>
	sprintf(out,"q 1 %f 12 0.2\n", -1 + right_fore_cal);
 80013fe:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <main+0x74c>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001410:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001414:	ec53 2b17 	vmov	r2, r3, d7
 8001418:	4973      	ldr	r1, [pc, #460]	; (80015e8 <main+0x750>)
 800141a:	f00a fb37 	bl	800ba8c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 0xffff);
 800141e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff5c 	bl	80002e0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001434:	4869      	ldr	r0, [pc, #420]	; (80015dc <main+0x744>)
 8001436:	f005 fe45 	bl	80070c4 <HAL_UART_Transmit>
	HAL_Delay(10000);
 800143a:	f242 7010 	movw	r0, #10000	; 0x2710
 800143e:	f001 fa1f 	bl	8002880 <HAL_Delay>
//	HAL_Delay(10);
//	}

	{
		static int t = 0 ;
		if (new_data) {
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <main+0x758>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 818d 	beq.w	8001766 <main+0x8ce>
			if (point_1_x < 300) {
 800144c:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <main+0x75c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001454:	da13      	bge.n	800147e <main+0x5e6>
				pos_x_l = x_1_screen_mm + 3;
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <main+0x760>)
 8001458:	ed93 7b00 	vldr	d7, [r3]
 800145c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001460:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001464:	ed87 7b84 	vstr	d7, [r7, #528]	; 0x210
				pos_x_r = (300 - 640) * ratio;
 8001468:	a345      	add	r3, pc, #276	; (adr r3, 8001580 <main+0x6e8>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
				pos_y_r = (400 - 600) * ratio;
 8001472:	a345      	add	r3, pc, #276	; (adr r3, 8001588 <main+0x6f0>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
 800147c:	e044      	b.n	8001508 <main+0x670>
			} else if (point_1_x > 980) {
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <main+0x75c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8001486:	dd13      	ble.n	80014b0 <main+0x618>
				pos_x_l = x_1_screen_mm - 3;
 8001488:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <main+0x760>)
 800148a:	ed93 7b00 	vldr	d7, [r3]
 800148e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001492:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001496:	ed87 7b84 	vstr	d7, [r7, #528]	; 0x210
				pos_x_r = (980 - 640) * ratio;
 800149a:	a33d      	add	r3, pc, #244	; (adr r3, 8001590 <main+0x6f8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
				pos_y_r = (400 - 639) * ratio;
 80014a4:	a33c      	add	r3, pc, #240	; (adr r3, 8001598 <main+0x700>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
 80014ae:	e02b      	b.n	8001508 <main+0x670>
			} else {
				pos_x_l = x_1_screen_mm;
 80014b0:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <main+0x760>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
				pos_x_r = x_1_screen_mm;
 80014ba:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <main+0x760>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
				pos_y_r =  (400 - 600 - 80 * sin((-300.0 + point_1_x) / 100.0)) * ratio;
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <main+0x75c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014d0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80015a0 <main+0x708>
 80014d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014d8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80015a8 <main+0x710>
 80014dc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014e0:	eeb0 0b46 	vmov.f64	d0, d6
 80014e4:	f008 fa1c 	bl	8009920 <sin>
 80014e8:	eeb0 7b40 	vmov.f64	d7, d0
 80014ec:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80015b0 <main+0x718>
 80014f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014f4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80015b8 <main+0x720>
 80014f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014fc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80015c0 <main+0x728>
 8001500:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001504:	ed87 7b7e 	vstr	d7, [r7, #504]	; 0x1f8
			}
			if (point_1_y < 185) {
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <main+0x764>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2bb8      	cmp	r3, #184	; 0xb8
 800150e:	dc09      	bgt.n	8001524 <main+0x68c>
				pos_y_l = y_1_screen_mm - 3;
 8001510:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <main+0x768>)
 8001512:	ed93 7b00 	vldr	d7, [r3]
 8001516:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800151a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800151e:	ed87 7b82 	vstr	d7, [r7, #520]	; 0x208
 8001522:	e074      	b.n	800160e <main+0x776>
			} else if (point_1_y > 300) {
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <main+0x764>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800152c:	dd05      	ble.n	800153a <main+0x6a2>
				pos_y_l = (400 - 300) * ratio + 3;
 800152e:	a326      	add	r3, pc, #152	; (adr r3, 80015c8 <main+0x730>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
 8001538:	e069      	b.n	800160e <main+0x776>
			} else if (point_1_y > 215) {
 800153a:	4b30      	ldr	r3, [pc, #192]	; (80015fc <main+0x764>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2bd7      	cmp	r3, #215	; 0xd7
 8001540:	dd60      	ble.n	8001604 <main+0x76c>
				pos_y_l = y_1_screen_mm + 3;
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <main+0x768>)
 8001544:	ed93 7b00 	vldr	d7, [r3]
 8001548:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800154c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001550:	ed87 7b82 	vstr	d7, [r7, #520]	; 0x208
 8001554:	e05b      	b.n	800160e <main+0x776>
 8001556:	bf00      	nop
	...
 8001560:	4df93230 	.word	0x4df93230
 8001564:	4065ab1e 	.word	0x4065ab1e
 8001568:	effc7cbe 	.word	0xeffc7cbe
 800156c:	403b93d2 	.word	0x403b93d2
 8001570:	54ce8e6e 	.word	0x54ce8e6e
 8001574:	c04a02e3 	.word	0xc04a02e3
 8001578:	9999999a 	.word	0x9999999a
 800157c:	3fd99999 	.word	0x3fd99999
 8001580:	00000001 	.word	0x00000001
 8001584:	c04cb000 	.word	0xc04cb000
 8001588:	00000000 	.word	0x00000000
 800158c:	c040e000 	.word	0xc040e000
 8001590:	00000001 	.word	0x00000001
 8001594:	404cb000 	.word	0x404cb000
 8001598:	66666667 	.word	0x66666667
 800159c:	c0442a66 	.word	0xc0442a66
 80015a0:	00000000 	.word	0x00000000
 80015a4:	4072c000 	.word	0x4072c000
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40590000 	.word	0x40590000
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40540000 	.word	0x40540000
 80015b8:	00000000 	.word	0x00000000
 80015bc:	c0690000 	.word	0xc0690000
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	3fc59999 	.word	0x3fc59999
 80015c8:	00000000 	.word	0x00000000
 80015cc:	4033e000 	.word	0x4033e000
 80015d0:	24000438 	.word	0x24000438
 80015d4:	0800fb48 	.word	0x0800fb48
 80015d8:	24000400 	.word	0x24000400
 80015dc:	240002e0 	.word	0x240002e0
 80015e0:	2400043c 	.word	0x2400043c
 80015e4:	24000440 	.word	0x24000440
 80015e8:	0800fb50 	.word	0x0800fb50
 80015ec:	24000250 	.word	0x24000250
 80015f0:	24000469 	.word	0x24000469
 80015f4:	24000448 	.word	0x24000448
 80015f8:	24000470 	.word	0x24000470
 80015fc:	2400044c 	.word	0x2400044c
 8001600:	24000478 	.word	0x24000478
			} else pos_y_l = y_1_screen_mm;
 8001604:	4baf      	ldr	r3, [pc, #700]	; (80018c4 <main+0xa2c>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
			left_arm.GetArmAngle(big_angle_l, fore_angle_l, pos_x_l, pos_y_l);
 800160e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001612:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001616:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800161a:	ed97 1b82 	vldr	d1, [r7, #520]	; 0x208
 800161e:	ed97 0b84 	vldr	d0, [r7, #528]	; 0x210
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fae8 	bl	8000bf8 <_ZN3Arm11GetArmAngleERdS0_dd>
			right_arm.GetArmAngle(big_angle_r, fore_angle_r, pos_x_r, pos_y_r);
 8001628:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800162c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001630:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001634:	ed97 1b7e 	vldr	d1, [r7, #504]	; 0x1f8
 8001638:	ed97 0b80 	vldr	d0, [r7, #512]	; 0x200
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fadb 	bl	8000bf8 <_ZN3Arm11GetArmAngleERdS0_dd>

			char out[30];
			if (++t > 20) {
 8001642:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <main+0xa30>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a9f      	ldr	r2, [pc, #636]	; (80018c8 <main+0xa30>)
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <main+0xa30>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b14      	cmp	r3, #20
 8001652:	bfcc      	ite	gt
 8001654:	2301      	movgt	r3, #1
 8001656:	2300      	movle	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03f      	beq.n	80016de <main+0x846>
				sprintf(out,"q 1 %f 12 0.2\n", left_fore_cal + fore_angle_l);
 800165e:	4b9b      	ldr	r3, [pc, #620]	; (80018cc <main+0xa34>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001668:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800166c:	ed93 7b00 	vldr	d7, [r3]
 8001670:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001674:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001678:	ec53 2b17 	vmov	r2, r3, d7
 800167c:	4994      	ldr	r1, [pc, #592]	; (80018d0 <main+0xa38>)
 800167e:	f00a fa05 	bl	800ba8c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)out, strlen(out), 0xffff);
 8001682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fe2a 	bl	80002e0 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001698:	488e      	ldr	r0, [pc, #568]	; (80018d4 <main+0xa3c>)
 800169a:	f005 fd13 	bl	80070c4 <HAL_UART_Transmit>
				sprintf(out,"q 0 %f 12 0.2\n", left_big_cal + big_angle_l);
 800169e:	4b8e      	ldr	r3, [pc, #568]	; (80018d8 <main+0xa40>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016ac:	ed13 7b02 	vldr	d7, [r3, #-8]
 80016b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80016b8:	ec53 2b17 	vmov	r2, r3, d7
 80016bc:	4987      	ldr	r1, [pc, #540]	; (80018dc <main+0xa44>)
 80016be:	f00a f9e5 	bl	800ba8c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)out, strlen(out), 0xffff);
 80016c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe0a 	bl	80002e0 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80016d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d8:	487e      	ldr	r0, [pc, #504]	; (80018d4 <main+0xa3c>)
 80016da:	f005 fcf3 	bl	80070c4 <HAL_UART_Transmit>
			}
			sprintf(out,"q 1 %f 12 0.2\n", right_fore_cal + fore_angle_r);
 80016de:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <main+0xa48>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016ec:	ed93 7b00 	vldr	d7, [r3]
 80016f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016f4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80016f8:	ec53 2b17 	vmov	r2, r3, d7
 80016fc:	4974      	ldr	r1, [pc, #464]	; (80018d0 <main+0xa38>)
 80016fe:	f00a f9c5 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 0xffff);
 8001702:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fdea 	bl	80002e0 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001718:	4872      	ldr	r0, [pc, #456]	; (80018e4 <main+0xa4c>)
 800171a:	f005 fcd3 	bl	80070c4 <HAL_UART_Transmit>
			sprintf(out,"q 0 %f 12 0.2\n", right_big_cal + big_angle_r);
 800171e:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <main+0xa50>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001728:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800172c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001730:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001734:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001738:	ec53 2b17 	vmov	r2, r3, d7
 800173c:	4967      	ldr	r1, [pc, #412]	; (80018dc <main+0xa44>)
 800173e:	f00a f9a5 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 0xffff);
 8001742:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fdca 	bl	80002e0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001758:	4862      	ldr	r0, [pc, #392]	; (80018e4 <main+0xa4c>)
 800175a:	f005 fcb3 	bl	80070c4 <HAL_UART_Transmit>
			new_data = 0;
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <main+0xa54>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e66d      	b.n	8001442 <main+0x5aa>
		} else if (new_data_k) {
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <main+0xa58>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f43f ae69 	beq.w	8001442 <main+0x5aa>
			left_arm.GetArmAngle(big_angle_l, fore_angle_l, x_1_screen_mm, y_1_screen_mm);
 8001770:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <main+0xa5c>)
 8001772:	ed93 7b00 	vldr	d7, [r3]
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <main+0xa2c>)
 8001778:	ed93 6b00 	vldr	d6, [r3]
 800177c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001780:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001784:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001788:	eeb0 1b46 	vmov.f64	d1, d6
 800178c:	eeb0 0b47 	vmov.f64	d0, d7
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fa31 	bl	8000bf8 <_ZN3Arm11GetArmAngleERdS0_dd>
			right_arm.GetArmAngle(big_angle_r, fore_angle_r, x_2_screen_mm, y_2_screen_mm);
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <main+0xa60>)
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <main+0xa64>)
 800179e:	ed93 6b00 	vldr	d6, [r3]
 80017a2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80017a6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80017aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80017ae:	eeb0 1b46 	vmov.f64	d1, d6
 80017b2:	eeb0 0b47 	vmov.f64	d0, d7
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa1e 	bl	8000bf8 <_ZN3Arm11GetArmAngleERdS0_dd>
			char out[30];
			sprintf(out,"q 1 %f 12 0.2\n", left_fore_cal + fore_angle_l);
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <main+0xa34>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ca:	ed93 7b00 	vldr	d7, [r3]
 80017ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017d2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80017d6:	ec53 2b17 	vmov	r2, r3, d7
 80017da:	493d      	ldr	r1, [pc, #244]	; (80018d0 <main+0xa38>)
 80017dc:	f00a f956 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)out, strlen(out), 0xffff);
 80017e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fd7b 	bl	80002e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f6:	4837      	ldr	r0, [pc, #220]	; (80018d4 <main+0xa3c>)
 80017f8:	f005 fc64 	bl	80070c4 <HAL_UART_Transmit>
			sprintf(out,"q 0 %f 12 0.2\n", left_big_cal + big_angle_l);
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <main+0xa40>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001806:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800180a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800180e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001812:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001816:	ec53 2b17 	vmov	r2, r3, d7
 800181a:	4930      	ldr	r1, [pc, #192]	; (80018dc <main+0xa44>)
 800181c:	f00a f936 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)out, strlen(out), 0xffff);
 8001820:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fd5b 	bl	80002e0 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <main+0xa3c>)
 8001838:	f005 fc44 	bl	80070c4 <HAL_UART_Transmit>
			sprintf(out,"q 1 %f 12 0.2\n", right_fore_cal + fore_angle_r);
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <main+0xa48>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001846:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800184a:	ed93 7b00 	vldr	d7, [r3]
 800184e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001852:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001856:	ec53 2b17 	vmov	r2, r3, d7
 800185a:	491d      	ldr	r1, [pc, #116]	; (80018d0 <main+0xa38>)
 800185c:	f00a f916 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 0xffff);
 8001860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fd3b 	bl	80002e0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001876:	481b      	ldr	r0, [pc, #108]	; (80018e4 <main+0xa4c>)
 8001878:	f005 fc24 	bl	80070c4 <HAL_UART_Transmit>
			sprintf(out,"q 0 %f 12 0.2\n", right_big_cal + big_angle_r);
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <main+0xa50>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001886:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800188e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001892:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001896:	ec53 2b17 	vmov	r2, r3, d7
 800189a:	4910      	ldr	r1, [pc, #64]	; (80018dc <main+0xa44>)
 800189c:	f00a f8f6 	bl	800ba8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 0xffff);
 80018a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fd1b 	bl	80002e0 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <main+0xa4c>)
 80018b8:	f005 fc04 	bl	80070c4 <HAL_UART_Transmit>
			new_data_k = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <main+0xa58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
		}

	}

    /* USER CODE BEGIN 3 */
  }
 80018c2:	e5be      	b.n	8001442 <main+0x5aa>
 80018c4:	24000478 	.word	0x24000478
 80018c8:	24000490 	.word	0x24000490
 80018cc:	24000438 	.word	0x24000438
 80018d0:	0800fb50 	.word	0x0800fb50
 80018d4:	24000250 	.word	0x24000250
 80018d8:	24000434 	.word	0x24000434
 80018dc:	0800fb60 	.word	0x0800fb60
 80018e0:	24000440 	.word	0x24000440
 80018e4:	240002e0 	.word	0x240002e0
 80018e8:	2400043c 	.word	0x2400043c
 80018ec:	24000469 	.word	0x24000469
 80018f0:	2400046a 	.word	0x2400046a
 80018f4:	24000470 	.word	0x24000470
 80018f8:	24000480 	.word	0x24000480
 80018fc:	24000488 	.word	0x24000488

08001900 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09c      	sub	sp, #112	; 0x70
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	224c      	movs	r2, #76	; 0x4c
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f009 f976 	bl	800ac00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2220      	movs	r2, #32
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f009 f970 	bl	800ac00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001920:	2004      	movs	r0, #4
 8001922:	f003 f803 	bl	800492c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <_Z18SystemClock_Configv+0x10c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a37      	ldr	r2, [pc, #220]	; (8001a0c <_Z18SystemClock_Configv+0x10c>)
 8001930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <_Z18SystemClock_Configv+0x10c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <_Z18SystemClock_Configv+0x110>)
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <_Z18SystemClock_Configv+0x110>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <_Z18SystemClock_Configv+0x110>)
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <_Z18SystemClock_Configv+0x10c>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d000      	beq.n	8001972 <_Z18SystemClock_Configv+0x72>
 8001970:	e7f2      	b.n	8001958 <_Z18SystemClock_Configv+0x58>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001972:	2302      	movs	r3, #2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001976:	2301      	movs	r3, #1
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001982:	2300      	movs	r3, #0
 8001984:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001986:	2304      	movs	r3, #4
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800198a:	233c      	movs	r3, #60	; 0x3c
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800198e:	2302      	movs	r3, #2
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001992:	2305      	movs	r3, #5
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800199a:	230c      	movs	r3, #12
 800199c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800199e:	2300      	movs	r3, #0
 80019a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f818 	bl	80049e0 <HAL_RCC_OscConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80019c0:	f000 fb10 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	233f      	movs	r3, #63	; 0x3f
 80019c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c8:	2303      	movs	r3, #3
 80019ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019d0:	2308      	movs	r3, #8
 80019d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2104      	movs	r1, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fc26 	bl	800523c <HAL_RCC_ClockConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001a00:	f000 faf0 	bl	8001fe4 <Error_Handler>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3770      	adds	r7, #112	; 0x70
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024800 	.word	0x58024800
 8001a10:	58000400 	.word	0x58000400

08001a14 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <_ZL12MX_I2C1_Initv+0x94>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <_ZL12MX_I2C1_Initv+0x98>)
 8001a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a50:	f001 ffc0 	bl	80039d4 <HAL_I2C_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001a64:	f000 fabe 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a6c:	f002 fec7 	bl	80047fe <HAL_I2CEx_ConfigAnalogFilter>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001a80:	f000 fab0 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x90>)
 8001a88:	f002 ff04 	bl	8004894 <HAL_I2CEx_ConfigDigitalFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 faa2 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	24000204 	.word	0x24000204
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	307075b1 	.word	0x307075b1

08001ab0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1152000;
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001abc:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8001abe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af6:	481c      	ldr	r0, [pc, #112]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001af8:	f005 fa94 	bl	8007024 <HAL_UART_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8001b0c:	f000 fa6a 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001b14:	f007 fded 	bl	80096f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8001b28:	f000 fa5c 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001b30:	f007 fe1d 	bl	800976e <HAL_UARTEx_SetRxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8001b44:	f000 fa4e 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001b4a:	f007 fd99 	bl	8009680 <HAL_UARTEx_DisableFifoMode>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8001b5e:	f000 fa41 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000250 	.word	0x24000250
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	00119400 	.word	0x00119400

08001b74 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b80:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001b82:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b98:	220c      	movs	r2, #12
 8001b9a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bba:	481c      	ldr	r0, [pc, #112]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bbc:	f005 fa32 	bl	8007024 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8001bd0:	f000 fa08 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4815      	ldr	r0, [pc, #84]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bd8:	f007 fd8b 	bl	80096f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <_ZL19MX_USART2_UART_Initv+0x7c>
  {
    Error_Handler();
 8001bec:	f000 f9fa 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bf4:	f007 fdbb 	bl	800976e <HAL_UARTEx_SetRxFifoThreshold>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bf14      	ite	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	2300      	moveq	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <_ZL19MX_USART2_UART_Initv+0x98>
  {
    Error_Handler();
 8001c08:	f000 f9ec 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c0e:	f007 fd37 	bl	8009680 <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <_ZL19MX_USART2_UART_Initv+0xb2>
  {
    Error_Handler();
 8001c22:	f000 f9df 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	240002e0 	.word	0x240002e0
 8001c30:	40004400 	.word	0x40004400
 8001c34:	00119400 	.word	0x00119400

08001c38 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c80:	481b      	ldr	r0, [pc, #108]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c82:	f005 f9cf 	bl	8007024 <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001c96:	f000 f9a5 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c9e:	f007 fd28 	bl	80096f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001cb2:	f000 f997 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cba:	f007 fd58 	bl	800976e <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001cce:	f000 f989 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cd4:	f007 fcd4 	bl	8009680 <HAL_UARTEx_DisableFifoMode>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001ce8:	f000 f97c 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	24000370 	.word	0x24000370
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2c:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_Init.Pin = GPIO_PIN_0;
 8001d94:	2301      	movs	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4817      	ldr	r0, [pc, #92]	; (8001e08 <_ZL12MX_GPIO_Initv+0x110>)
 8001dac:	f001 fc1a 	bl	80035e4 <HAL_GPIO_Init>

  GPIO_Init.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001db4:	2301      	movs	r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull = GPIO_PULLDOWN;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pin = GPIO_PIN_2;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4810      	ldr	r0, [pc, #64]	; (8001e08 <_ZL12MX_GPIO_Initv+0x110>)
 8001dc8:	f001 fc0c 	bl	80035e4 <HAL_GPIO_Init>
  GPIO_Init.Pin = GPIO_PIN_3;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <_ZL12MX_GPIO_Initv+0x110>)
 8001dd8:	f001 fc04 	bl	80035e4 <HAL_GPIO_Init>
  GPIO_Init.Pin = GPIO_PIN_4;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4808      	ldr	r0, [pc, #32]	; (8001e08 <_ZL12MX_GPIO_Initv+0x110>)
 8001de8:	f001 fbfc 	bl	80035e4 <HAL_GPIO_Init>
  GPIO_Init.Pin = GPIO_PIN_5;
 8001dec:	2320      	movs	r3, #32
 8001dee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	4804      	ldr	r0, [pc, #16]	; (8001e08 <_ZL12MX_GPIO_Initv+0x110>)
 8001df8:	f001 fbf4 	bl	80035e4 <HAL_GPIO_Init>
}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58020400 	.word	0x58020400
 8001e0c:	00000000 	.word	0x00000000

08001e10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	6078      	str	r0, [r7, #4]

  if (huart == &huart3){
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	f040 80a9 	bne.w	8001f74 <HAL_UART_RxCpltCallback+0x164>
	if (ready) {
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_UART_RxCpltCallback+0x17c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02f      	beq.n	8001e8a <HAL_UART_RxCpltCallback+0x7a>
      sscanf(host_read, "%d %d", &point_1_x, &point_1_y);
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_UART_RxCpltCallback+0x180>)
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_UART_RxCpltCallback+0x184>)
 8001e2e:	495a      	ldr	r1, [pc, #360]	; (8001f98 <HAL_UART_RxCpltCallback+0x188>)
 8001e30:	485a      	ldr	r0, [pc, #360]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001e32:	f009 fe4b 	bl	800bacc <siscanf>
      x_1_screen_mm = (point_1_x - 640) * ratio;
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_UART_RxCpltCallback+0x184>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e46:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001e4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <HAL_UART_RxCpltCallback+0x190>)
 8001e50:	ed83 7b00 	vstr	d7, [r3]
      y_1_screen_mm = (-point_1_y + 400) * ratio;
 8001e54:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_UART_RxCpltCallback+0x180>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e64:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001e68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_UART_RxCpltCallback+0x194>)
 8001e6e:	ed83 7b00 	vstr	d7, [r3]
	  ready = 0;
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_UART_RxCpltCallback+0x17c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4948      	ldr	r1, [pc, #288]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001e7c:	4842      	ldr	r0, [pc, #264]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001e7e:	f005 fa8b 	bl	8007398 <HAL_UART_Receive_IT>
	  new_data = 1;
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_UART_RxCpltCallback+0x198>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
	} else if (host_read[0] == 'k'){
	  ready_k = 1;
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 17);
	} else HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 1);
  }
}
 8001e88:	e074      	b.n	8001f74 <HAL_UART_RxCpltCallback+0x164>
	} else if (ready_k){
 8001e8a:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_UART_RxCpltCallback+0x19c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d051      	beq.n	8001f36 <HAL_UART_RxCpltCallback+0x126>
	  sscanf(host_read, "%d %d %d %d", &point_1_x, &point_1_y, &point_2_x, &point_2_y);
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_UART_RxCpltCallback+0x180>)
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_UART_RxCpltCallback+0x184>)
 8001e9e:	4946      	ldr	r1, [pc, #280]	; (8001fb8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001ea0:	483e      	ldr	r0, [pc, #248]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001ea2:	f009 fe13 	bl	800bacc <siscanf>
      x_1_screen_mm = (point_1_x - 640) * ratio;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_UART_RxCpltCallback+0x184>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eb6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001eba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_UART_RxCpltCallback+0x190>)
 8001ec0:	ed83 7b00 	vstr	d7, [r3]
      y_1_screen_mm = (-point_1_y + 400) * ratio;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_UART_RxCpltCallback+0x180>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ed4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_UART_RxCpltCallback+0x194>)
 8001ede:	ed83 7b00 	vstr	d7, [r3]
      x_2_screen_mm = (point_2_x - 640) * ratio;
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ef2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_UART_RxCpltCallback+0x1ac>)
 8001efc:	ed83 7b00 	vstr	d7, [r3]
      y_2_screen_mm = (-point_2_y + 400) * ratio;
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f10:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001f80 <HAL_UART_RxCpltCallback+0x170>
 8001f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_UART_RxCpltCallback+0x1b0>)
 8001f1a:	ed83 7b00 	vstr	d7, [r3]
      ready_k = 0;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_UART_RxCpltCallback+0x19c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	491d      	ldr	r1, [pc, #116]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001f2a:	f005 fa35 	bl	8007398 <HAL_UART_Receive_IT>
      new_data_k = 1;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
}
 8001f34:	e01e      	b.n	8001f74 <HAL_UART_RxCpltCallback+0x164>
	} else if (host_read[0] == 'b'){
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b62      	cmp	r3, #98	; 0x62
 8001f3c:	d108      	bne.n	8001f50 <HAL_UART_RxCpltCallback+0x140>
	  ready = 1;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_UART_RxCpltCallback+0x17c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 9);
 8001f44:	2209      	movs	r2, #9
 8001f46:	4915      	ldr	r1, [pc, #84]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f48:	480f      	ldr	r0, [pc, #60]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001f4a:	f005 fa25 	bl	8007398 <HAL_UART_Receive_IT>
}
 8001f4e:	e011      	b.n	8001f74 <HAL_UART_RxCpltCallback+0x164>
	} else if (host_read[0] == 'k'){
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b6b      	cmp	r3, #107	; 0x6b
 8001f56:	d108      	bne.n	8001f6a <HAL_UART_RxCpltCallback+0x15a>
	  ready_k = 1;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_UART_RxCpltCallback+0x19c>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 17);
 8001f5e:	2211      	movs	r2, #17
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001f64:	f005 fa18 	bl	8007398 <HAL_UART_Receive_IT>
}
 8001f68:	e004      	b.n	8001f74 <HAL_UART_RxCpltCallback+0x164>
	} else HAL_UART_Receive_IT(&huart3, (uint8_t *)host_read, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	490b      	ldr	r1, [pc, #44]	; (8001f9c <HAL_UART_RxCpltCallback+0x18c>)
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <HAL_UART_RxCpltCallback+0x178>)
 8001f70:	f005 fa12 	bl	8007398 <HAL_UART_Receive_IT>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	f3af 8000 	nop.w
 8001f80:	9999999a 	.word	0x9999999a
 8001f84:	3fc59999 	.word	0x3fc59999
 8001f88:	24000370 	.word	0x24000370
 8001f8c:	24000444 	.word	0x24000444
 8001f90:	2400044c 	.word	0x2400044c
 8001f94:	24000448 	.word	0x24000448
 8001f98:	0800fc40 	.word	0x0800fc40
 8001f9c:	24000458 	.word	0x24000458
 8001fa0:	24000470 	.word	0x24000470
 8001fa4:	24000478 	.word	0x24000478
 8001fa8:	24000469 	.word	0x24000469
 8001fac:	24000445 	.word	0x24000445
 8001fb0:	24000454 	.word	0x24000454
 8001fb4:	24000450 	.word	0x24000450
 8001fb8:	0800fc48 	.word	0x0800fc48
 8001fbc:	24000480 	.word	0x24000480
 8001fc0:	24000488 	.word	0x24000488
 8001fc4:	2400046a 	.word	0x2400046a

08001fc8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <HAL_UART_TxCpltCallback+0x18>)
 8001fd4:	f001 fcb6 	bl	8003944 <HAL_GPIO_TogglePin>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58020400 	.word	0x58020400

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_MspInit+0x30>)
 8001ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ffc:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_MspInit+0x30>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_MspInit+0x30>)
 8002008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	58024400 	.word	0x58024400

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0b8      	sub	sp, #224	; 0xe0
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	22bc      	movs	r2, #188	; 0xbc
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f008 fddb 	bl	800ac00 <memset>
  if(hi2c->Instance==I2C1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <HAL_I2C_MspInit+0xe0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d152      	bne.n	80020fa <HAL_I2C_MspInit+0xd6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002054:	2308      	movs	r3, #8
 8002056:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fc76 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800206e:	f7ff ffb9 	bl	8001fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002090:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002098:	2312      	movs	r3, #18
 800209a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020aa:	2304      	movs	r3, #4
 80020ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020b4:	4619      	mov	r1, r3
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <HAL_I2C_MspInit+0xe8>)
 80020b8:	f001 fa94 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_I2C_MspInit+0xe4>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2101      	movs	r1, #1
 80020de:	201f      	movs	r0, #31
 80020e0:	f000 fcd9 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020e4:	201f      	movs	r0, #31
 80020e6:	f000 fcf0 	bl	8002aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2020      	movs	r0, #32
 80020f0:	f000 fcd1 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020f4:	2020      	movs	r0, #32
 80020f6:	f000 fce8 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	37e0      	adds	r7, #224	; 0xe0
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40005400 	.word	0x40005400
 8002108:	58024400 	.word	0x58024400
 800210c:	58020400 	.word	0x58020400

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0bc      	sub	sp, #240	; 0xf0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0320 	add.w	r3, r7, #32
 800212c:	22bc      	movs	r2, #188	; 0xbc
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f008 fd65 	bl	800ac00 <memset>
  if(huart->Instance==USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a79      	ldr	r2, [pc, #484]	; (8002320 <HAL_UART_MspInit+0x210>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d14b      	bne.n	80021d8 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002140:	2301      	movs	r3, #1
 8002142:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214a:	f107 0320 	add.w	r3, r7, #32
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fc00 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800215a:	f7ff ff43 	bl	8001fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002164:	4a6f      	ldr	r2, [pc, #444]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	4b69      	ldr	r3, [pc, #420]	; (8002324 <HAL_UART_MspInit+0x214>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	4a68      	ldr	r2, [pc, #416]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218c:	4b65      	ldr	r3, [pc, #404]	; (8002324 <HAL_UART_MspInit+0x214>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800219a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021be:	4619      	mov	r1, r3
 80021c0:	4859      	ldr	r0, [pc, #356]	; (8002328 <HAL_UART_MspInit+0x218>)
 80021c2:	f001 fa0f 	bl	80035e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2102      	movs	r1, #2
 80021ca:	2025      	movs	r0, #37	; 0x25
 80021cc:	f000 fc63 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021d0:	2025      	movs	r0, #37	; 0x25
 80021d2:	f000 fc7a 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021d6:	e09f      	b.n	8002318 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_UART_MspInit+0x21c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d14a      	bne.n	8002278 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fbaf 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80021fc:	f7ff fef2 	bl	8001fe4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002200:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002206:	4a47      	ldr	r2, [pc, #284]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002224:	4a3f      	ldr	r2, [pc, #252]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002226:	f043 0308 	orr.w	r3, r3, #8
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_UART_MspInit+0x214>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800223c:	2360      	movs	r3, #96	; 0x60
 800223e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800225e:	4619      	mov	r1, r3
 8002260:	4833      	ldr	r0, [pc, #204]	; (8002330 <HAL_UART_MspInit+0x220>)
 8002262:	f001 f9bf 	bl	80035e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	2026      	movs	r0, #38	; 0x26
 800226c:	f000 fc13 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f000 fc2a 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8002276:	e04f      	b.n	8002318 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_UART_MspInit+0x224>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d14a      	bne.n	8002318 <HAL_UART_MspInit+0x208>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002282:	2302      	movs	r3, #2
 8002284:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	4618      	mov	r0, r3
 8002292:	f003 fb5f 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800229c:	f7ff fea2 	bl	8001fe4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_UART_MspInit+0x214>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f6:	2307      	movs	r3, #7
 80022f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_UART_MspInit+0x228>)
 8002304:	f001 f96e 	bl	80035e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2027      	movs	r0, #39	; 0x27
 800230e:	f000 fbc2 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002312:	2027      	movs	r0, #39	; 0x27
 8002314:	f000 fbd9 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8002318:	bf00      	nop
 800231a:	37f0      	adds	r7, #240	; 0xf0
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40011000 	.word	0x40011000
 8002324:	58024400 	.word	0x58024400
 8002328:	58020000 	.word	0x58020000
 800232c:	40004400 	.word	0x40004400
 8002330:	58020c00 	.word	0x58020c00
 8002334:	40004800 	.word	0x40004800
 8002338:	58020400 	.word	0x58020400

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002388:	f000 fa5a 	bl	8002840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <I2C1_EV_IRQHandler+0x10>)
 8002396:	f001 fbad 	bl	8003af4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	24000204 	.word	0x24000204

080023a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <I2C1_ER_IRQHandler+0x10>)
 80023aa:	f001 fbbd 	bl	8003b28 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	24000204 	.word	0x24000204

080023b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <USART1_IRQHandler+0x10>)
 80023be:	f005 f841 	bl	8007444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	24000250 	.word	0x24000250

080023cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <USART2_IRQHandler+0x10>)
 80023d2:	f005 f837 	bl	8007444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	240002e0 	.word	0x240002e0

080023e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART3_IRQHandler+0x10>)
 80023e6:	f005 f82d 	bl	8007444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	24000370 	.word	0x24000370

080023f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_kill>:

int _kill(int pid, int sig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800240e:	f008 fbc5 	bl	800ab9c <__errno>
 8002412:	4603      	mov	r3, r0
 8002414:	2216      	movs	r2, #22
 8002416:	601a      	str	r2, [r3, #0]
	return -1;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_exit>:

void _exit (int status)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800242c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002436:	e7fe      	b.n	8002436 <_exit+0x12>

08002438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00a      	b.n	8002460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244a:	f3af 8000 	nop.w
 800244e:	4601      	mov	r1, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbf0      	blt.n	800244a <_read+0x12>
	}

return len;
 8002468:	687b      	ldr	r3, [r7, #4]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e009      	b.n	8002498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf1      	blt.n	8002484 <_write+0x12>
	}
	return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_close>:

int _close(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d2:	605a      	str	r2, [r3, #4]
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_isatty>:

int _isatty(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return 1;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f008 fb2a 	bl	800ab9c <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	24080000 	.word	0x24080000
 8002574:	00000400 	.word	0x00000400
 8002578:	24000494 	.word	0x24000494
 800257c:	240004b8 	.word	0x240004b8

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002584:	f7fe fa7a 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	; (80025c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ae:	f008 fafb 	bl	800aba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7fe fc71 	bl	8000e98 <main>
  bx  lr
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025c0:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80025c4:	080103ac 	.word	0x080103ac
  ldr r2, =_sbss
 80025c8:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80025cc:	240004b4 	.word	0x240004b4

080025d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC3_IRQHandler>

080025d2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
 80025e4:	f7ff fcfe 	bl	8001fe4 <Error_Handler>
 80025e8:	e7fe      	b.n	80025e8 <stm32_lock_init+0x16>
  lock->flag = 0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	705a      	strb	r2, [r3, #1]
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002606:	f3ef 8310 	mrs	r3, PRIMASK
 800260a:	60bb      	str	r3, [r7, #8]
  return(result);
 800260c:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002616:	b672      	cpsid	i
}
 8002618:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800261a:	f3bf 8f4f 	dsb	sy
}
 800261e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002620:	f3bf 8f6f 	isb	sy
}
 8002624:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
 8002630:	f7ff fcd8 	bl	8001fe4 <Error_Handler>
 8002634:	e7fe      	b.n	8002634 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e008      	b.n	8002658 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d104      	bne.n	8002658 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800264e:	b672      	cpsid	i
}
 8002650:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002652:	f7ff fcc7 	bl	8001fe4 <Error_Handler>
 8002656:	e7fe      	b.n	8002656 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	705a      	strb	r2, [r3, #1]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800267a:	b672      	cpsid	i
}
 800267c:	bf00      	nop
 800267e:	f7ff fcb1 	bl	8001fe4 <Error_Handler>
 8002682:	e7fe      	b.n	8002682 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002690:	f7ff fca8 	bl	8001fe4 <Error_Handler>
 8002694:	e7fe      	b.n	8002694 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	3b01      	subs	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <stm32_lock_release+0x4a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80026b2:	b662      	cpsie	i
}
 80026b4:	bf00      	nop
  {
    __enable_irq();
  }
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80026cc:	f008 fa66 	bl	800ab9c <__errno>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2216      	movs	r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
    return;
 80026d6:	e015      	b.n	8002704 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80026d8:	2002      	movs	r0, #2
 80026da:	f008 fa89 	bl	800abf0 <malloc>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff6d 	bl	80025d2 <stm32_lock_init>
    return;
 80026f8:	e004      	b.n	8002704 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80026fa:	b672      	cpsid	i
}
 80026fc:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80026fe:	f7ff fc71 	bl	8001fe4 <Error_Handler>
 8002702:	e7fe      	b.n	8002702 <__retarget_lock_init_recursive+0x44>
}
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	bf00      	nop
 800271c:	f7ff fc62 	bl	8001fe4 <Error_Handler>
 8002720:	e7fe      	b.n	8002720 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff6a 	bl	80025fe <stm32_lock_acquire>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
 8002744:	f7ff fc4e 	bl	8001fe4 <Error_Handler>
 8002748:	e7fe      	b.n	8002748 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff8d 	bl	800266c <stm32_lock_release>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002762:	2003      	movs	r0, #3
 8002764:	f000 f98c 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002768:	f002 ff1e 	bl	80055a8 <HAL_RCC_GetSysClockFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_Init+0x68>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	4913      	ldr	r1, [pc, #76]	; (80027c8 <HAL_Init+0x6c>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_Init+0x68>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_Init+0x6c>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_Init+0x70>)
 800279e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_Init+0x74>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f814 	bl	80027d4 <HAL_InitTick>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e002      	b.n	80027bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027b6:	f7ff fc1b 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	58024400 	.word	0x58024400
 80027c8:	0800fc60 	.word	0x0800fc60
 80027cc:	24000004 	.word	0x24000004
 80027d0:	24000000 	.word	0x24000000

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_InitTick+0x60>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e021      	b.n	800282c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_InitTick+0x64>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_InitTick+0x60>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f971 	bl	8002ae6 <HAL_SYSTICK_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00e      	b.n	800282c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d80a      	bhi.n	800282a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800281c:	f000 f93b 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_InitTick+0x68>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2400000c 	.word	0x2400000c
 8002838:	24000000 	.word	0x24000000
 800283c:	24000008 	.word	0x24000008

08002840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_IncTick+0x20>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x24>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_IncTick+0x24>)
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2400000c 	.word	0x2400000c
 8002864:	240004a4 	.word	0x240004a4

08002868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTick;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_GetTick+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	240004a4 	.word	0x240004a4

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff ffee 	bl	8002868 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffde 	bl	8002868 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2400000c 	.word	0x2400000c

080028c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetREVID+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0c1b      	lsrs	r3, r3, #16
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	5c001000 	.word	0x5c001000

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <__NVIC_SetPriorityGrouping+0x40>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	4313      	orrs	r3, r2
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x40>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	05fa0000 	.word	0x05fa0000

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a60:	f7ff ff8e 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff29 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff40 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff33 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa4 	bl	8002a3c <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff feae 	bl	8002868 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e2dc      	b.n	80030d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d008      	beq.n	8002b36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e2cd      	b.n	80030d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a76      	ldr	r2, [pc, #472]	; (8002d14 <HAL_DMA_Abort+0x214>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04a      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a74      	ldr	r2, [pc, #464]	; (8002d18 <HAL_DMA_Abort+0x218>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d045      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_DMA_Abort+0x21c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d040      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a71      	ldr	r2, [pc, #452]	; (8002d20 <HAL_DMA_Abort+0x220>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a70      	ldr	r2, [pc, #448]	; (8002d24 <HAL_DMA_Abort+0x224>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d036      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_DMA_Abort+0x228>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d031      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6d      	ldr	r2, [pc, #436]	; (8002d2c <HAL_DMA_Abort+0x22c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d02c      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6b      	ldr	r2, [pc, #428]	; (8002d30 <HAL_DMA_Abort+0x230>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d027      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_DMA_Abort+0x234>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_DMA_Abort+0x238>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <HAL_DMA_Abort+0x23c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a65      	ldr	r2, [pc, #404]	; (8002d40 <HAL_DMA_Abort+0x240>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a64      	ldr	r2, [pc, #400]	; (8002d44 <HAL_DMA_Abort+0x244>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_DMA_Abort+0x248>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a61      	ldr	r2, [pc, #388]	; (8002d4c <HAL_DMA_Abort+0x24c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_Abort+0xd6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5f      	ldr	r2, [pc, #380]	; (8002d50 <HAL_DMA_Abort+0x250>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Abort+0xda>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Abort+0xdc>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 021e 	bic.w	r2, r2, #30
 8002bee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e00a      	b.n	8002c1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <HAL_DMA_Abort+0x214>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d072      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <HAL_DMA_Abort+0x218>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d06d      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a39      	ldr	r2, [pc, #228]	; (8002d1c <HAL_DMA_Abort+0x21c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d068      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <HAL_DMA_Abort+0x220>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d063      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_DMA_Abort+0x224>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d05e      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_DMA_Abort+0x228>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d059      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_DMA_Abort+0x22c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d054      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_DMA_Abort+0x230>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04f      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_DMA_Abort+0x234>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04a      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <HAL_DMA_Abort+0x238>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d045      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2d      	ldr	r2, [pc, #180]	; (8002d3c <HAL_DMA_Abort+0x23c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d040      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <HAL_DMA_Abort+0x240>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d03b      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_DMA_Abort+0x244>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d036      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_DMA_Abort+0x248>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_DMA_Abort+0x24c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d02c      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_DMA_Abort+0x250>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d027      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_DMA_Abort+0x254>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_DMA_Abort+0x258>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01d      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_DMA_Abort+0x25c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <HAL_DMA_Abort+0x260>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_DMA_Abort+0x264>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_DMA_Abort+0x268>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_DMA_Abort+0x26c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_DMA_Abort+0x20e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_DMA_Abort+0x270>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d132      	bne.n	8002d74 <HAL_DMA_Abort+0x274>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e031      	b.n	8002d76 <HAL_DMA_Abort+0x276>
 8002d12:	bf00      	nop
 8002d14:	40020010 	.word	0x40020010
 8002d18:	40020028 	.word	0x40020028
 8002d1c:	40020040 	.word	0x40020040
 8002d20:	40020058 	.word	0x40020058
 8002d24:	40020070 	.word	0x40020070
 8002d28:	40020088 	.word	0x40020088
 8002d2c:	400200a0 	.word	0x400200a0
 8002d30:	400200b8 	.word	0x400200b8
 8002d34:	40020410 	.word	0x40020410
 8002d38:	40020428 	.word	0x40020428
 8002d3c:	40020440 	.word	0x40020440
 8002d40:	40020458 	.word	0x40020458
 8002d44:	40020470 	.word	0x40020470
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	400204a0 	.word	0x400204a0
 8002d50:	400204b8 	.word	0x400204b8
 8002d54:	58025408 	.word	0x58025408
 8002d58:	5802541c 	.word	0x5802541c
 8002d5c:	58025430 	.word	0x58025430
 8002d60:	58025444 	.word	0x58025444
 8002d64:	58025458 	.word	0x58025458
 8002d68:	5802546c 	.word	0x5802546c
 8002d6c:	58025480 	.word	0x58025480
 8002d70:	58025494 	.word	0x58025494
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <HAL_DMA_Abort+0x444>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04a      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6b      	ldr	r2, [pc, #428]	; (8002f48 <HAL_DMA_Abort+0x448>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d045      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_DMA_Abort+0x44c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d040      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_DMA_Abort+0x450>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03b      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <HAL_DMA_Abort+0x454>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d036      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	; (8002f58 <HAL_DMA_Abort+0x458>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a64      	ldr	r2, [pc, #400]	; (8002f5c <HAL_DMA_Abort+0x45c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d02c      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a62      	ldr	r2, [pc, #392]	; (8002f60 <HAL_DMA_Abort+0x460>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d027      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <HAL_DMA_Abort+0x464>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_DMA_Abort+0x468>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5e      	ldr	r2, [pc, #376]	; (8002f6c <HAL_DMA_Abort+0x46c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_DMA_Abort+0x470>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5b      	ldr	r2, [pc, #364]	; (8002f74 <HAL_DMA_Abort+0x474>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a59      	ldr	r2, [pc, #356]	; (8002f78 <HAL_DMA_Abort+0x478>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_DMA_Abort+0x47c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_Abort+0x32a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_DMA_Abort+0x480>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <HAL_DMA_Abort+0x33c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_DMA_Abort+0x34c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e4c:	e013      	b.n	8002e76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4e:	f7ff fd0b 	bl	8002868 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d90c      	bls.n	8002e76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12d      	b.n	80030d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_DMA_Abort+0x444>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04a      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_DMA_Abort+0x448>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d045      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <HAL_DMA_Abort+0x44c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d040      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_DMA_Abort+0x450>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d03b      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_DMA_Abort+0x454>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d036      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_DMA_Abort+0x458>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_DMA_Abort+0x45c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d02c      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_DMA_Abort+0x460>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d027      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_DMA_Abort+0x464>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_DMA_Abort+0x468>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01d      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_DMA_Abort+0x46c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d018      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_DMA_Abort+0x470>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_DMA_Abort+0x474>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00e      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_DMA_Abort+0x478>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_DMA_Abort+0x47c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_DMA_Abort+0x422>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_DMA_Abort+0x480>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_Abort+0x426>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_Abort+0x428>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02b      	beq.n	8002f84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	223f      	movs	r2, #63	; 0x3f
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	e02a      	b.n	8002f9a <HAL_DMA_Abort+0x49a>
 8002f44:	40020010 	.word	0x40020010
 8002f48:	40020028 	.word	0x40020028
 8002f4c:	40020040 	.word	0x40020040
 8002f50:	40020058 	.word	0x40020058
 8002f54:	40020070 	.word	0x40020070
 8002f58:	40020088 	.word	0x40020088
 8002f5c:	400200a0 	.word	0x400200a0
 8002f60:	400200b8 	.word	0x400200b8
 8002f64:	40020410 	.word	0x40020410
 8002f68:	40020428 	.word	0x40020428
 8002f6c:	40020440 	.word	0x40020440
 8002f70:	40020458 	.word	0x40020458
 8002f74:	40020470 	.word	0x40020470
 8002f78:	40020488 	.word	0x40020488
 8002f7c:	400204a0 	.word	0x400204a0
 8002f80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4f      	ldr	r2, [pc, #316]	; (80030dc <HAL_DMA_Abort+0x5dc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d072      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_DMA_Abort+0x5e0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d06d      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_DMA_Abort+0x5e4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d068      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_DMA_Abort+0x5e8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d063      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a49      	ldr	r2, [pc, #292]	; (80030ec <HAL_DMA_Abort+0x5ec>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d05e      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <HAL_DMA_Abort+0x5f0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d059      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a46      	ldr	r2, [pc, #280]	; (80030f4 <HAL_DMA_Abort+0x5f4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d054      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a44      	ldr	r2, [pc, #272]	; (80030f8 <HAL_DMA_Abort+0x5f8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d04f      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a43      	ldr	r2, [pc, #268]	; (80030fc <HAL_DMA_Abort+0x5fc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04a      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a41      	ldr	r2, [pc, #260]	; (8003100 <HAL_DMA_Abort+0x600>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <HAL_DMA_Abort+0x604>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d040      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3e      	ldr	r2, [pc, #248]	; (8003108 <HAL_DMA_Abort+0x608>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d03b      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a3d      	ldr	r2, [pc, #244]	; (800310c <HAL_DMA_Abort+0x60c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <HAL_DMA_Abort+0x610>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <HAL_DMA_Abort+0x614>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d02c      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_DMA_Abort+0x618>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d027      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_DMA_Abort+0x61c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a35      	ldr	r2, [pc, #212]	; (8003120 <HAL_DMA_Abort+0x620>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01d      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_DMA_Abort+0x624>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_DMA_Abort+0x628>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_DMA_Abort+0x62c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <HAL_DMA_Abort+0x630>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_DMA_Abort+0x634>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_DMA_Abort+0x58a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <HAL_DMA_Abort+0x638>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_DMA_Abort+0x58e>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_DMA_Abort+0x590>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800309c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40020010 	.word	0x40020010
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40020040 	.word	0x40020040
 80030e8:	40020058 	.word	0x40020058
 80030ec:	40020070 	.word	0x40020070
 80030f0:	40020088 	.word	0x40020088
 80030f4:	400200a0 	.word	0x400200a0
 80030f8:	400200b8 	.word	0x400200b8
 80030fc:	40020410 	.word	0x40020410
 8003100:	40020428 	.word	0x40020428
 8003104:	40020440 	.word	0x40020440
 8003108:	40020458 	.word	0x40020458
 800310c:	40020470 	.word	0x40020470
 8003110:	40020488 	.word	0x40020488
 8003114:	400204a0 	.word	0x400204a0
 8003118:	400204b8 	.word	0x400204b8
 800311c:	58025408 	.word	0x58025408
 8003120:	5802541c 	.word	0x5802541c
 8003124:	58025430 	.word	0x58025430
 8003128:	58025444 	.word	0x58025444
 800312c:	58025458 	.word	0x58025458
 8003130:	5802546c 	.word	0x5802546c
 8003134:	58025480 	.word	0x58025480
 8003138:	58025494 	.word	0x58025494

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e237      	b.n	80035be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e22c      	b.n	80035be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5c      	ldr	r2, [pc, #368]	; (80032dc <HAL_DMA_Abort_IT+0x1a0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_DMA_Abort_IT+0x1a4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <HAL_DMA_Abort_IT+0x1a8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_DMA_Abort_IT+0x1ac>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a56      	ldr	r2, [pc, #344]	; (80032ec <HAL_DMA_Abort_IT+0x1b0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <HAL_DMA_Abort_IT+0x1b4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <HAL_DMA_Abort_IT+0x1b8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_DMA_Abort_IT+0x1bc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a50      	ldr	r2, [pc, #320]	; (80032fc <HAL_DMA_Abort_IT+0x1c0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a4f      	ldr	r2, [pc, #316]	; (8003300 <HAL_DMA_Abort_IT+0x1c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4d      	ldr	r2, [pc, #308]	; (8003304 <HAL_DMA_Abort_IT+0x1c8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4c      	ldr	r2, [pc, #304]	; (8003308 <HAL_DMA_Abort_IT+0x1cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	; (800330c <HAL_DMA_Abort_IT+0x1d0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a49      	ldr	r2, [pc, #292]	; (8003310 <HAL_DMA_Abort_IT+0x1d4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a47      	ldr	r2, [pc, #284]	; (8003314 <HAL_DMA_Abort_IT+0x1d8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a46      	ldr	r2, [pc, #280]	; (8003318 <HAL_DMA_Abort_IT+0x1dc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_DMA_Abort_IT+0xcc>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_DMA_Abort_IT+0xce>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8086 	beq.w	800331c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2204      	movs	r2, #4
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <HAL_DMA_Abort_IT+0x1a0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04a      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <HAL_DMA_Abort_IT+0x1a4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <HAL_DMA_Abort_IT+0x1a8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2b      	ldr	r2, [pc, #172]	; (80032e8 <HAL_DMA_Abort_IT+0x1ac>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d03b      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <HAL_DMA_Abort_IT+0x1b0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d036      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a28      	ldr	r2, [pc, #160]	; (80032f0 <HAL_DMA_Abort_IT+0x1b4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_DMA_Abort_IT+0x1b8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02c      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <HAL_DMA_Abort_IT+0x1bc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d027      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_DMA_Abort_IT+0x1c0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_DMA_Abort_IT+0x1c4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d01d      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <HAL_DMA_Abort_IT+0x1c8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_DMA_Abort_IT+0x1cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <HAL_DMA_Abort_IT+0x1d0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <HAL_DMA_Abort_IT+0x1d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_DMA_Abort_IT+0x1d8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x17c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_DMA_Abort_IT+0x1dc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <HAL_DMA_Abort_IT+0x18e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e178      	b.n	80035bc <HAL_DMA_Abort_IT+0x480>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e16f      	b.n	80035bc <HAL_DMA_Abort_IT+0x480>
 80032dc:	40020010 	.word	0x40020010
 80032e0:	40020028 	.word	0x40020028
 80032e4:	40020040 	.word	0x40020040
 80032e8:	40020058 	.word	0x40020058
 80032ec:	40020070 	.word	0x40020070
 80032f0:	40020088 	.word	0x40020088
 80032f4:	400200a0 	.word	0x400200a0
 80032f8:	400200b8 	.word	0x400200b8
 80032fc:	40020410 	.word	0x40020410
 8003300:	40020428 	.word	0x40020428
 8003304:	40020440 	.word	0x40020440
 8003308:	40020458 	.word	0x40020458
 800330c:	40020470 	.word	0x40020470
 8003310:	40020488 	.word	0x40020488
 8003314:	400204a0 	.word	0x400204a0
 8003318:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 020e 	bic.w	r2, r2, #14
 800332a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6c      	ldr	r2, [pc, #432]	; (80034e4 <HAL_DMA_Abort_IT+0x3a8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d04a      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6b      	ldr	r2, [pc, #428]	; (80034e8 <HAL_DMA_Abort_IT+0x3ac>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d045      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a69      	ldr	r2, [pc, #420]	; (80034ec <HAL_DMA_Abort_IT+0x3b0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d040      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a68      	ldr	r2, [pc, #416]	; (80034f0 <HAL_DMA_Abort_IT+0x3b4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d03b      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a66      	ldr	r2, [pc, #408]	; (80034f4 <HAL_DMA_Abort_IT+0x3b8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d036      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_DMA_Abort_IT+0x3bc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d031      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_DMA_Abort_IT+0x3c0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02c      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a62      	ldr	r2, [pc, #392]	; (8003500 <HAL_DMA_Abort_IT+0x3c4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d027      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_DMA_Abort_IT+0x3c8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5f      	ldr	r2, [pc, #380]	; (8003508 <HAL_DMA_Abort_IT+0x3cc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d01d      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_DMA_Abort_IT+0x3d0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5c      	ldr	r2, [pc, #368]	; (8003510 <HAL_DMA_Abort_IT+0x3d4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <HAL_DMA_Abort_IT+0x3d8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a59      	ldr	r2, [pc, #356]	; (8003518 <HAL_DMA_Abort_IT+0x3dc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a57      	ldr	r2, [pc, #348]	; (800351c <HAL_DMA_Abort_IT+0x3e0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_Abort_IT+0x290>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a56      	ldr	r2, [pc, #344]	; (8003520 <HAL_DMA_Abort_IT+0x3e4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <HAL_DMA_Abort_IT+0x2a2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_DMA_Abort_IT+0x2b2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <HAL_DMA_Abort_IT+0x3a8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d072      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3a      	ldr	r2, [pc, #232]	; (80034e8 <HAL_DMA_Abort_IT+0x3ac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d06d      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a39      	ldr	r2, [pc, #228]	; (80034ec <HAL_DMA_Abort_IT+0x3b0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d068      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <HAL_DMA_Abort_IT+0x3b4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d063      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a36      	ldr	r2, [pc, #216]	; (80034f4 <HAL_DMA_Abort_IT+0x3b8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d05e      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_DMA_Abort_IT+0x3bc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d059      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a33      	ldr	r2, [pc, #204]	; (80034fc <HAL_DMA_Abort_IT+0x3c0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d054      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a31      	ldr	r2, [pc, #196]	; (8003500 <HAL_DMA_Abort_IT+0x3c4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04f      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <HAL_DMA_Abort_IT+0x3c8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <HAL_DMA_Abort_IT+0x3cc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <HAL_DMA_Abort_IT+0x3d0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <HAL_DMA_Abort_IT+0x3d4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_DMA_Abort_IT+0x3d8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_DMA_Abort_IT+0x3dc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a27      	ldr	r2, [pc, #156]	; (800351c <HAL_DMA_Abort_IT+0x3e0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a25      	ldr	r2, [pc, #148]	; (8003520 <HAL_DMA_Abort_IT+0x3e4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_DMA_Abort_IT+0x3e8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_DMA_Abort_IT+0x3ec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_DMA_Abort_IT+0x3f0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_DMA_Abort_IT+0x3f4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_DMA_Abort_IT+0x3f8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_DMA_Abort_IT+0x3fc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_DMA_Abort_IT+0x400>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Abort_IT+0x3a2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_DMA_Abort_IT+0x404>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d132      	bne.n	8003544 <HAL_DMA_Abort_IT+0x408>
 80034de:	2301      	movs	r3, #1
 80034e0:	e031      	b.n	8003546 <HAL_DMA_Abort_IT+0x40a>
 80034e2:	bf00      	nop
 80034e4:	40020010 	.word	0x40020010
 80034e8:	40020028 	.word	0x40020028
 80034ec:	40020040 	.word	0x40020040
 80034f0:	40020058 	.word	0x40020058
 80034f4:	40020070 	.word	0x40020070
 80034f8:	40020088 	.word	0x40020088
 80034fc:	400200a0 	.word	0x400200a0
 8003500:	400200b8 	.word	0x400200b8
 8003504:	40020410 	.word	0x40020410
 8003508:	40020428 	.word	0x40020428
 800350c:	40020440 	.word	0x40020440
 8003510:	40020458 	.word	0x40020458
 8003514:	40020470 	.word	0x40020470
 8003518:	40020488 	.word	0x40020488
 800351c:	400204a0 	.word	0x400204a0
 8003520:	400204b8 	.word	0x400204b8
 8003524:	58025408 	.word	0x58025408
 8003528:	5802541c 	.word	0x5802541c
 800352c:	58025430 	.word	0x58025430
 8003530:	58025444 	.word	0x58025444
 8003534:	58025458 	.word	0x58025458
 8003538:	5802546c 	.word	0x5802546c
 800353c:	58025480 	.word	0x58025480
 8003540:	58025494 	.word	0x58025494
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d028      	beq.n	800359c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003558:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2201      	movs	r2, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003578:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003590:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800359a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop

080035c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d6:	b2db      	uxtb	r3, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <HAL_GPIO_Init+0x234>)
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035f6:	e194      	b.n	8003922 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8186 	beq.w	800391c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_GPIO_Init+0x44>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d130      	bne.n	800368a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365e:	2201      	movs	r2, #1
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0201 	and.w	r2, r3, #1
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b03      	cmp	r3, #3
 8003694:	d017      	beq.n	80036c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d123      	bne.n	800371a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80e0 	beq.w	800391c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375c:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_GPIO_Init+0x238>)
 800375e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003762:	4a2e      	ldr	r2, [pc, #184]	; (800381c <HAL_GPIO_Init+0x238>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_GPIO_Init+0x238>)
 800376e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800377a:	4a29      	ldr	r2, [pc, #164]	; (8003820 <HAL_GPIO_Init+0x23c>)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_GPIO_Init+0x240>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d052      	beq.n	800384c <HAL_GPIO_Init+0x268>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_GPIO_Init+0x244>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_GPIO_Init+0x22e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_GPIO_Init+0x248>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02b      	beq.n	800380e <HAL_GPIO_Init+0x22a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_GPIO_Init+0x24c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d025      	beq.n	800380a <HAL_GPIO_Init+0x226>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_GPIO_Init+0x250>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01f      	beq.n	8003806 <HAL_GPIO_Init+0x222>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x254>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d019      	beq.n	8003802 <HAL_GPIO_Init+0x21e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_GPIO_Init+0x258>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_GPIO_Init+0x21a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_GPIO_Init+0x25c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00d      	beq.n	80037fa <HAL_GPIO_Init+0x216>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_GPIO_Init+0x260>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x212>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_GPIO_Init+0x264>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_GPIO_Init+0x20e>
 80037ee:	2309      	movs	r3, #9
 80037f0:	e02d      	b.n	800384e <HAL_GPIO_Init+0x26a>
 80037f2:	230a      	movs	r3, #10
 80037f4:	e02b      	b.n	800384e <HAL_GPIO_Init+0x26a>
 80037f6:	2308      	movs	r3, #8
 80037f8:	e029      	b.n	800384e <HAL_GPIO_Init+0x26a>
 80037fa:	2307      	movs	r3, #7
 80037fc:	e027      	b.n	800384e <HAL_GPIO_Init+0x26a>
 80037fe:	2306      	movs	r3, #6
 8003800:	e025      	b.n	800384e <HAL_GPIO_Init+0x26a>
 8003802:	2305      	movs	r3, #5
 8003804:	e023      	b.n	800384e <HAL_GPIO_Init+0x26a>
 8003806:	2304      	movs	r3, #4
 8003808:	e021      	b.n	800384e <HAL_GPIO_Init+0x26a>
 800380a:	2303      	movs	r3, #3
 800380c:	e01f      	b.n	800384e <HAL_GPIO_Init+0x26a>
 800380e:	2302      	movs	r3, #2
 8003810:	e01d      	b.n	800384e <HAL_GPIO_Init+0x26a>
 8003812:	2301      	movs	r3, #1
 8003814:	e01b      	b.n	800384e <HAL_GPIO_Init+0x26a>
 8003816:	bf00      	nop
 8003818:	58000080 	.word	0x58000080
 800381c:	58024400 	.word	0x58024400
 8003820:	58000400 	.word	0x58000400
 8003824:	58020000 	.word	0x58020000
 8003828:	58020400 	.word	0x58020400
 800382c:	58020800 	.word	0x58020800
 8003830:	58020c00 	.word	0x58020c00
 8003834:	58021000 	.word	0x58021000
 8003838:	58021400 	.word	0x58021400
 800383c:	58021800 	.word	0x58021800
 8003840:	58021c00 	.word	0x58021c00
 8003844:	58022000 	.word	0x58022000
 8003848:	58022400 	.word	0x58022400
 800384c:	2300      	movs	r3, #0
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f002 0203 	and.w	r2, r2, #3
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	4093      	lsls	r3, r2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385e:	4938      	ldr	r1, [pc, #224]	; (8003940 <HAL_GPIO_Init+0x35c>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f ae63 	bne.w	80035f8 <HAL_GPIO_Init+0x14>
  }
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	3724      	adds	r7, #36	; 0x24
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	58000400 	.word	0x58000400

08003944 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43d9      	mvns	r1, r3
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	400b      	ands	r3, r1
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_HSEM_FastTake+0x2c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3320      	adds	r3, #32
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <HAL_HSEM_FastTake+0x30>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	58026400 	.word	0x58026400
 80039a8:	80000300 	.word	0x80000300

080039ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039b6:	4906      	ldr	r1, [pc, #24]	; (80039d0 <HAL_HSEM_Release+0x24>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	58026400 	.word	0x58026400

080039d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe fb12 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	e006      	b.n	8003a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d104      	bne.n	8003a6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_I2C_Init+0x11c>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	02008000 	.word	0x02008000

08003af4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
  }
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	09db      	lsrs	r3, r3, #7
 8003b50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	0a9b      	lsrs	r3, r3, #10
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d010      	beq.n	8003b9c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	09db      	lsrs	r3, r3, #7
 8003b7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f043 0208 	orr.w	r2, r3, #8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	09db      	lsrs	r3, r3, #7
 8003bac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f043 0202 	orr.w	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 030b 	and.w	r3, r3, #11
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fc77 	bl	80044d0 <I2C_ITError>
  }
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	70fb      	strb	r3, [r7, #3]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <I2C_Slave_ISR_IT+0x24>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0ec      	b.n	8003e68 <I2C_Slave_ISR_IT+0x1fe>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003cae:	6939      	ldr	r1, [r7, #16]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f9bf 	bl	8004034 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04d      	beq.n	8003d5e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d047      	beq.n	8003d5e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d128      	bne.n	8003d2a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b28      	cmp	r3, #40	; 0x28
 8003ce2:	d108      	bne.n	8003cf6 <I2C_Slave_ISR_IT+0x8c>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cea:	d104      	bne.n	8003cf6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fb98 	bl	8004424 <I2C_ITListenCplt>
 8003cf4:	e032      	b.n	8003d5c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b29      	cmp	r3, #41	; 0x29
 8003d00:	d10e      	bne.n	8003d20 <I2C_Slave_ISR_IT+0xb6>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d08:	d00a      	beq.n	8003d20 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2210      	movs	r2, #16
 8003d10:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fcd3 	bl	80046be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f92d 	bl	8003f78 <I2C_ITSlaveSeqCplt>
 8003d1e:	e01d      	b.n	8003d5c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003d28:	e096      	b.n	8003e58 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <I2C_Slave_ISR_IT+0xe4>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4a:	f040 8085 	bne.w	8003e58 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4619      	mov	r1, r3
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fbbb 	bl	80044d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d5a:	e07d      	b.n	8003e58 <I2C_Slave_ISR_IT+0x1ee>
 8003d5c:	e07c      	b.n	8003e58 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d030      	beq.n	8003dcc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02a      	beq.n	8003dcc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d14f      	bne.n	8003e5c <I2C_Slave_ISR_IT+0x1f2>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dc2:	d04b      	beq.n	8003e5c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f8d7 	bl	8003f78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003dca:	e047      	b.n	8003e5c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003de4:	6939      	ldr	r1, [r7, #16]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f842 	bl	8003e70 <I2C_ITAddrCplt>
 8003dec:	e037      	b.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d031      	beq.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02b      	beq.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e40:	e00d      	b.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e48:	d002      	beq.n	8003e50 <I2C_Slave_ISR_IT+0x1e6>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f891 	bl	8003f78 <I2C_ITSlaveSeqCplt>
 8003e56:	e002      	b.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003e5c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e86:	2b28      	cmp	r3, #40	; 0x28
 8003e88:	d16a      	bne.n	8003f60 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ea8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ec4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d138      	bne.n	8003f40 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	09db      	lsrs	r3, r3, #7
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	89bb      	ldrh	r3, [r7, #12]
 8003ed6:	4053      	eors	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11c      	bne.n	8003f1c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d13b      	bne.n	8003f70 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f0e:	89ba      	ldrh	r2, [r7, #12]
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fe7c 	bl	8003c12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f1a:	e029      	b.n	8003f70 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fc0c 	bl	8004742 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f32:	89ba      	ldrh	r2, [r7, #12]
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fe6a 	bl	8003c12 <HAL_I2C_AddrCallback>
}
 8003f3e:	e017      	b.n	8003f70 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fbfc 	bl	8004742 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f52:	89ba      	ldrh	r2, [r7, #12]
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fe5a 	bl	8003c12 <HAL_I2C_AddrCallback>
}
 8003f5e:	e007      	b.n	8003f70 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	0b9b      	lsrs	r3, r3, #14
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e00d      	b.n	8003fca <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0bdb      	lsrs	r3, r3, #15
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b29      	cmp	r3, #41	; 0x29
 8003fd4:	d112      	bne.n	8003ffc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2228      	movs	r2, #40	; 0x28
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2221      	movs	r2, #33	; 0x21
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fbab 	bl	8004742 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fdf8 	bl	8003bea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ffa:	e017      	b.n	800402c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b2a      	cmp	r3, #42	; 0x2a
 8004006:	d111      	bne.n	800402c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2228      	movs	r2, #40	; 0x28
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2222      	movs	r2, #34	; 0x22
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004016:	2102      	movs	r1, #2
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb92 	bl	8004742 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fde9 	bl	8003bfe <HAL_I2C_SlaveRxCpltCallback>
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004050:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2220      	movs	r2, #32
 8004058:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b21      	cmp	r3, #33	; 0x21
 800405e:	d002      	beq.n	8004066 <I2C_ITSlaveCplt+0x32>
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b29      	cmp	r3, #41	; 0x29
 8004064:	d108      	bne.n	8004078 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004066:	f248 0101 	movw	r1, #32769	; 0x8001
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fb69 	bl	8004742 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2221      	movs	r2, #33	; 0x21
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
 8004076:	e00d      	b.n	8004094 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	d002      	beq.n	8004084 <I2C_ITSlaveCplt+0x50>
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b2a      	cmp	r3, #42	; 0x2a
 8004082:	d107      	bne.n	8004094 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004084:	f248 0102 	movw	r1, #32770	; 0x8002
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb5a 	bl	8004742 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2222      	movs	r2, #34	; 0x22
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <I2C_ITSlaveCplt+0x27c>)
 80040b0:	400b      	ands	r3, r1
 80040b2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb02 	bl	80046be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	0b9b      	lsrs	r3, r3, #14
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d07a      	beq.n	80041bc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8111 	beq.w	8004302 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <I2C_ITSlaveCplt+0x280>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d059      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <I2C_ITSlaveCplt+0x284>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d053      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6f      	ldr	r2, [pc, #444]	; (80042bc <I2C_ITSlaveCplt+0x288>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04d      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6d      	ldr	r2, [pc, #436]	; (80042c0 <I2C_ITSlaveCplt+0x28c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d047      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6b      	ldr	r2, [pc, #428]	; (80042c4 <I2C_ITSlaveCplt+0x290>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d041      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a69      	ldr	r2, [pc, #420]	; (80042c8 <I2C_ITSlaveCplt+0x294>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03b      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a67      	ldr	r2, [pc, #412]	; (80042cc <I2C_ITSlaveCplt+0x298>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d035      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <I2C_ITSlaveCplt+0x29c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d02f      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a63      	ldr	r2, [pc, #396]	; (80042d4 <I2C_ITSlaveCplt+0x2a0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d029      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a61      	ldr	r2, [pc, #388]	; (80042d8 <I2C_ITSlaveCplt+0x2a4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d023      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5f      	ldr	r2, [pc, #380]	; (80042dc <I2C_ITSlaveCplt+0x2a8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5d      	ldr	r2, [pc, #372]	; (80042e0 <I2C_ITSlaveCplt+0x2ac>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d017      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5b      	ldr	r2, [pc, #364]	; (80042e4 <I2C_ITSlaveCplt+0x2b0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d011      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a59      	ldr	r2, [pc, #356]	; (80042e8 <I2C_ITSlaveCplt+0x2b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a57      	ldr	r2, [pc, #348]	; (80042ec <I2C_ITSlaveCplt+0x2b8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d005      	beq.n	80041a0 <I2C_ITSlaveCplt+0x16c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a55      	ldr	r2, [pc, #340]	; (80042f0 <I2C_ITSlaveCplt+0x2bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d105      	bne.n	80041ac <I2C_ITSlaveCplt+0x178>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	e004      	b.n	80041b6 <I2C_ITSlaveCplt+0x182>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	8553      	strh	r3, [r2, #42]	; 0x2a
 80041ba:	e0a2      	b.n	8004302 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	0bdb      	lsrs	r3, r3, #15
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 809c 	beq.w	8004302 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 808f 	beq.w	8004302 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <I2C_ITSlaveCplt+0x280>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d059      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <I2C_ITSlaveCplt+0x284>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d053      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2e      	ldr	r2, [pc, #184]	; (80042bc <I2C_ITSlaveCplt+0x288>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04d      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <I2C_ITSlaveCplt+0x28c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d047      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <I2C_ITSlaveCplt+0x290>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d041      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <I2C_ITSlaveCplt+0x294>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d03b      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a26      	ldr	r2, [pc, #152]	; (80042cc <I2C_ITSlaveCplt+0x298>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d035      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <I2C_ITSlaveCplt+0x29c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02f      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <I2C_ITSlaveCplt+0x2a0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d029      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <I2C_ITSlaveCplt+0x2a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d023      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <I2C_ITSlaveCplt+0x2a8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <I2C_ITSlaveCplt+0x2ac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d017      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <I2C_ITSlaveCplt+0x2b0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d011      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <I2C_ITSlaveCplt+0x2b4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <I2C_ITSlaveCplt+0x2b8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d005      	beq.n	80042a4 <I2C_ITSlaveCplt+0x270>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <I2C_ITSlaveCplt+0x2bc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d127      	bne.n	80042f4 <I2C_ITSlaveCplt+0x2c0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	e026      	b.n	80042fe <I2C_ITSlaveCplt+0x2ca>
 80042b0:	fe00e800 	.word	0xfe00e800
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d020      	beq.n	8004350 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00c      	beq.n	8004350 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8a4 	bl	80044d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b28      	cmp	r3, #40	; 0x28
 8004392:	d141      	bne.n	8004418 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f844 	bl	8004424 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800439c:	e03c      	b.n	8004418 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a6:	d014      	beq.n	80043d2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fde5 	bl	8003f78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <I2C_ITSlaveCplt+0x3ec>)
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fc2f 	bl	8003c2e <HAL_I2C_ListenCpltCallback>
}
 80043d0:	e022      	b.n	8004418 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	d10e      	bne.n	80043fc <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fc02 	bl	8003bfe <HAL_I2C_SlaveRxCpltCallback>
}
 80043fa:	e00d      	b.n	8004418 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fbe9 	bl	8003bea <HAL_I2C_SlaveTxCpltCallback>
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ffff0000 	.word	0xffff0000

08004424 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <I2C_ITListenCplt+0xa8>)
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d012      	beq.n	80044a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f94b 	bl	8004742 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fbb6 	bl	8003c2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <I2C_ITError+0x194>)
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b28      	cmp	r3, #40	; 0x28
 8004506:	d005      	beq.n	8004514 <I2C_ITError+0x44>
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b29      	cmp	r3, #41	; 0x29
 800450c:	d002      	beq.n	8004514 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b2a      	cmp	r3, #42	; 0x2a
 8004512:	d10b      	bne.n	800452c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004514:	2103      	movs	r1, #3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f913 	bl	8004742 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2228      	movs	r2, #40	; 0x28
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a50      	ldr	r2, [pc, #320]	; (8004668 <I2C_ITError+0x198>)
 8004528:	635a      	str	r2, [r3, #52]	; 0x34
 800452a:	e011      	b.n	8004550 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800452c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f906 	bl	8004742 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b60      	cmp	r3, #96	; 0x60
 8004540:	d003      	beq.n	800454a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d039      	beq.n	80045d2 <I2C_ITError+0x102>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b11      	cmp	r3, #17
 8004562:	d002      	beq.n	800456a <I2C_ITError+0x9a>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b21      	cmp	r3, #33	; 0x21
 8004568:	d133      	bne.n	80045d2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004578:	d107      	bne.n	800458a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004588:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f81a 	bl	80035c8 <HAL_DMA_GetState>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d017      	beq.n	80045ca <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	4a33      	ldr	r2, [pc, #204]	; (800466c <I2C_ITError+0x19c>)
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fdc4 	bl	800313c <HAL_DMA_Abort_IT>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04d      	beq.n	8004656 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045c8:	e045      	b.n	8004656 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f850 	bl	8004670 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045d0:	e041      	b.n	8004656 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d039      	beq.n	800464e <I2C_ITError+0x17e>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d002      	beq.n	80045e6 <I2C_ITError+0x116>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d133      	bne.n	800464e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f4:	d107      	bne.n	8004606 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004604:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe ffdc 	bl	80035c8 <HAL_DMA_GetState>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d017      	beq.n	8004646 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <I2C_ITError+0x19c>)
 800461c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fd86 	bl	800313c <HAL_DMA_Abort_IT>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004640:	4610      	mov	r0, r2
 8004642:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004644:	e009      	b.n	800465a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f812 	bl	8004670 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800464c:	e005      	b.n	800465a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f80e 	bl	8004670 <I2C_TreatErrorCallback>
  }
}
 8004654:	e002      	b.n	800465c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800465a:	bf00      	nop
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	ffff0000 	.word	0xffff0000
 8004668:	08003c6b 	.word	0x08003c6b
 800466c:	08004707 	.word	0x08004707

08004670 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d10e      	bne.n	80046a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fadb 	bl	8003c56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046a0:	e009      	b.n	80046b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fac6 	bl	8003c42 <HAL_I2C_ErrorCallback>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d103      	bne.n	80046dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d007      	beq.n	80046fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	619a      	str	r2, [r3, #24]
  }
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	2200      	movs	r2, #0
 8004722:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	2200      	movs	r2, #0
 8004732:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff9b 	bl	8004670 <I2C_TreatErrorCallback>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004762:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004770:	2b28      	cmp	r3, #40	; 0x28
 8004772:	d003      	beq.n	800477c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800477a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00f      	beq.n	80047a6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800478c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800479a:	2b28      	cmp	r3, #40	; 0x28
 800479c:	d003      	beq.n	80047a6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da03      	bge.n	80047b6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047b6:	887b      	ldrh	r3, [r7, #2]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d103      	bne.n	80047c4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d103      	bne.n	80047d2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f043 0320 	orr.w	r3, r3, #32
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047d2:	887b      	ldrh	r3, [r7, #2]
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d103      	bne.n	80047e0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	43da      	mvns	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	400a      	ands	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b20      	cmp	r3, #32
 8004812:	d138      	bne.n	8004886 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800481e:	2302      	movs	r3, #2
 8004820:	e032      	b.n	8004888 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2224      	movs	r2, #36	; 0x24
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004850:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6819      	ldr	r1, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d139      	bne.n	800491e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e033      	b.n	8004920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	; 0x24
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004934:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	2b06      	cmp	r3, #6
 800493e:	d00a      	beq.n	8004956 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004940:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e040      	b.n	80049d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e03e      	b.n	80049d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800495e:	491f      	ldr	r1, [pc, #124]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4313      	orrs	r3, r2
 8004964:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004966:	f7fd ff7f 	bl	8002868 <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800496e:	f7fd ff7b 	bl	8002868 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800497c:	d901      	bls.n	8004982 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e028      	b.n	80049d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004982:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498e:	d1ee      	bne.n	800496e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b1e      	cmp	r3, #30
 8004994:	d008      	beq.n	80049a8 <HAL_PWREx_ConfigSupply+0x7c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b2e      	cmp	r3, #46	; 0x2e
 800499a:	d005      	beq.n	80049a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b1d      	cmp	r3, #29
 80049a0:	d002      	beq.n	80049a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b2d      	cmp	r3, #45	; 0x2d
 80049a6:	d114      	bne.n	80049d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80049a8:	f7fd ff5e 	bl	8002868 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049ae:	e009      	b.n	80049c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049b0:	f7fd ff5a 	bl	8002868 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	d901      	bls.n	80049c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e007      	b.n	80049d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_PWREx_ConfigSupply+0xb0>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d1ee      	bne.n	80049b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024800 	.word	0x58024800

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	; 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f000 bc1d 	b.w	800522e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8087 	beq.w	8004b10 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	4b99      	ldr	r3, [pc, #612]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a0c:	4b96      	ldr	r3, [pc, #600]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d007      	beq.n	8004a28 <HAL_RCC_OscConfig+0x48>
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	d110      	bne.n	8004a40 <HAL_RCC_OscConfig+0x60>
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4b8f      	ldr	r3, [pc, #572]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d06c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x12e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d168      	bne.n	8004b0e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e3f6      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x78>
 8004a4a:	4b87      	ldr	r3, [pc, #540]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a86      	ldr	r2, [pc, #536]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e02e      	b.n	8004ab6 <HAL_RCC_OscConfig+0xd6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x9a>
 8004a60:	4b81      	ldr	r3, [pc, #516]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a80      	ldr	r2, [pc, #512]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a7d      	ldr	r2, [pc, #500]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e01d      	b.n	8004ab6 <HAL_RCC_OscConfig+0xd6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCC_OscConfig+0xbe>
 8004a84:	4b78      	ldr	r3, [pc, #480]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a77      	ldr	r2, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b75      	ldr	r3, [pc, #468]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a74      	ldr	r2, [pc, #464]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCC_OscConfig+0xd6>
 8004a9e:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a71      	ldr	r2, [pc, #452]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6e      	ldr	r2, [pc, #440]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fd fed3 	bl	8002868 <HAL_GetTick>
 8004ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac6:	f7fd fecf 	bl	8002868 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b64      	cmp	r3, #100	; 0x64
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e3aa      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad8:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0xe6>
 8004ae4:	e014      	b.n	8004b10 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fd febf 	bl	8002868 <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aee:	f7fd febb 	bl	8002868 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b64      	cmp	r3, #100	; 0x64
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e396      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b00:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x10e>
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80cb 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1e:	4b52      	ldr	r3, [pc, #328]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b28:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_RCC_OscConfig+0x164>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b18      	cmp	r3, #24
 8004b38:	d156      	bne.n	8004be8 <HAL_RCC_OscConfig+0x208>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d151      	bne.n	8004be8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b44:	4b48      	ldr	r3, [pc, #288]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x17c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e368      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5c:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 0219 	bic.w	r2, r3, #25
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	493f      	ldr	r1, [pc, #252]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b6e:	f7fd fe7b 	bl	8002868 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fd fe77 	bl	8002868 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e352      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b88:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	f7fd fe98 	bl	80028c8 <HAL_GetREVID>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d817      	bhi.n	8004bd2 <HAL_RCC_OscConfig+0x1f2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d108      	bne.n	8004bbc <HAL_RCC_OscConfig+0x1dc>
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004bb2:	4a2d      	ldr	r2, [pc, #180]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bba:	e07b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	031b      	lsls	r3, r3, #12
 8004bca:	4927      	ldr	r1, [pc, #156]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd0:	e070      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	4921      	ldr	r1, [pc, #132]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be6:	e065      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d048      	beq.n	8004c82 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 0219 	bic.w	r2, r3, #25
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	491a      	ldr	r1, [pc, #104]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fd fe31 	bl	8002868 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fd fe2d 	bl	8002868 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e308      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	f7fd fe4e 	bl	80028c8 <HAL_GetREVID>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d81a      	bhi.n	8004c6c <HAL_RCC_OscConfig+0x28c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCC_OscConfig+0x270>
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	6053      	str	r3, [r2, #4]
 8004c4e:	e031      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	4902      	ldr	r1, [pc, #8]	; (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
 8004c64:	e026      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	4997      	ldr	r1, [pc, #604]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e018      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b95      	ldr	r3, [pc, #596]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a94      	ldr	r2, [pc, #592]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fd fdeb 	bl	8002868 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fd fde7 	bl	8002868 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e2c2      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a9 	beq.w	8004e14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc2:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ccc:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d007      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x308>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	d13a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x374>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d135      	bne.n	8004d54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce8:	4b7b      	ldr	r3, [pc, #492]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_OscConfig+0x320>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e296      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d00:	f7fd fde2 	bl	80028c8 <HAL_GetREVID>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d817      	bhi.n	8004d3e <HAL_RCC_OscConfig+0x35e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d108      	bne.n	8004d28 <HAL_RCC_OscConfig+0x348>
 8004d16:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d1e:	4a6e      	ldr	r2, [pc, #440]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d26:	e075      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d28:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	069b      	lsls	r3, r3, #26
 8004d36:	4968      	ldr	r1, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d3c:	e06a      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d3e:	4b66      	ldr	r3, [pc, #408]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	4962      	ldr	r1, [pc, #392]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d52:	e05f      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d042      	beq.n	8004de2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd fd7e 	bl	8002868 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d70:	f7fd fd7a 	bl	8002868 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e255      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d82:	4b55      	ldr	r3, [pc, #340]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8e:	f7fd fd9b 	bl	80028c8 <HAL_GetREVID>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d817      	bhi.n	8004dcc <HAL_RCC_OscConfig+0x3ec>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d108      	bne.n	8004db6 <HAL_RCC_OscConfig+0x3d6>
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dac:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db2:	6053      	str	r3, [r2, #4]
 8004db4:	e02e      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
 8004db6:	4b48      	ldr	r3, [pc, #288]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	069b      	lsls	r3, r3, #26
 8004dc4:	4944      	ldr	r1, [pc, #272]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	604b      	str	r3, [r1, #4]
 8004dca:	e023      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
 8004dcc:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	493f      	ldr	r1, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60cb      	str	r3, [r1, #12]
 8004de0:	e018      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fd fd3b 	bl	8002868 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004df6:	f7fd fd37 	bl	8002868 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e212      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d036      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e28:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd fd18 	bl	8002868 <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fd14 	bl	8002868 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1ef      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x45c>
 8004e5a:	e018      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd fcfe 	bl	8002868 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fd fcfa 	bl	8002868 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1d5      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d039      	beq.n	8004f0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01c      	beq.n	8004edc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fcdb 	bl	8002868 <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004eb6:	f7fd fcd7 	bl	8002868 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1b2      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
 8004ed4:	e01b      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004edc:	4b9b      	ldr	r3, [pc, #620]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a9a      	ldr	r2, [pc, #616]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ee8:	f7fd fcbe 	bl	8002868 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ef0:	f7fd fcba 	bl	8002868 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e195      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f02:	4b92      	ldr	r3, [pc, #584]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8081 	beq.w	800501e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f1c:	4b8c      	ldr	r3, [pc, #560]	; (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a8b      	ldr	r2, [pc, #556]	; (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f28:	f7fd fc9e 	bl	8002868 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f30:	f7fd fc9a 	bl	8002868 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e175      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f42:	4b83      	ldr	r3, [pc, #524]	; (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x584>
 8004f56:	4b7d      	ldr	r3, [pc, #500]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a7c      	ldr	r2, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	e02d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x5a6>
 8004f6c:	4b77      	ldr	r3, [pc, #476]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a76      	ldr	r2, [pc, #472]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	4b74      	ldr	r3, [pc, #464]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	4a73      	ldr	r2, [pc, #460]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6713      	str	r3, [r2, #112]	; 0x70
 8004f84:	e01c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c8>
 8004f8e:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a6b      	ldr	r2, [pc, #428]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004fa8:	4b68      	ldr	r3, [pc, #416]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a67      	ldr	r2, [pc, #412]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	4b65      	ldr	r3, [pc, #404]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	4a64      	ldr	r2, [pc, #400]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fd fc4e 	bl	8002868 <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fd fc4a 	bl	8002868 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e123      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe6:	4b59      	ldr	r3, [pc, #356]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x5f0>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fc38 	bl	8002868 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7fd fc34 	bl	8002868 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e10d      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005012:	4b4e      	ldr	r3, [pc, #312]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ee      	bne.n	8004ffc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8102 	beq.w	800522c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005028:	4b48      	ldr	r3, [pc, #288]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005030:	2b18      	cmp	r3, #24
 8005032:	f000 80bd 	beq.w	80051b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b02      	cmp	r3, #2
 800503c:	f040 809e 	bne.w	800517c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b42      	ldr	r3, [pc, #264]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a41      	ldr	r2, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd fc0c 	bl	8002868 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005054:	f7fd fc08 	bl	8002868 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0e3      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_RCC_OscConfig+0x774>)
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005082:	0112      	lsls	r2, r2, #4
 8005084:	430a      	orrs	r2, r1
 8005086:	4931      	ldr	r1, [pc, #196]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	628b      	str	r3, [r1, #40]	; 0x28
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	3b01      	subs	r3, #1
 8005092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	3b01      	subs	r3, #1
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	b29b      	uxth	r3, r3
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	3b01      	subs	r3, #1
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	3b01      	subs	r3, #1
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050bc:	4923      	ldr	r1, [pc, #140]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050c2:	4b22      	ldr	r3, [pc, #136]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	4a21      	ldr	r2, [pc, #132]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ce:	4b1f      	ldr	r3, [pc, #124]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_RCC_OscConfig+0x778>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050da:	00d2      	lsls	r2, r2, #3
 80050dc:	491b      	ldr	r1, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f023 020c 	bic.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4917      	ldr	r1, [pc, #92]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f023 0202 	bic.w	r2, r3, #2
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	4912      	ldr	r1, [pc, #72]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	4a0d      	ldr	r2, [pc, #52]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a04      	ldr	r2, [pc, #16]	; (800514c <HAL_RCC_OscConfig+0x76c>)
 800513c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd fb91 	bl	8002868 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005148:	e011      	b.n	800516e <HAL_RCC_OscConfig+0x78e>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	58024800 	.word	0x58024800
 8005154:	fffffc0c 	.word	0xfffffc0c
 8005158:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fd fb84 	bl	8002868 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e05f      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x77c>
 800517a:	e057      	b.n	800522c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fb6e 	bl	8002868 <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005190:	f7fd fb6a 	bl	8002868 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e045      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051a2:	4b25      	ldr	r3, [pc, #148]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x7b0>
 80051ae:	e03d      	b.n	800522c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051b0:	4b21      	ldr	r3, [pc, #132]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_RCC_OscConfig+0x858>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d031      	beq.n	8005228 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f003 0203 	and.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d12a      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d122      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	0a5b      	lsrs	r3, r3, #9
 80051f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d108      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400

0800523c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e19c      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b8a      	ldr	r3, [pc, #552]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d910      	bls.n	8005280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b87      	ldr	r3, [pc, #540]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	4985      	ldr	r1, [pc, #532]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b83      	ldr	r3, [pc, #524]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e184      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	4b7b      	ldr	r3, [pc, #492]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005298:	429a      	cmp	r2, r3
 800529a:	d908      	bls.n	80052ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800529c:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	4975      	ldr	r1, [pc, #468]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	4b70      	ldr	r3, [pc, #448]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d908      	bls.n	80052dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052ca:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	496a      	ldr	r1, [pc, #424]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d010      	beq.n	800530a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	4b64      	ldr	r3, [pc, #400]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d908      	bls.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052f8:	4b61      	ldr	r3, [pc, #388]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	495e      	ldr	r1, [pc, #376]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005306:	4313      	orrs	r3, r2
 8005308:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d010      	beq.n	8005338 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005322:	429a      	cmp	r2, r3
 8005324:	d908      	bls.n	8005338 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005326:	4b56      	ldr	r3, [pc, #344]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4953      	ldr	r1, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005334:	4313      	orrs	r3, r2
 8005336:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	429a      	cmp	r2, r3
 8005352:	d908      	bls.n	8005366 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b4a      	ldr	r3, [pc, #296]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f023 020f 	bic.w	r2, r3, #15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4947      	ldr	r1, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005362:	4313      	orrs	r3, r2
 8005364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d055      	beq.n	800541e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4940      	ldr	r1, [pc, #256]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005380:	4313      	orrs	r3, r2
 8005382:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d107      	bne.n	800539c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d121      	bne.n	80053dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0f6      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a4:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d115      	bne.n	80053dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0ea      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d107      	bne.n	80053cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053bc:	4b30      	ldr	r3, [pc, #192]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0de      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053cc:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0d6      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f023 0207 	bic.w	r2, r3, #7
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4925      	ldr	r1, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fd fa3b 	bl	8002868 <HAL_GetTick>
 80053f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f4:	e00a      	b.n	800540c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f6:	f7fd fa37 	bl	8002868 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0be      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540c:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	429a      	cmp	r2, r3
 800541c:	d1eb      	bne.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	429a      	cmp	r2, r3
 8005438:	d208      	bcs.n	800544c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f023 020f 	bic.w	r2, r3, #15
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x244>)
 8005448:	4313      	orrs	r3, r2
 800544a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d214      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 020f 	bic.w	r2, r3, #15
 8005462:	4906      	ldr	r1, [pc, #24]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4313      	orrs	r3, r2
 8005468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <HAL_RCC_ClockConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e086      	b.n	800558a <HAL_RCC_ClockConfig+0x34e>
 800547c:	52002000 	.word	0x52002000
 8005480:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800549c:	429a      	cmp	r2, r3
 800549e:	d208      	bcs.n	80054b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a0:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4939      	ldr	r1, [pc, #228]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	4b34      	ldr	r3, [pc, #208]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d208      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ce:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	492e      	ldr	r1, [pc, #184]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d208      	bcs.n	800550e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	4922      	ldr	r1, [pc, #136]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 800550a:	4313      	orrs	r3, r2
 800550c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d010      	beq.n	800553c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005526:	429a      	cmp	r2, r3
 8005528:	d208      	bcs.n	800553c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	4917      	ldr	r1, [pc, #92]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 8005538:	4313      	orrs	r3, r2
 800553a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800553c:	f000 f834 	bl	80055a8 <HAL_RCC_GetSysClockFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	4912      	ldr	r1, [pc, #72]	; (8005598 <HAL_RCC_ClockConfig+0x35c>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <HAL_RCC_ClockConfig+0x358>)
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_RCC_ClockConfig+0x35c>)
 8005564:	5cd3      	ldrb	r3, [r2, r3]
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	4a0a      	ldr	r2, [pc, #40]	; (800559c <HAL_RCC_ClockConfig+0x360>)
 8005572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <HAL_RCC_ClockConfig+0x364>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_RCC_ClockConfig+0x368>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd f928 	bl	80027d4 <HAL_InitTick>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
 8005598:	0800fc60 	.word	0x0800fc60
 800559c:	24000004 	.word	0x24000004
 80055a0:	24000000 	.word	0x24000000
 80055a4:	24000008 	.word	0x24000008

080055a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ae:	4bb3      	ldr	r3, [pc, #716]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b6:	2b18      	cmp	r3, #24
 80055b8:	f200 8155 	bhi.w	8005866 <HAL_RCC_GetSysClockFreq+0x2be>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	08005629 	.word	0x08005629
 80055c8:	08005867 	.word	0x08005867
 80055cc:	08005867 	.word	0x08005867
 80055d0:	08005867 	.word	0x08005867
 80055d4:	08005867 	.word	0x08005867
 80055d8:	08005867 	.word	0x08005867
 80055dc:	08005867 	.word	0x08005867
 80055e0:	08005867 	.word	0x08005867
 80055e4:	0800564f 	.word	0x0800564f
 80055e8:	08005867 	.word	0x08005867
 80055ec:	08005867 	.word	0x08005867
 80055f0:	08005867 	.word	0x08005867
 80055f4:	08005867 	.word	0x08005867
 80055f8:	08005867 	.word	0x08005867
 80055fc:	08005867 	.word	0x08005867
 8005600:	08005867 	.word	0x08005867
 8005604:	08005655 	.word	0x08005655
 8005608:	08005867 	.word	0x08005867
 800560c:	08005867 	.word	0x08005867
 8005610:	08005867 	.word	0x08005867
 8005614:	08005867 	.word	0x08005867
 8005618:	08005867 	.word	0x08005867
 800561c:	08005867 	.word	0x08005867
 8005620:	08005867 	.word	0x08005867
 8005624:	0800565b 	.word	0x0800565b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005628:	4b94      	ldr	r3, [pc, #592]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005634:	4b91      	ldr	r3, [pc, #580]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	08db      	lsrs	r3, r3, #3
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	4a90      	ldr	r2, [pc, #576]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005646:	e111      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005648:	4b8d      	ldr	r3, [pc, #564]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800564a:	61bb      	str	r3, [r7, #24]
    break;
 800564c:	e10e      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800564e:	4b8d      	ldr	r3, [pc, #564]	; (8005884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005650:	61bb      	str	r3, [r7, #24]
    break;
 8005652:	e10b      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005656:	61bb      	str	r3, [r7, #24]
    break;
 8005658:	e108      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800565a:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005664:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800566e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005670:	4b82      	ldr	r3, [pc, #520]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800567a:	4b80      	ldr	r3, [pc, #512]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80e1 	beq.w	8005860 <HAL_RCC_GetSysClockFreq+0x2b8>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	f000 8083 	beq.w	80057ac <HAL_RCC_GetSysClockFreq+0x204>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	f200 80a1 	bhi.w	80057f0 <HAL_RCC_GetSysClockFreq+0x248>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x114>
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d056      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056ba:	e099      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02d      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056c8:	4b6c      	ldr	r3, [pc, #432]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	08db      	lsrs	r3, r3, #3
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	4a6b      	ldr	r2, [pc, #428]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b62      	ldr	r3, [pc, #392]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a61 	vldr	s11, [pc, #388]	; 800588c <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005722:	e087      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b51      	ldr	r3, [pc, #324]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800588c <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005766:	e065      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005894 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a02 	vldr	s12, [r7, #8]
 800578e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800588c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057aa:	e043      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005898 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b2f      	ldr	r3, [pc, #188]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800588c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ee:	e021      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005894 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a02 	vldr	s12, [r7, #8]
 8005816:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800588c <HAL_RCC_GetSysClockFreq+0x2e4>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005832:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	0a5b      	lsrs	r3, r3, #9
 800583a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583e:	3301      	adds	r3, #1
 8005840:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800584c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005858:	ee17 3a90 	vmov	r3, s15
 800585c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800585e:	e005      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
    break;
 8005864:	e002      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005866:	4b07      	ldr	r3, [pc, #28]	; (8005884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005868:	61bb      	str	r3, [r7, #24]
    break;
 800586a:	bf00      	nop
  }

  return sysclockfreq;
 800586c:	69bb      	ldr	r3, [r7, #24]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	58024400 	.word	0x58024400
 8005880:	03d09000 	.word	0x03d09000
 8005884:	003d0900 	.word	0x003d0900
 8005888:	017d7840 	.word	0x017d7840
 800588c:	46000000 	.word	0x46000000
 8005890:	4c742400 	.word	0x4c742400
 8005894:	4a742400 	.word	0x4a742400
 8005898:	4bbebc20 	.word	0x4bbebc20

0800589c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058a2:	f7ff fe81 	bl	80055a8 <HAL_RCC_GetSysClockFreq>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_RCC_GetHCLKFreq+0x50>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	490f      	ldr	r1, [pc, #60]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80058b4:	5ccb      	ldrb	r3, [r1, r3]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_RCC_GetHCLKFreq+0x50>)
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80058ca:	5cd3      	ldrb	r3, [r2, r3]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80058d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	58024400 	.word	0x58024400
 80058f0:	0800fc60 	.word	0x0800fc60
 80058f4:	24000004 	.word	0x24000004
 80058f8:	24000000 	.word	0x24000000

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005900:	f7ff ffcc 	bl	800589c <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4904      	ldr	r1, [pc, #16]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd80      	pop	{r7, pc}
 8005920:	58024400 	.word	0x58024400
 8005924:	0800fc60 	.word	0x0800fc60

08005928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800592c:	f7ff ffb6 	bl	800589c <HAL_RCC_GetHCLKFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	4904      	ldr	r1, [pc, #16]	; (8005950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	0800fc60 	.word	0x0800fc60

08005954 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005960:	2300      	movs	r3, #0
 8005962:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d03f      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005978:	d02a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800597a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800597e:	d824      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005984:	d018      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800598a:	d81e      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005994:	d007      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005996:	e018      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4ba3      	ldr	r3, [pc, #652]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4aa2      	ldr	r2, [pc, #648]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059a4:	e015      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f9d5 	bl	8006d5c <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059b6:	e00c      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	2102      	movs	r1, #2
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fa7e 	bl	8006ec0 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	e000      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059d8:	4b93      	ldr	r3, [pc, #588]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e4:	4990      	ldr	r1, [pc, #576]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	650b      	str	r3, [r1, #80]	; 0x50
 80059ea:	e001      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d03d      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d826      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a21 	.word	0x08005a21
 8005a10:	08005a2f 	.word	0x08005a2f
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005a59 	.word	0x08005a59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a20:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4a80      	ldr	r2, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a2c:	e015      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 f991 	bl	8006d5c <RCCEx_PLL2_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a3e:	e00c      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fa3a 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a50:	e003      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
      break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a60:	4b71      	ldr	r3, [pc, #452]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	f023 0207 	bic.w	r2, r3, #7
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6c:	496e      	ldr	r1, [pc, #440]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	650b      	str	r3, [r1, #80]	; 0x50
 8005a72:	e001      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d042      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8c:	d02b      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d825      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a94:	2bc0      	cmp	r3, #192	; 0xc0
 8005a96:	d028      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a98:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9a:	d821      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d016      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d81d      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d007      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005aac:	e018      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aae:	4b5e      	ldr	r3, [pc, #376]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a5d      	ldr	r2, [pc, #372]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005aba:	e017      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f94a 	bl	8006d5c <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005acc:	e00e      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f9f3 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ade:	e005      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005af2:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	494a      	ldr	r1, [pc, #296]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	650b      	str	r3, [r1, #80]	; 0x50
 8005b04:	e001      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d049      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b20:	d030      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b26:	d82a      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b2c:	d02c      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b32:	d824      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b38:	d018      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3e:	d81e      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b48:	d007      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b4a:	e018      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	4a35      	ldr	r2, [pc, #212]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b58:	e017      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f8fb 	bl	8006d5c <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b6a:	e00e      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f001 f9a4 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b7c:	e005      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
      break;
 8005b82:	e002      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b9e:	4922      	ldr	r1, [pc, #136]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	658b      	str	r3, [r1, #88]	; 0x58
 8005ba4:	e001      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d04b      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc0:	d030      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc6:	d82a      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bcc:	d02e      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bd2:	d824      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd8:	d018      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bde:	d81e      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be8:	d007      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005bea:	e018      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a0d      	ldr	r2, [pc, #52]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bf8:	e019      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f8ab 	bl	8006d5c <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c0a:	e010      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 f954 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c1c:	e007      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	e004      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005c24:	bf00      	nop
 8005c26:	e002      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c28:	58024400 	.word	0x58024400
      break;
 8005c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c34:	4b99      	ldr	r3, [pc, #612]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c42:	4996      	ldr	r1, [pc, #600]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	658b      	str	r3, [r1, #88]	; 0x58
 8005c48:	e001      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d032      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5e:	2b30      	cmp	r3, #48	; 0x30
 8005c60:	d01c      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005c62:	2b30      	cmp	r3, #48	; 0x30
 8005c64:	d817      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d00c      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d813      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d10f      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c76:	4b89      	ldr	r3, [pc, #548]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a88      	ldr	r2, [pc, #544]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c82:	e00e      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f866 	bl	8006d5c <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c94:	e005      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9a:	e002      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb4:	4979      	ldr	r1, [pc, #484]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cba:	e001      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d047      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd4:	d030      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cda:	d82a      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ce0:	d02c      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ce6:	d824      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cec:	d018      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf2:	d81e      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d007      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005cfe:	e018      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d00:	4b66      	ldr	r3, [pc, #408]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d0c:	e017      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f821 	bl	8006d5c <RCCEx_PLL2_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d1e:	e00e      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3324      	adds	r3, #36	; 0x24
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f8ca 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d30:	e005      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d44:	4b55      	ldr	r3, [pc, #340]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	4952      	ldr	r1, [pc, #328]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	650b      	str	r3, [r1, #80]	; 0x50
 8005d56:	e001      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d049      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d70:	d02e      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d76:	d828      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d7c:	d02a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d82:	d822      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d88:	d026      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d8e:	d81c      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d94:	d010      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9a:	d816      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01d      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da4:	d111      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ffd5 	bl	8006d5c <RCCEx_PLL2_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005db6:	e012      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f87e 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005dc8:	e009      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	e006      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005dd0:	bf00      	nop
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005dd4:	bf00      	nop
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	492a      	ldr	r1, [pc, #168]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	650b      	str	r3, [r1, #80]	; 0x50
 8005df6:	e001      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d04d      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e12:	d02e      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e18:	d828      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d02a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d822      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e2a:	d026      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e30:	d81c      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e36:	d010      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3c:	d816      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01d      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e46:	d111      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ff84 	bl	8006d5c <RCCEx_PLL2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e58:	e012      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3324      	adds	r3, #36	; 0x24
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f82d 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e6a:	e009      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	e006      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e72:	bf00      	nop
 8005e74:	e004      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e94:	4901      	ldr	r1, [pc, #4]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	658b      	str	r3, [r1, #88]	; 0x58
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02f      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebe:	d814      	bhi.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec8:	d10f      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4baf      	ldr	r3, [pc, #700]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4aae      	ldr	r2, [pc, #696]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ed6:	e00c      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 ff3c 	bl	8006d5c <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
      break;
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ef8:	4ba3      	ldr	r3, [pc, #652]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f04:	49a0      	ldr	r1, [pc, #640]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	650b      	str	r3, [r1, #80]	; 0x50
 8005f0a:	e001      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d032      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d81b      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f3d 	.word	0x08005f3d
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	08005f63 	.word	0x08005f63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3c:	4b92      	ldr	r3, [pc, #584]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4a91      	ldr	r2, [pc, #580]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f48:	e00c      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	2102      	movs	r1, #2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 ff03 	bl	8006d5c <RCCEx_PLL2_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f5a:	e003      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f6a:	4b87      	ldr	r3, [pc, #540]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	4984      	ldr	r1, [pc, #528]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f7c:	e001      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8086 	beq.w	800609c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f90:	4b7e      	ldr	r3, [pc, #504]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a7d      	ldr	r2, [pc, #500]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f9c:	f7fc fc64 	bl	8002868 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa2:	e009      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa4:	f7fc fc60 	bl	8002868 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d902      	bls.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005fb6:	e005      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fb8:	4b74      	ldr	r3, [pc, #464]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ef      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d166      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fca:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fd4:	4053      	eors	r3, r2
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fde:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe8:	4b67      	ldr	r3, [pc, #412]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4a66      	ldr	r2, [pc, #408]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff4:	4b64      	ldr	r3, [pc, #400]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	4a63      	ldr	r2, [pc, #396]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006000:	4a61      	ldr	r2, [pc, #388]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800600c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006010:	d115      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fc fc29 	bl	8002868 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006018:	e00b      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fc fc25 	bl	8002868 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d902      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	75fb      	strb	r3, [r7, #23]
            break;
 8006030:	e005      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006032:	4b55      	ldr	r3, [pc, #340]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ed      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d126      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006052:	d10d      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006054:	4b4c      	ldr	r3, [pc, #304]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006062:	0919      	lsrs	r1, r3, #4
 8006064:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006066:	400b      	ands	r3, r1
 8006068:	4947      	ldr	r1, [pc, #284]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800606a:	4313      	orrs	r3, r2
 800606c:	610b      	str	r3, [r1, #16]
 800606e:	e005      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006070:	4b45      	ldr	r3, [pc, #276]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4a44      	ldr	r2, [pc, #272]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800607a:	6113      	str	r3, [r2, #16]
 800607c:	4b42      	ldr	r3, [pc, #264]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800607e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608a:	493f      	ldr	r1, [pc, #252]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800608c:	4313      	orrs	r3, r2
 800608e:	670b      	str	r3, [r1, #112]	; 0x70
 8006090:	e004      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	75bb      	strb	r3, [r7, #22]
 8006096:	e001      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8085 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ae:	2b28      	cmp	r3, #40	; 0x28
 80060b0:	d866      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	08006195 	.word	0x08006195
 80060bc:	08006181 	.word	0x08006181
 80060c0:	08006181 	.word	0x08006181
 80060c4:	08006181 	.word	0x08006181
 80060c8:	08006181 	.word	0x08006181
 80060cc:	08006181 	.word	0x08006181
 80060d0:	08006181 	.word	0x08006181
 80060d4:	08006181 	.word	0x08006181
 80060d8:	0800615d 	.word	0x0800615d
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006181 	.word	0x08006181
 80060ec:	08006181 	.word	0x08006181
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006181 	.word	0x08006181
 80060f8:	0800616f 	.word	0x0800616f
 80060fc:	08006181 	.word	0x08006181
 8006100:	08006181 	.word	0x08006181
 8006104:	08006181 	.word	0x08006181
 8006108:	08006181 	.word	0x08006181
 800610c:	08006181 	.word	0x08006181
 8006110:	08006181 	.word	0x08006181
 8006114:	08006181 	.word	0x08006181
 8006118:	08006195 	.word	0x08006195
 800611c:	08006181 	.word	0x08006181
 8006120:	08006181 	.word	0x08006181
 8006124:	08006181 	.word	0x08006181
 8006128:	08006181 	.word	0x08006181
 800612c:	08006181 	.word	0x08006181
 8006130:	08006181 	.word	0x08006181
 8006134:	08006181 	.word	0x08006181
 8006138:	08006195 	.word	0x08006195
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006181 	.word	0x08006181
 8006148:	08006181 	.word	0x08006181
 800614c:	08006181 	.word	0x08006181
 8006150:	08006181 	.word	0x08006181
 8006154:	08006181 	.word	0x08006181
 8006158:	08006195 	.word	0x08006195
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	2101      	movs	r1, #1
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fdfa 	bl	8006d5c <RCCEx_PLL2_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800616c:	e013      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fea3 	bl	8006ec0 <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800617e:	e00a      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
      break;
 8006184:	e007      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006186:	bf00      	nop
 8006188:	58024400 	.word	0x58024400
 800618c:	58024800 	.word	0x58024800
 8006190:	00ffffcf 	.word	0x00ffffcf
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800619c:	4b96      	ldr	r3, [pc, #600]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a8:	4993      	ldr	r1, [pc, #588]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	654b      	str	r3, [r1, #84]	; 0x54
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d038      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d821      	bhi.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006213 	.word	0x08006213
 80061d4:	080061e9 	.word	0x080061e9
 80061d8:	080061fb 	.word	0x080061fb
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fdb4 	bl	8006d5c <RCCEx_PLL2_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061f8:	e00c      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3324      	adds	r3, #36	; 0x24
 80061fe:	2101      	movs	r1, #1
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fe5d 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	75fb      	strb	r3, [r7, #23]
      break;
 8006210:	e000      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800621a:	4b77      	ldr	r3, [pc, #476]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	f023 0207 	bic.w	r2, r3, #7
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	4974      	ldr	r1, [pc, #464]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006228:	4313      	orrs	r3, r2
 800622a:	654b      	str	r3, [r1, #84]	; 0x54
 800622c:	e001      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d03a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	2b05      	cmp	r3, #5
 8006246:	d821      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006293 	.word	0x08006293
 8006254:	08006269 	.word	0x08006269
 8006258:	0800627b 	.word	0x0800627b
 800625c:	08006293 	.word	0x08006293
 8006260:	08006293 	.word	0x08006293
 8006264:	08006293 	.word	0x08006293
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fd74 	bl	8006d5c <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006278:	e00c      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2101      	movs	r1, #1
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fe1d 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800628a:	e003      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
      break;
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800629a:	4b57      	ldr	r3, [pc, #348]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	f023 0207 	bic.w	r2, r3, #7
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	4953      	ldr	r1, [pc, #332]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	658b      	str	r3, [r1, #88]	; 0x58
 80062ae:	e001      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d04b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ca:	d02e      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80062cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d0:	d828      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d6:	d02a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d822      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062e2:	d026      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80062e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062e8:	d81c      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ee:	d010      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f4:	d816      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01d      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80062fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fe:	d111      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fd28 	bl	8006d5c <RCCEx_PLL2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006310:	e012      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3324      	adds	r3, #36	; 0x24
 8006316:	2102      	movs	r1, #2
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fdd1 	bl	8006ec0 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006322:	e009      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
      break;
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800632a:	bf00      	nop
 800632c:	e004      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800632e:	bf00      	nop
 8006330:	e002      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006332:	bf00      	nop
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800633e:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	492a      	ldr	r1, [pc, #168]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800634e:	4313      	orrs	r3, r2
 8006350:	654b      	str	r3, [r1, #84]	; 0x54
 8006352:	e001      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d04d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800636a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800636e:	d02e      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006370:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006374:	d828      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d02a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d822      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006386:	d026      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800638c:	d81c      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800638e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006392:	d010      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006398:	d816      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01d      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d111      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fcd6 	bl	8006d5c <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063b4:	e012      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3324      	adds	r3, #36	; 0x24
 80063ba:	2102      	movs	r1, #2
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fd7f 	bl	8006ec0 <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063c6:	e009      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75fb      	strb	r3, [r7, #23]
      break;
 80063cc:	e006      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063ce:	bf00      	nop
 80063d0:	e004      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063d2:	bf00      	nop
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10c      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f0:	4901      	ldr	r1, [pc, #4]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	658b      	str	r3, [r1, #88]	; 0x58
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80063f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04b      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006412:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006416:	d02e      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006418:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800641c:	d828      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800641e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006422:	d02a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006428:	d822      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800642a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800642e:	d026      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006430:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006434:	d81c      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800643a:	d010      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800643c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006440:	d816      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01d      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644a:	d111      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	2100      	movs	r1, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fc82 	bl	8006d5c <RCCEx_PLL2_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800645c:	e012      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3324      	adds	r3, #36	; 0x24
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fd2b 	bl	8006ec0 <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800646e:	e009      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
      break;
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006476:	bf00      	nop
 8006478:	e004      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800648a:	4b9d      	ldr	r3, [pc, #628]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006498:	4999      	ldr	r1, [pc, #612]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800649a:	4313      	orrs	r3, r2
 800649c:	658b      	str	r3, [r1, #88]	; 0x58
 800649e:	e001      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ba:	d10a      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3324      	adds	r3, #36	; 0x24
 80064c0:	2102      	movs	r1, #2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fcfc 	bl	8006ec0 <RCCEx_PLL3_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064d2:	4b8b      	ldr	r3, [pc, #556]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e0:	4987      	ldr	r1, [pc, #540]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fc:	d10a      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3324      	adds	r3, #36	; 0x24
 8006502:	2102      	movs	r1, #2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fcdb 	bl	8006ec0 <RCCEx_PLL3_Config>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006514:	4b7a      	ldr	r3, [pc, #488]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006522:	4977      	ldr	r1, [pc, #476]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006524:	4313      	orrs	r3, r2
 8006526:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d034      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800653a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653e:	d01d      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006544:	d817      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800654a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654e:	d009      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006550:	e011      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fbff 	bl	8006d5c <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006562:	e00c      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	2102      	movs	r1, #2
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fca8 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
      break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800657c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006584:	4b5e      	ldr	r3, [pc, #376]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006592:	495b      	ldr	r1, [pc, #364]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006594:	4313      	orrs	r3, r2
 8006596:	658b      	str	r3, [r1, #88]	; 0x58
 8006598:	e001      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d033      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b4:	d01c      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80065b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065ba:	d816      	bhi.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80065bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c0:	d003      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80065c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c6:	d007      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80065c8:	e00f      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ca:	4b4d      	ldr	r3, [pc, #308]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4a4c      	ldr	r2, [pc, #304]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065d6:	e00c      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	2101      	movs	r1, #1
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fc6e 	bl	8006ec0 <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
      break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80065f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f8:	4b41      	ldr	r3, [pc, #260]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006606:	493e      	ldr	r1, [pc, #248]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006608:	4313      	orrs	r3, r2
 800660a:	654b      	str	r3, [r1, #84]	; 0x54
 800660c:	e001      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d029      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662a:	d007      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662e:	4b34      	ldr	r3, [pc, #208]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	4a33      	ldr	r2, [pc, #204]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800663a:	e00b      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb8a 	bl	8006d5c <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800664c:	e002      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
      break;
 8006652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800665a:	4b29      	ldr	r3, [pc, #164]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	4926      	ldr	r1, [pc, #152]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006668:	4313      	orrs	r3, r2
 800666a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800666c:	e001      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	2102      	movs	r1, #2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fc1b 	bl	8006ec0 <RCCEx_PLL3_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d033      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a8:	d017      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ae:	d811      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b4:	d013      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80066b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ba:	d80b      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d010      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d106      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066d2:	e007      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	75fb      	strb	r3, [r7, #23]
      break;
 80066d8:	e004      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066da:	bf00      	nop
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ea:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f6:	4902      	ldr	r1, [pc, #8]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	654b      	str	r3, [r1, #84]	; 0x54
 80066fc:	e004      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80066fe:	bf00      	nop
 8006700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006714:	4b31      	ldr	r3, [pc, #196]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006720:	492e      	ldr	r1, [pc, #184]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006722:	4313      	orrs	r3, r2
 8006724:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006732:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006740:	4926      	ldr	r1, [pc, #152]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006752:	4b22      	ldr	r3, [pc, #136]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800675e:	491f      	ldr	r1, [pc, #124]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006760:	4313      	orrs	r3, r2
 8006762:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800677a:	6113      	str	r3, [r2, #16]
 800677c:	4b17      	ldr	r3, [pc, #92]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006786:	4915      	ldr	r1, [pc, #84]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da08      	bge.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a0:	490e      	ldr	r1, [pc, #56]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	4906      	ldr	r1, [pc, #24]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067c6:	7dbb      	ldrb	r3, [r7, #22]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400

080067e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80067e4:	f7ff f85a 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4904      	ldr	r1, [pc, #16]	; (8006808 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	58024400 	.word	0x58024400
 8006808:	0800fc60 	.word	0x0800fc60

0800680c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006814:	4ba1      	ldr	r3, [pc, #644]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800681e:	4b9f      	ldr	r3, [pc, #636]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	0b1b      	lsrs	r3, r3, #12
 8006824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006828:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800682a:	4b9c      	ldr	r3, [pc, #624]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006836:	4b99      	ldr	r3, [pc, #612]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	08db      	lsrs	r3, r3, #3
 800683c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8111 	beq.w	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b02      	cmp	r3, #2
 800685e:	f000 8083 	beq.w	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b02      	cmp	r3, #2
 8006866:	f200 80a1 	bhi.w	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d056      	beq.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006876:	e099      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006878:	4b88      	ldr	r3, [pc, #544]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d02d      	beq.n	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006884:	4b85      	ldr	r3, [pc, #532]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	08db      	lsrs	r3, r3, #3
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	4a84      	ldr	r2, [pc, #528]	; (8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b7b      	ldr	r3, [pc, #492]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068de:	e087      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b6a      	ldr	r3, [pc, #424]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006922:	e065      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006966:	e043      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b48      	ldr	r3, [pc, #288]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a03 	vldr	s12, [r7, #12]
 800698e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069aa:	e021      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a16:	ee17 2a90 	vmov	r2, s15
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a1e:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a44:	ee17 2a90 	vmov	r2, s15
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	0e1b      	lsrs	r3, r3, #24
 8006a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a72:	ee17 2a90 	vmov	r2, s15
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a7a:	e008      	b.n	8006a8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
}
 8006a8e:	bf00      	nop
 8006a90:	3724      	adds	r7, #36	; 0x24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	46000000 	.word	0x46000000
 8006aa8:	4c742400 	.word	0x4c742400
 8006aac:	4a742400 	.word	0x4a742400
 8006ab0:	4bbebc20 	.word	0x4bbebc20

08006ab4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006abc:	4ba1      	ldr	r3, [pc, #644]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ac6:	4b9f      	ldr	r3, [pc, #636]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	0d1b      	lsrs	r3, r3, #20
 8006acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ad0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ad2:	4b9c      	ldr	r3, [pc, #624]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006ade:	4b99      	ldr	r3, [pc, #612]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8111 	beq.w	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	f000 8083 	beq.w	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	f200 80a1 	bhi.w	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d056      	beq.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b1e:	e099      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b20:	4b88      	ldr	r3, [pc, #544]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02d      	beq.n	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b2c:	4b85      	ldr	r3, [pc, #532]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	4a84      	ldr	r2, [pc, #528]	; (8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b86:	e087      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b6a      	ldr	r3, [pc, #424]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bca:	e065      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0e:	e043      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b48      	ldr	r3, [pc, #288]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c52:	e021      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	0a5b      	lsrs	r3, r3, #9
 8006c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbe:	ee17 2a90 	vmov	r2, s15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006cc6:	4b1f      	ldr	r3, [pc, #124]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cec:	ee17 2a90 	vmov	r2, s15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d1a:	ee17 2a90 	vmov	r2, s15
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d22:	e008      	b.n	8006d36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	609a      	str	r2, [r3, #8]
}
 8006d36:	bf00      	nop
 8006d38:	3724      	adds	r7, #36	; 0x24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	58024400 	.word	0x58024400
 8006d48:	03d09000 	.word	0x03d09000
 8006d4c:	46000000 	.word	0x46000000
 8006d50:	4c742400 	.word	0x4c742400
 8006d54:	4a742400 	.word	0x4a742400
 8006d58:	4bbebc20 	.word	0x4bbebc20

08006d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d6a:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d101      	bne.n	8006d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e099      	b.n	8006eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4e      	ldr	r2, [pc, #312]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d86:	f7fb fd6f 	bl	8002868 <HAL_GetTick>
 8006d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d8e:	f7fb fd6b 	bl	8002868 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e086      	b.n	8006eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006da0:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dac:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	493f      	ldr	r1, [pc, #252]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	025b      	lsls	r3, r3, #9
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006df0:	4931      	ldr	r1, [pc, #196]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006df6:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	492d      	ldr	r1, [pc, #180]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e08:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	f023 0220 	bic.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4928      	ldr	r1, [pc, #160]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <RCCEx_PLL2_Config+0x160>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	69d2      	ldr	r2, [r2, #28]
 8006e32:	00d2      	lsls	r2, r2, #3
 8006e34:	4920      	ldr	r1, [pc, #128]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e40:	f043 0310 	orr.w	r3, r3, #16
 8006e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e58:	e00f      	b.n	8006e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e6c:	e005      	b.n	8006e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fb fcef 	bl	8002868 <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e8e:	f7fb fceb 	bl	8002868 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f0      	beq.n	8006e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	ffff0007 	.word	0xffff0007

08006ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ece:	4b53      	ldr	r3, [pc, #332]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d101      	bne.n	8006ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e099      	b.n	8007012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ede:	4b4f      	ldr	r3, [pc, #316]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4e      	ldr	r2, [pc, #312]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eea:	f7fb fcbd 	bl	8002868 <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ef2:	f7fb fcb9 	bl	8002868 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e086      	b.n	8007012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	493f      	ldr	r1, [pc, #252]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	628b      	str	r3, [r1, #40]	; 0x28
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	025b      	lsls	r3, r3, #9
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f54:	4931      	ldr	r1, [pc, #196]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f5a:	4b30      	ldr	r3, [pc, #192]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	492d      	ldr	r1, [pc, #180]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	4928      	ldr	r1, [pc, #160]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4a26      	ldr	r2, [pc, #152]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8e:	4b24      	ldr	r3, [pc, #144]	; (8007020 <RCCEx_PLL3_Config+0x160>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	69d2      	ldr	r2, [r2, #28]
 8006f96:	00d2      	lsls	r2, r2, #3
 8006f98:	4920      	ldr	r1, [pc, #128]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f9e:	4b1f      	ldr	r3, [pc, #124]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a1e      	ldr	r2, [pc, #120]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fbc:	e00f      	b.n	8006fde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d106      	bne.n	8006fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fd0:	e005      	b.n	8006fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	4a11      	ldr	r2, [pc, #68]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fea:	f7fb fc3d 	bl	8002868 <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ff0:	e008      	b.n	8007004 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ff2:	f7fb fc39 	bl	8002868 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e006      	b.n	8007012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	58024400 	.word	0x58024400
 8007020:	ffff0007 	.word	0xffff0007

08007024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e042      	b.n	80070bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fb f861 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2224      	movs	r2, #36	; 0x24
 8007052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fda0 	bl	8007bac <UART_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e022      	b.n	80070bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 fafc 	bl	800867c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fb83 	bl	80087c0 <UART_CheckIdleState>
 80070ba:	4603      	mov	r3, r0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070da:	2b20      	cmp	r3, #32
 80070dc:	f040 8083 	bne.w	80071e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_UART_Transmit+0x28>
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e07b      	b.n	80071e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Transmit+0x3a>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e074      	b.n	80071e8 <HAL_UART_Transmit+0x124>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2221      	movs	r2, #33	; 0x21
 8007112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007116:	f7fb fba7 	bl	8002868 <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007134:	d108      	bne.n	8007148 <HAL_UART_Transmit+0x84>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e003      	b.n	8007150 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007158:	e02c      	b.n	80071b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f001 fb76 	bl	8008856 <UART_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e039      	b.n	80071e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007188:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	3302      	adds	r3, #2
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	e007      	b.n	80071a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	781a      	ldrb	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3301      	adds	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1cc      	bne.n	800715a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2200      	movs	r2, #0
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 fb43 	bl	8008856 <UART_WaitOnFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e006      	b.n	80071e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e000      	b.n	80071e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
  }
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007206:	2b20      	cmp	r3, #32
 8007208:	f040 80c0 	bne.w	800738c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_UART_Receive+0x28>
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0b8      	b.n	800738e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_UART_Receive+0x3a>
 8007226:	2302      	movs	r3, #2
 8007228:	e0b1      	b.n	800738e <HAL_UART_Receive+0x19e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2222      	movs	r2, #34	; 0x22
 800723e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007248:	f7fb fb0e 	bl	8002868 <HAL_GetTick>
 800724c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007266:	d10e      	bne.n	8007286 <HAL_UART_Receive+0x96>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d105      	bne.n	800727c <HAL_UART_Receive+0x8c>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800727a:	e02d      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	22ff      	movs	r2, #255	; 0xff
 8007280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007284:	e028      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_UART_Receive+0xba>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <HAL_UART_Receive+0xb0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	22ff      	movs	r2, #255	; 0xff
 800729a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800729e:	e01b      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	227f      	movs	r2, #127	; 0x7f
 80072a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072a8:	e016      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b2:	d10d      	bne.n	80072d0 <HAL_UART_Receive+0xe0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_UART_Receive+0xd6>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	227f      	movs	r2, #127	; 0x7f
 80072c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072c4:	e008      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	223f      	movs	r2, #63	; 0x3f
 80072ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Receive+0xe8>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	d108      	bne.n	80072fc <HAL_UART_Receive+0x10c>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	e003      	b.n	8007304 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800730c:	e032      	b.n	8007374 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	2120      	movs	r1, #32
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f001 fa9c 	bl	8008856 <UART_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e032      	b.n	800738e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	b29a      	uxth	r2, r3
 8007336:	8a7b      	ldrh	r3, [r7, #18]
 8007338:	4013      	ands	r3, r2
 800733a:	b29a      	uxth	r2, r3
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	3302      	adds	r3, #2
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e00c      	b.n	8007362 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	b2da      	uxtb	r2, r3
 8007350:	8a7b      	ldrh	r3, [r7, #18]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	4013      	ands	r3, r2
 8007356:	b2da      	uxtb	r2, r3
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	3301      	adds	r3, #1
 8007360:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1c6      	bne.n	800730e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d142      	bne.n	8007436 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <HAL_UART_Receive_IT+0x24>
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e03b      	b.n	8007438 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Receive_IT+0x36>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e034      	b.n	8007438 <HAL_UART_Receive_IT+0xa0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a17      	ldr	r2, [pc, #92]	; (8007440 <HAL_UART_Receive_IT+0xa8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01f      	beq.n	8007426 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d018      	beq.n	8007426 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	613b      	str	r3, [r7, #16]
   return(result);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	69f9      	ldr	r1, [r7, #28]
 8007418:	6a3a      	ldr	r2, [r7, #32]
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e6      	bne.n	80073f4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	461a      	mov	r2, r3
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f001 fadb 	bl	80089e8 <UART_Start_Receive_IT>
 8007432:	4603      	mov	r3, r0
 8007434:	e000      	b.n	8007438 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007436:	2302      	movs	r3, #2
  }
}
 8007438:	4618      	mov	r0, r3
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	58000c00 	.word	0x58000c00

08007444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b0ba      	sub	sp, #232	; 0xe8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800746a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800746e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007472:	4013      	ands	r3, r2
 8007474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d11b      	bne.n	80074b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d015      	beq.n	80074b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800748c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	d105      	bne.n	80074a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800749c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 835a 	beq.w	8007b62 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
      }
      return;
 80074b6:	e354      	b.n	8007b62 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 811f 	beq.w	8007700 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074c6:	4b8b      	ldr	r3, [pc, #556]	; (80076f4 <HAL_UART_IRQHandler+0x2b0>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074d2:	4b89      	ldr	r3, [pc, #548]	; (80076f8 <HAL_UART_IRQHandler+0x2b4>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8112 	beq.w	8007700 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d011      	beq.n	800750c <HAL_UART_IRQHandler+0xc8>
 80074e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2201      	movs	r2, #1
 80074fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007502:	f043 0201 	orr.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d011      	beq.n	800753c <HAL_UART_IRQHandler+0xf8>
 8007518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2202      	movs	r2, #2
 800752a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007532:	f043 0204 	orr.w	r2, r3, #4
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d011      	beq.n	800756c <HAL_UART_IRQHandler+0x128>
 8007548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2204      	movs	r2, #4
 800755a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007562:	f043 0202 	orr.w	r2, r3, #2
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d017      	beq.n	80075a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007584:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007588:	4b5a      	ldr	r3, [pc, #360]	; (80076f4 <HAL_UART_IRQHandler+0x2b0>)
 800758a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2208      	movs	r2, #8
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759e:	f043 0208 	orr.w	r2, r3, #8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d012      	beq.n	80075da <HAL_UART_IRQHandler+0x196>
 80075b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00c      	beq.n	80075da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d0:	f043 0220 	orr.w	r2, r3, #32
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 82c0 	beq.w	8007b66 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d013      	beq.n	800761a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d005      	beq.n	800763e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fafc 	bl	8008c3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d141      	bne.n	80076d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800767e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800768a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1d9      	bne.n	8007652 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	4a14      	ldr	r2, [pc, #80]	; (80076fc <HAL_UART_IRQHandler+0x2b8>)
 80076ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fb fd42 	bl	800313c <HAL_DMA_Abort_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d017      	beq.n	80076ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	e00f      	b.n	80076ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa56 	bl	8007b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	e00b      	b.n	80076ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa52 	bl	8007b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e007      	b.n	80076ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa4e 	bl	8007b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80076ec:	e23b      	b.n	8007b66 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ee:	bf00      	nop
    return;
 80076f0:	e239      	b.n	8007b66 <HAL_UART_IRQHandler+0x722>
 80076f2:	bf00      	nop
 80076f4:	10000001 	.word	0x10000001
 80076f8:	04000120 	.word	0x04000120
 80076fc:	08008d09 	.word	0x08008d09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 81ce 	bne.w	8007aa6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 81c7 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 81c0 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2210      	movs	r2, #16
 800772c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	f040 813b 	bne.w	80079b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a8b      	ldr	r2, [pc, #556]	; (8007974 <HAL_UART_IRQHandler+0x530>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d059      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a89      	ldr	r2, [pc, #548]	; (8007978 <HAL_UART_IRQHandler+0x534>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d053      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a87      	ldr	r2, [pc, #540]	; (800797c <HAL_UART_IRQHandler+0x538>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d04d      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a85      	ldr	r2, [pc, #532]	; (8007980 <HAL_UART_IRQHandler+0x53c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d047      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a83      	ldr	r2, [pc, #524]	; (8007984 <HAL_UART_IRQHandler+0x540>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d041      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a81      	ldr	r2, [pc, #516]	; (8007988 <HAL_UART_IRQHandler+0x544>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d03b      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a7f      	ldr	r2, [pc, #508]	; (800798c <HAL_UART_IRQHandler+0x548>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d035      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a7d      	ldr	r2, [pc, #500]	; (8007990 <HAL_UART_IRQHandler+0x54c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d02f      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a7b      	ldr	r2, [pc, #492]	; (8007994 <HAL_UART_IRQHandler+0x550>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d029      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a79      	ldr	r2, [pc, #484]	; (8007998 <HAL_UART_IRQHandler+0x554>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d023      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a77      	ldr	r2, [pc, #476]	; (800799c <HAL_UART_IRQHandler+0x558>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01d      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a75      	ldr	r2, [pc, #468]	; (80079a0 <HAL_UART_IRQHandler+0x55c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d017      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a73      	ldr	r2, [pc, #460]	; (80079a4 <HAL_UART_IRQHandler+0x560>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d011      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a71      	ldr	r2, [pc, #452]	; (80079a8 <HAL_UART_IRQHandler+0x564>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a6f      	ldr	r2, [pc, #444]	; (80079ac <HAL_UART_IRQHandler+0x568>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d005      	beq.n	80077fe <HAL_UART_IRQHandler+0x3ba>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a6d      	ldr	r2, [pc, #436]	; (80079b0 <HAL_UART_IRQHandler+0x56c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d105      	bne.n	800780a <HAL_UART_IRQHandler+0x3c6>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	b29b      	uxth	r3, r3
 8007808:	e004      	b.n	8007814 <HAL_UART_IRQHandler+0x3d0>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 81a4 	beq.w	8007b6a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800782c:	429a      	cmp	r2, r3
 800782e:	f080 819c 	bcs.w	8007b6a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	f000 8086 	beq.w	8007956 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800785e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007866:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007878:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007880:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800788c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1da      	bne.n	800784a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e1      	bne.n	8007894 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e3      	bne.n	80078d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007926:	f023 0310 	bic.w	r3, r3, #16
 800792a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007938:	65bb      	str	r3, [r7, #88]	; 0x58
 800793a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800793e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e4      	bne.n	8007916 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007950:	4618      	mov	r0, r3
 8007952:	f7fb f8d5 	bl	8002b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007962:	b29b      	uxth	r3, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	b29b      	uxth	r3, r3
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f912 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007970:	e0fb      	b.n	8007b6a <HAL_UART_IRQHandler+0x726>
 8007972:	bf00      	nop
 8007974:	40020010 	.word	0x40020010
 8007978:	40020028 	.word	0x40020028
 800797c:	40020040 	.word	0x40020040
 8007980:	40020058 	.word	0x40020058
 8007984:	40020070 	.word	0x40020070
 8007988:	40020088 	.word	0x40020088
 800798c:	400200a0 	.word	0x400200a0
 8007990:	400200b8 	.word	0x400200b8
 8007994:	40020410 	.word	0x40020410
 8007998:	40020428 	.word	0x40020428
 800799c:	40020440 	.word	0x40020440
 80079a0:	40020458 	.word	0x40020458
 80079a4:	40020470 	.word	0x40020470
 80079a8:	40020488 	.word	0x40020488
 80079ac:	400204a0 	.word	0x400204a0
 80079b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80cc 	beq.w	8007b6e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80079d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80c7 	beq.w	8007b6e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a02:	647b      	str	r3, [r7, #68]	; 0x44
 8007a04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e4      	bne.n	80079e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	623b      	str	r3, [r7, #32]
   return(result);
 8007a26:	6a3a      	ldr	r2, [r7, #32]
 8007a28:	4b54      	ldr	r3, [pc, #336]	; (8007b7c <HAL_UART_IRQHandler+0x738>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3308      	adds	r3, #8
 8007a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e4      	bne.n	8007a62 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f878 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aa4:	e063      	b.n	8007b6e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x68c>
 8007ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fdbb 	bl	8009644 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ace:	e051      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d014      	beq.n	8007b06 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d03a      	beq.n	8007b72 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
    return;
 8007b04:	e035      	b.n	8007b72 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <HAL_UART_IRQHandler+0x6e2>
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 f908 	bl	8008d34 <UART_EndTransmit_IT>
    return;
 8007b24:	e026      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_UART_IRQHandler+0x702>
 8007b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fd94 	bl	800966c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b44:	e016      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d010      	beq.n	8007b74 <HAL_UART_IRQHandler+0x730>
 8007b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da0c      	bge.n	8007b74 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fd7c 	bl	8009658 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b60:	e008      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
      return;
 8007b62:	bf00      	nop
 8007b64:	e006      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
    return;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
      return;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
      return;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_UART_IRQHandler+0x730>
    return;
 8007b72:	bf00      	nop
  }
}
 8007b74:	37e8      	adds	r7, #232	; 0xe8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	effffffe 	.word	0xeffffffe

08007b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb0:	b092      	sub	sp, #72	; 0x48
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4bbe      	ldr	r3, [pc, #760]	; (8007ed4 <UART_SetConfig+0x328>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4ab3      	ldr	r2, [pc, #716]	; (8007ed8 <UART_SetConfig+0x32c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c14:	4313      	orrs	r3, r2
 8007c16:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	4baf      	ldr	r3, [pc, #700]	; (8007edc <UART_SetConfig+0x330>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	6812      	ldr	r2, [r2, #0]
 8007c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	f023 010f 	bic.w	r1, r3, #15
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4aa6      	ldr	r2, [pc, #664]	; (8007ee0 <UART_SetConfig+0x334>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d177      	bne.n	8007d3c <UART_SetConfig+0x190>
 8007c4c:	4ba5      	ldr	r3, [pc, #660]	; (8007ee4 <UART_SetConfig+0x338>)
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c54:	2b28      	cmp	r3, #40	; 0x28
 8007c56:	d86d      	bhi.n	8007d34 <UART_SetConfig+0x188>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0xb4>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d35 	.word	0x08007d35
 8007c68:	08007d35 	.word	0x08007d35
 8007c6c:	08007d35 	.word	0x08007d35
 8007c70:	08007d35 	.word	0x08007d35
 8007c74:	08007d35 	.word	0x08007d35
 8007c78:	08007d35 	.word	0x08007d35
 8007c7c:	08007d35 	.word	0x08007d35
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d35 	.word	0x08007d35
 8007c88:	08007d35 	.word	0x08007d35
 8007c8c:	08007d35 	.word	0x08007d35
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d35 	.word	0x08007d35
 8007c98:	08007d35 	.word	0x08007d35
 8007c9c:	08007d35 	.word	0x08007d35
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007d35 	.word	0x08007d35
 8007ca8:	08007d35 	.word	0x08007d35
 8007cac:	08007d35 	.word	0x08007d35
 8007cb0:	08007d35 	.word	0x08007d35
 8007cb4:	08007d35 	.word	0x08007d35
 8007cb8:	08007d35 	.word	0x08007d35
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d1d 	.word	0x08007d1d
 8007cc4:	08007d35 	.word	0x08007d35
 8007cc8:	08007d35 	.word	0x08007d35
 8007ccc:	08007d35 	.word	0x08007d35
 8007cd0:	08007d35 	.word	0x08007d35
 8007cd4:	08007d35 	.word	0x08007d35
 8007cd8:	08007d35 	.word	0x08007d35
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d35 	.word	0x08007d35
 8007ce8:	08007d35 	.word	0x08007d35
 8007cec:	08007d35 	.word	0x08007d35
 8007cf0:	08007d35 	.word	0x08007d35
 8007cf4:	08007d35 	.word	0x08007d35
 8007cf8:	08007d35 	.word	0x08007d35
 8007cfc:	08007d35 	.word	0x08007d35
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e222      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e21e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e21a      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e216      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d24:	2320      	movs	r3, #32
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e212      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d32:	e20e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d34:	2380      	movs	r3, #128	; 0x80
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3a:	e20a      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a69      	ldr	r2, [pc, #420]	; (8007ee8 <UART_SetConfig+0x33c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d130      	bne.n	8007da8 <UART_SetConfig+0x1fc>
 8007d46:	4b67      	ldr	r3, [pc, #412]	; (8007ee4 <UART_SetConfig+0x338>)
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d826      	bhi.n	8007da0 <UART_SetConfig+0x1f4>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0x1ac>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d81 	.word	0x08007d81
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e1ec      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e1e8      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e1e4      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e1e0      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d90:	2320      	movs	r3, #32
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e1dc      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9e:	e1d8      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da6:	e1d4      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a4f      	ldr	r2, [pc, #316]	; (8007eec <UART_SetConfig+0x340>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d130      	bne.n	8007e14 <UART_SetConfig+0x268>
 8007db2:	4b4c      	ldr	r3, [pc, #304]	; (8007ee4 <UART_SetConfig+0x338>)
 8007db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d826      	bhi.n	8007e0c <UART_SetConfig+0x260>
 8007dbe:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <UART_SetConfig+0x218>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007ddd 	.word	0x08007ddd
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	08007ded 	.word	0x08007ded
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e1b6      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007de4:	2304      	movs	r3, #4
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e1b2      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007dec:	2308      	movs	r3, #8
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e1ae      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e1aa      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e1a6      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0a:	e1a2      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e12:	e19e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a35      	ldr	r2, [pc, #212]	; (8007ef0 <UART_SetConfig+0x344>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d130      	bne.n	8007e80 <UART_SetConfig+0x2d4>
 8007e1e:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <UART_SetConfig+0x338>)
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	d826      	bhi.n	8007e78 <UART_SetConfig+0x2cc>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x284>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4e:	e180      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e56:	e17c      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5e:	e178      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e66:	e174      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6e:	e170      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e76:	e16c      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e78:	2380      	movs	r3, #128	; 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7e:	e168      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <UART_SetConfig+0x348>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d142      	bne.n	8007f10 <UART_SetConfig+0x364>
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <UART_SetConfig+0x338>)
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d838      	bhi.n	8007f08 <UART_SetConfig+0x35c>
 8007e96:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <UART_SetConfig+0x2f0>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	08007ec5 	.word	0x08007ec5
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007ef9 	.word	0x08007ef9
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eba:	e14a      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec2:	e146      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eca:	e142      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e13e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ed4:	cfff69f3 	.word	0xcfff69f3
 8007ed8:	58000c00 	.word	0x58000c00
 8007edc:	11fff4ff 	.word	0x11fff4ff
 8007ee0:	40011000 	.word	0x40011000
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	40004400 	.word	0x40004400
 8007eec:	40004800 	.word	0x40004800
 8007ef0:	40004c00 	.word	0x40004c00
 8007ef4:	40005000 	.word	0x40005000
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e128      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f06:	e124      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e120      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4acb      	ldr	r2, [pc, #812]	; (8008244 <UART_SetConfig+0x698>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d176      	bne.n	8008008 <UART_SetConfig+0x45c>
 8007f1a:	4bcb      	ldr	r3, [pc, #812]	; (8008248 <UART_SetConfig+0x69c>)
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f22:	2b28      	cmp	r3, #40	; 0x28
 8007f24:	d86c      	bhi.n	8008000 <UART_SetConfig+0x454>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0x380>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007fd1 	.word	0x08007fd1
 8007f30:	08008001 	.word	0x08008001
 8007f34:	08008001 	.word	0x08008001
 8007f38:	08008001 	.word	0x08008001
 8007f3c:	08008001 	.word	0x08008001
 8007f40:	08008001 	.word	0x08008001
 8007f44:	08008001 	.word	0x08008001
 8007f48:	08008001 	.word	0x08008001
 8007f4c:	08007fd9 	.word	0x08007fd9
 8007f50:	08008001 	.word	0x08008001
 8007f54:	08008001 	.word	0x08008001
 8007f58:	08008001 	.word	0x08008001
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008001 	.word	0x08008001
 8007f64:	08008001 	.word	0x08008001
 8007f68:	08008001 	.word	0x08008001
 8007f6c:	08007fe1 	.word	0x08007fe1
 8007f70:	08008001 	.word	0x08008001
 8007f74:	08008001 	.word	0x08008001
 8007f78:	08008001 	.word	0x08008001
 8007f7c:	08008001 	.word	0x08008001
 8007f80:	08008001 	.word	0x08008001
 8007f84:	08008001 	.word	0x08008001
 8007f88:	08008001 	.word	0x08008001
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08008001 	.word	0x08008001
 8007f94:	08008001 	.word	0x08008001
 8007f98:	08008001 	.word	0x08008001
 8007f9c:	08008001 	.word	0x08008001
 8007fa0:	08008001 	.word	0x08008001
 8007fa4:	08008001 	.word	0x08008001
 8007fa8:	08008001 	.word	0x08008001
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08008001 	.word	0x08008001
 8007fb4:	08008001 	.word	0x08008001
 8007fb8:	08008001 	.word	0x08008001
 8007fbc:	08008001 	.word	0x08008001
 8007fc0:	08008001 	.word	0x08008001
 8007fc4:	08008001 	.word	0x08008001
 8007fc8:	08008001 	.word	0x08008001
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e0bc      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e0b8      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e0b4      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e0b0      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff6:	e0ac      	b.n	8008152 <UART_SetConfig+0x5a6>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffe:	e0a8      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e0a4      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a8f      	ldr	r2, [pc, #572]	; (800824c <UART_SetConfig+0x6a0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d130      	bne.n	8008074 <UART_SetConfig+0x4c8>
 8008012:	4b8d      	ldr	r3, [pc, #564]	; (8008248 <UART_SetConfig+0x69c>)
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b05      	cmp	r3, #5
 800801c:	d826      	bhi.n	800806c <UART_SetConfig+0x4c0>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0x478>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	0800803d 	.word	0x0800803d
 8008028:	08008045 	.word	0x08008045
 800802c:	0800804d 	.word	0x0800804d
 8008030:	08008055 	.word	0x08008055
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008065 	.word	0x08008065
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e086      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008044:	2304      	movs	r3, #4
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e082      	b.n	8008152 <UART_SetConfig+0x5a6>
 800804c:	2308      	movs	r3, #8
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e07e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008054:	2310      	movs	r3, #16
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e07a      	b.n	8008152 <UART_SetConfig+0x5a6>
 800805c:	2320      	movs	r3, #32
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e076      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806a:	e072      	b.n	8008152 <UART_SetConfig+0x5a6>
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e06e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a75      	ldr	r2, [pc, #468]	; (8008250 <UART_SetConfig+0x6a4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d130      	bne.n	80080e0 <UART_SetConfig+0x534>
 800807e:	4b72      	ldr	r3, [pc, #456]	; (8008248 <UART_SetConfig+0x69c>)
 8008080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b05      	cmp	r3, #5
 8008088:	d826      	bhi.n	80080d8 <UART_SetConfig+0x52c>
 800808a:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0x4e4>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	080080a9 	.word	0x080080a9
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b9 	.word	0x080080b9
 800809c:	080080c1 	.word	0x080080c1
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e050      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e04c      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e048      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e044      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080c8:	2320      	movs	r3, #32
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e040      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e03c      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080d8:	2380      	movs	r3, #128	; 0x80
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e038      	b.n	8008152 <UART_SetConfig+0x5a6>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a5b      	ldr	r2, [pc, #364]	; (8008254 <UART_SetConfig+0x6a8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d130      	bne.n	800814c <UART_SetConfig+0x5a0>
 80080ea:	4b57      	ldr	r3, [pc, #348]	; (8008248 <UART_SetConfig+0x69c>)
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b05      	cmp	r3, #5
 80080f4:	d826      	bhi.n	8008144 <UART_SetConfig+0x598>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <UART_SetConfig+0x550>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	08008115 	.word	0x08008115
 8008100:	0800811d 	.word	0x0800811d
 8008104:	08008125 	.word	0x08008125
 8008108:	0800812d 	.word	0x0800812d
 800810c:	08008135 	.word	0x08008135
 8008110:	0800813d 	.word	0x0800813d
 8008114:	2302      	movs	r3, #2
 8008116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811a:	e01a      	b.n	8008152 <UART_SetConfig+0x5a6>
 800811c:	2304      	movs	r3, #4
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008122:	e016      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008124:	2308      	movs	r3, #8
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812a:	e012      	b.n	8008152 <UART_SetConfig+0x5a6>
 800812c:	2310      	movs	r3, #16
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e00e      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008134:	2320      	movs	r3, #32
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e00a      	b.n	8008152 <UART_SetConfig+0x5a6>
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e006      	b.n	8008152 <UART_SetConfig+0x5a6>
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e002      	b.n	8008152 <UART_SetConfig+0x5a6>
 800814c:	2380      	movs	r3, #128	; 0x80
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a3f      	ldr	r2, [pc, #252]	; (8008254 <UART_SetConfig+0x6a8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	f040 80f8 	bne.w	800834e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800815e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008162:	2b20      	cmp	r3, #32
 8008164:	dc46      	bgt.n	80081f4 <UART_SetConfig+0x648>
 8008166:	2b02      	cmp	r3, #2
 8008168:	f2c0 8082 	blt.w	8008270 <UART_SetConfig+0x6c4>
 800816c:	3b02      	subs	r3, #2
 800816e:	2b1e      	cmp	r3, #30
 8008170:	d87e      	bhi.n	8008270 <UART_SetConfig+0x6c4>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x5cc>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	080081fb 	.word	0x080081fb
 800817c:	08008271 	.word	0x08008271
 8008180:	08008203 	.word	0x08008203
 8008184:	08008271 	.word	0x08008271
 8008188:	08008271 	.word	0x08008271
 800818c:	08008271 	.word	0x08008271
 8008190:	08008213 	.word	0x08008213
 8008194:	08008271 	.word	0x08008271
 8008198:	08008271 	.word	0x08008271
 800819c:	08008271 	.word	0x08008271
 80081a0:	08008271 	.word	0x08008271
 80081a4:	08008271 	.word	0x08008271
 80081a8:	08008271 	.word	0x08008271
 80081ac:	08008271 	.word	0x08008271
 80081b0:	08008223 	.word	0x08008223
 80081b4:	08008271 	.word	0x08008271
 80081b8:	08008271 	.word	0x08008271
 80081bc:	08008271 	.word	0x08008271
 80081c0:	08008271 	.word	0x08008271
 80081c4:	08008271 	.word	0x08008271
 80081c8:	08008271 	.word	0x08008271
 80081cc:	08008271 	.word	0x08008271
 80081d0:	08008271 	.word	0x08008271
 80081d4:	08008271 	.word	0x08008271
 80081d8:	08008271 	.word	0x08008271
 80081dc:	08008271 	.word	0x08008271
 80081e0:	08008271 	.word	0x08008271
 80081e4:	08008271 	.word	0x08008271
 80081e8:	08008271 	.word	0x08008271
 80081ec:	08008271 	.word	0x08008271
 80081f0:	08008263 	.word	0x08008263
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d037      	beq.n	8008268 <UART_SetConfig+0x6bc>
 80081f8:	e03a      	b.n	8008270 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081fa:	f7fe faf1 	bl	80067e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80081fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008200:	e03c      	b.n	800827c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fb00 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008210:	e034      	b.n	800827c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008212:	f107 0318 	add.w	r3, r7, #24
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fc4c 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008220:	e02c      	b.n	800827c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <UART_SetConfig+0x69c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <UART_SetConfig+0x69c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	08db      	lsrs	r3, r3, #3
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	4a07      	ldr	r2, [pc, #28]	; (8008258 <UART_SetConfig+0x6ac>)
 800823a:	fa22 f303 	lsr.w	r3, r2, r3
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008240:	e01c      	b.n	800827c <UART_SetConfig+0x6d0>
 8008242:	bf00      	nop
 8008244:	40011400 	.word	0x40011400
 8008248:	58024400 	.word	0x58024400
 800824c:	40007800 	.word	0x40007800
 8008250:	40007c00 	.word	0x40007c00
 8008254:	58000c00 	.word	0x58000c00
 8008258:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800825c:	4b9d      	ldr	r3, [pc, #628]	; (80084d4 <UART_SetConfig+0x928>)
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008260:	e00c      	b.n	800827c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008262:	4b9d      	ldr	r3, [pc, #628]	; (80084d8 <UART_SetConfig+0x92c>)
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008266:	e009      	b.n	800827c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e005      	b.n	800827c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800827a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800827c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 81de 	beq.w	8008640 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	4a94      	ldr	r2, [pc, #592]	; (80084dc <UART_SetConfig+0x930>)
 800828a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828e:	461a      	mov	r2, r3
 8008290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008292:	fbb3 f3f2 	udiv	r3, r3, r2
 8008296:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d305      	bcc.n	80082b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d903      	bls.n	80082bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082ba:	e1c1      	b.n	8008640 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082be:	2200      	movs	r2, #0
 80082c0:	60bb      	str	r3, [r7, #8]
 80082c2:	60fa      	str	r2, [r7, #12]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	4a84      	ldr	r2, [pc, #528]	; (80084dc <UART_SetConfig+0x930>)
 80082ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	2200      	movs	r2, #0
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082de:	f7f8 fa13 	bl	8000708 <__aeabi_uldivmod>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	020b      	lsls	r3, r1, #8
 80082f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082f8:	0202      	lsls	r2, r0, #8
 80082fa:	6979      	ldr	r1, [r7, #20]
 80082fc:	6849      	ldr	r1, [r1, #4]
 80082fe:	0849      	lsrs	r1, r1, #1
 8008300:	2000      	movs	r0, #0
 8008302:	460c      	mov	r4, r1
 8008304:	4605      	mov	r5, r0
 8008306:	eb12 0804 	adds.w	r8, r2, r4
 800830a:	eb43 0905 	adc.w	r9, r3, r5
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	469a      	mov	sl, r3
 8008316:	4693      	mov	fp, r2
 8008318:	4652      	mov	r2, sl
 800831a:	465b      	mov	r3, fp
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 f9f2 	bl	8000708 <__aeabi_uldivmod>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4613      	mov	r3, r2
 800832a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008332:	d308      	bcc.n	8008346 <UART_SetConfig+0x79a>
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800833a:	d204      	bcs.n	8008346 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008342:	60da      	str	r2, [r3, #12]
 8008344:	e17c      	b.n	8008640 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800834c:	e178      	b.n	8008640 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008356:	f040 80c5 	bne.w	80084e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800835a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800835e:	2b20      	cmp	r3, #32
 8008360:	dc48      	bgt.n	80083f4 <UART_SetConfig+0x848>
 8008362:	2b00      	cmp	r3, #0
 8008364:	db7b      	blt.n	800845e <UART_SetConfig+0x8b2>
 8008366:	2b20      	cmp	r3, #32
 8008368:	d879      	bhi.n	800845e <UART_SetConfig+0x8b2>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x7c4>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083fb 	.word	0x080083fb
 8008374:	08008403 	.word	0x08008403
 8008378:	0800845f 	.word	0x0800845f
 800837c:	0800845f 	.word	0x0800845f
 8008380:	0800840b 	.word	0x0800840b
 8008384:	0800845f 	.word	0x0800845f
 8008388:	0800845f 	.word	0x0800845f
 800838c:	0800845f 	.word	0x0800845f
 8008390:	0800841b 	.word	0x0800841b
 8008394:	0800845f 	.word	0x0800845f
 8008398:	0800845f 	.word	0x0800845f
 800839c:	0800845f 	.word	0x0800845f
 80083a0:	0800845f 	.word	0x0800845f
 80083a4:	0800845f 	.word	0x0800845f
 80083a8:	0800845f 	.word	0x0800845f
 80083ac:	0800845f 	.word	0x0800845f
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	0800845f 	.word	0x0800845f
 80083b8:	0800845f 	.word	0x0800845f
 80083bc:	0800845f 	.word	0x0800845f
 80083c0:	0800845f 	.word	0x0800845f
 80083c4:	0800845f 	.word	0x0800845f
 80083c8:	0800845f 	.word	0x0800845f
 80083cc:	0800845f 	.word	0x0800845f
 80083d0:	0800845f 	.word	0x0800845f
 80083d4:	0800845f 	.word	0x0800845f
 80083d8:	0800845f 	.word	0x0800845f
 80083dc:	0800845f 	.word	0x0800845f
 80083e0:	0800845f 	.word	0x0800845f
 80083e4:	0800845f 	.word	0x0800845f
 80083e8:	0800845f 	.word	0x0800845f
 80083ec:	0800845f 	.word	0x0800845f
 80083f0:	08008451 	.word	0x08008451
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d02e      	beq.n	8008456 <UART_SetConfig+0x8aa>
 80083f8:	e031      	b.n	800845e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fa:	f7fd fa7f 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80083fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008400:	e033      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008402:	f7fd fa91 	bl	8005928 <HAL_RCC_GetPCLK2Freq>
 8008406:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008408:	e02f      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe f9fc 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008418:	e027      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841a:	f107 0318 	add.w	r3, r7, #24
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fb48 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008428:	e01f      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800842a:	4b2d      	ldr	r3, [pc, #180]	; (80084e0 <UART_SetConfig+0x934>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008436:	4b2a      	ldr	r3, [pc, #168]	; (80084e0 <UART_SetConfig+0x934>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	08db      	lsrs	r3, r3, #3
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	4a24      	ldr	r2, [pc, #144]	; (80084d4 <UART_SetConfig+0x928>)
 8008442:	fa22 f303 	lsr.w	r3, r2, r3
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008448:	e00f      	b.n	800846a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800844a:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <UART_SetConfig+0x928>)
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844e:	e00c      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008450:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <UART_SetConfig+0x92c>)
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008454:	e009      	b.n	800846a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845c:	e005      	b.n	800846a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80e7 	beq.w	8008640 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	4a19      	ldr	r2, [pc, #100]	; (80084dc <UART_SetConfig+0x930>)
 8008478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800847c:	461a      	mov	r2, r3
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	fbb3 f3f2 	udiv	r3, r3, r2
 8008484:	005a      	lsls	r2, r3, #1
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	441a      	add	r2, r3
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	2b0f      	cmp	r3, #15
 800849c:	d916      	bls.n	80084cc <UART_SetConfig+0x920>
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a4:	d212      	bcs.n	80084cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f023 030f 	bic.w	r3, r3, #15
 80084ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084be:	4313      	orrs	r3, r2
 80084c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084c8:	60da      	str	r2, [r3, #12]
 80084ca:	e0b9      	b.n	8008640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084d2:	e0b5      	b.n	8008640 <UART_SetConfig+0xa94>
 80084d4:	03d09000 	.word	0x03d09000
 80084d8:	003d0900 	.word	0x003d0900
 80084dc:	0800fc70 	.word	0x0800fc70
 80084e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80084e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	dc49      	bgt.n	8008580 <UART_SetConfig+0x9d4>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	db7c      	blt.n	80085ea <UART_SetConfig+0xa3e>
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d87a      	bhi.n	80085ea <UART_SetConfig+0xa3e>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <UART_SetConfig+0x950>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008587 	.word	0x08008587
 8008500:	0800858f 	.word	0x0800858f
 8008504:	080085eb 	.word	0x080085eb
 8008508:	080085eb 	.word	0x080085eb
 800850c:	08008597 	.word	0x08008597
 8008510:	080085eb 	.word	0x080085eb
 8008514:	080085eb 	.word	0x080085eb
 8008518:	080085eb 	.word	0x080085eb
 800851c:	080085a7 	.word	0x080085a7
 8008520:	080085eb 	.word	0x080085eb
 8008524:	080085eb 	.word	0x080085eb
 8008528:	080085eb 	.word	0x080085eb
 800852c:	080085eb 	.word	0x080085eb
 8008530:	080085eb 	.word	0x080085eb
 8008534:	080085eb 	.word	0x080085eb
 8008538:	080085eb 	.word	0x080085eb
 800853c:	080085b7 	.word	0x080085b7
 8008540:	080085eb 	.word	0x080085eb
 8008544:	080085eb 	.word	0x080085eb
 8008548:	080085eb 	.word	0x080085eb
 800854c:	080085eb 	.word	0x080085eb
 8008550:	080085eb 	.word	0x080085eb
 8008554:	080085eb 	.word	0x080085eb
 8008558:	080085eb 	.word	0x080085eb
 800855c:	080085eb 	.word	0x080085eb
 8008560:	080085eb 	.word	0x080085eb
 8008564:	080085eb 	.word	0x080085eb
 8008568:	080085eb 	.word	0x080085eb
 800856c:	080085eb 	.word	0x080085eb
 8008570:	080085eb 	.word	0x080085eb
 8008574:	080085eb 	.word	0x080085eb
 8008578:	080085eb 	.word	0x080085eb
 800857c:	080085dd 	.word	0x080085dd
 8008580:	2b40      	cmp	r3, #64	; 0x40
 8008582:	d02e      	beq.n	80085e2 <UART_SetConfig+0xa36>
 8008584:	e031      	b.n	80085ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008586:	f7fd f9b9 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 800858a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800858c:	e033      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858e:	f7fd f9cb 	bl	8005928 <HAL_RCC_GetPCLK2Freq>
 8008592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008594:	e02f      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe f936 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a4:	e027      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fa82 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	e01f      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b6:	4b2d      	ldr	r3, [pc, #180]	; (800866c <UART_SetConfig+0xac0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085c2:	4b2a      	ldr	r3, [pc, #168]	; (800866c <UART_SetConfig+0xac0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	08db      	lsrs	r3, r3, #3
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	4a28      	ldr	r2, [pc, #160]	; (8008670 <UART_SetConfig+0xac4>)
 80085ce:	fa22 f303 	lsr.w	r3, r2, r3
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085d4:	e00f      	b.n	80085f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80085d6:	4b26      	ldr	r3, [pc, #152]	; (8008670 <UART_SetConfig+0xac4>)
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085da:	e00c      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085dc:	4b25      	ldr	r3, [pc, #148]	; (8008674 <UART_SetConfig+0xac8>)
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e0:	e009      	b.n	80085f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e8:	e005      	b.n	80085f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085f4:	bf00      	nop
    }

    if (pclk != 0U)
 80085f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d021      	beq.n	8008640 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <UART_SetConfig+0xacc>)
 8008602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008606:	461a      	mov	r2, r3
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	fbb3 f2f2 	udiv	r2, r3, r2
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	441a      	add	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	fbb2 f3f3 	udiv	r3, r2, r3
 800861e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	2b0f      	cmp	r3, #15
 8008624:	d909      	bls.n	800863a <UART_SetConfig+0xa8e>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800862c:	d205      	bcs.n	800863a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	b29a      	uxth	r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60da      	str	r2, [r3, #12]
 8008638:	e002      	b.n	8008640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2201      	movs	r2, #1
 8008644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2201      	movs	r2, #1
 800864c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2200      	movs	r2, #0
 8008654:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2200      	movs	r2, #0
 800865a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800865c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008660:	4618      	mov	r0, r3
 8008662:	3748      	adds	r7, #72	; 0x48
 8008664:	46bd      	mov	sp, r7
 8008666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800866a:	bf00      	nop
 800866c:	58024400 	.word	0x58024400
 8008670:	03d09000 	.word	0x03d09000
 8008674:	003d0900 	.word	0x003d0900
 8008678:	0800fc70 	.word	0x0800fc70

0800867c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00a      	beq.n	800872e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01a      	beq.n	8008792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877a:	d10a      	bne.n	8008792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	605a      	str	r2, [r3, #4]
  }
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087d0:	f7fa f84a 	bl	8002868 <HAL_GetTick>
 80087d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d10e      	bne.n	8008802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f82f 	bl	8008856 <UART_WaitOnFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e025      	b.n	800884e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b04      	cmp	r3, #4
 800880e:	d10e      	bne.n	800882e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f819 	bl	8008856 <UART_WaitOnFlagUntilTimeout>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e00f      	b.n	800884e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b09c      	sub	sp, #112	; 0x70
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008866:	e0a9      	b.n	80089bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886e:	f000 80a5 	beq.w	80089bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7f9 fff9 	bl	8002868 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <UART_WaitOnFlagUntilTimeout+0x32>
 8008882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008884:	2b00      	cmp	r3, #0
 8008886:	d140      	bne.n	800890a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800889c:	667b      	str	r3, [r7, #100]	; 0x64
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e6      	bne.n	8008888 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3308      	adds	r3, #8
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	663b      	str	r3, [r7, #96]	; 0x60
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088da:	64ba      	str	r2, [r7, #72]	; 0x48
 80088dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e5      	bne.n	80088ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e069      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d051      	beq.n	80089bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008926:	d149      	bne.n	80089bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008930:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
 8008952:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3308      	adds	r3, #8
 800896a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	613b      	str	r3, [r7, #16]
   return(result);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	66bb      	str	r3, [r7, #104]	; 0x68
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008984:	623a      	str	r2, [r7, #32]
 8008986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	69f9      	ldr	r1, [r7, #28]
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	61bb      	str	r3, [r7, #24]
   return(result);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e5      	bne.n	8008964 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e010      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69da      	ldr	r2, [r3, #28]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4013      	ands	r3, r2
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	461a      	mov	r2, r3
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	f43f af46 	beq.w	8008868 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3770      	adds	r7, #112	; 0x70
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b0a3      	sub	sp, #140	; 0x8c
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	88fa      	ldrh	r2, [r7, #6]
 8008a08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1a:	d10e      	bne.n	8008a3a <UART_Start_Receive_IT+0x52>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <UART_Start_Receive_IT+0x48>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a2e:	e02d      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	22ff      	movs	r2, #255	; 0xff
 8008a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a38:	e028      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10d      	bne.n	8008a5e <UART_Start_Receive_IT+0x76>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d104      	bne.n	8008a54 <UART_Start_Receive_IT+0x6c>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	22ff      	movs	r2, #255	; 0xff
 8008a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a52:	e01b      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	227f      	movs	r2, #127	; 0x7f
 8008a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a5c:	e016      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a66:	d10d      	bne.n	8008a84 <UART_Start_Receive_IT+0x9c>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <UART_Start_Receive_IT+0x92>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	227f      	movs	r2, #127	; 0x7f
 8008a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a78:	e008      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	223f      	movs	r2, #63	; 0x3f
 8008a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a82:	e003      	b.n	8008a8c <UART_Start_Receive_IT+0xa4>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2222      	movs	r2, #34	; 0x22
 8008a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ac0:	673a      	str	r2, [r7, #112]	; 0x70
 8008ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ac6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e3      	bne.n	8008a9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008adc:	d153      	bne.n	8008b86 <UART_Start_Receive_IT+0x19e>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ae4:	88fa      	ldrh	r2, [r7, #6]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d34d      	bcc.n	8008b86 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d107      	bne.n	8008b04 <UART_Start_Receive_IT+0x11c>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a4b      	ldr	r2, [pc, #300]	; (8008c2c <UART_Start_Receive_IT+0x244>)
 8008b00:	671a      	str	r2, [r3, #112]	; 0x70
 8008b02:	e002      	b.n	8008b0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <UART_Start_Receive_IT+0x248>)
 8008b08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d01a      	beq.n	8008b50 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e4      	bne.n	8008b1a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b70:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e5      	bne.n	8008b50 <UART_Start_Receive_IT+0x168>
 8008b84:	e04a      	b.n	8008c1c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8e:	d107      	bne.n	8008ba0 <UART_Start_Receive_IT+0x1b8>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4a26      	ldr	r2, [pc, #152]	; (8008c34 <UART_Start_Receive_IT+0x24c>)
 8008b9c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b9e:	e002      	b.n	8008ba6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <UART_Start_Receive_IT+0x250>)
 8008ba4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d019      	beq.n	8008bea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008bca:	677b      	str	r3, [r7, #116]	; 0x74
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_Start_Receive_IT+0x1ce>
 8008be8:	e018      	b.n	8008c1c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f043 0320 	orr.w	r3, r3, #32
 8008bfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c08:	623b      	str	r3, [r7, #32]
 8008c0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	69f9      	ldr	r1, [r7, #28]
 8008c0e:	6a3a      	ldr	r2, [r7, #32]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	378c      	adds	r7, #140	; 0x8c
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	08009345 	.word	0x08009345
 8008c30:	0800904d 	.word	0x0800904d
 8008c34:	08008eeb 	.word	0x08008eeb
 8008c38:	08008d8b 	.word	0x08008d8b

08008c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b095      	sub	sp, #84	; 0x54
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c62:	643b      	str	r3, [r7, #64]	; 0x40
 8008c64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	4b1e      	ldr	r3, [pc, #120]	; (8008d04 <UART_EndRxTransfer+0xc8>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d118      	bne.n	8008ce4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f023 0310 	bic.w	r3, r3, #16
 8008cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd0:	61bb      	str	r3, [r7, #24]
 8008cd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6979      	ldr	r1, [r7, #20]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e6      	bne.n	8008cb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008cf8:	bf00      	nop
 8008cfa:	3754      	adds	r7, #84	; 0x54
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	effffffe 	.word	0xeffffffe

08008d08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7fe ff2a 	bl	8007b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d50:	61fb      	str	r3, [r7, #28]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6979      	ldr	r1, [r7, #20]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	613b      	str	r3, [r7, #16]
   return(result);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e6      	bne.n	8008d3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7f9 f923 	bl	8001fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d82:	bf00      	nop
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b096      	sub	sp, #88	; 0x58
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	2b22      	cmp	r3, #34	; 0x22
 8008da4:	f040 8095 	bne.w	8008ed2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008db2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008db6:	b2d9      	uxtb	r1, r3
 8008db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc2:	400a      	ands	r2, r1
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d178      	bne.n	8008ee2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e04:	653b      	str	r3, [r7, #80]	; 0x50
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e6      	bne.n	8008df0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	623b      	str	r3, [r7, #32]
   return(result);
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e42:	633a      	str	r2, [r7, #48]	; 0x30
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d12e      	bne.n	8008eca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0310 	bic.w	r3, r3, #16
 8008e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	69b9      	ldr	r1, [r7, #24]
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d103      	bne.n	8008eba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2210      	movs	r2, #16
 8008eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe fe66 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec8:	e00b      	b.n	8008ee2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7f8 ffa0 	bl	8001e10 <HAL_UART_RxCpltCallback>
}
 8008ed0:	e007      	b.n	8008ee2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0208 	orr.w	r2, r2, #8
 8008ee0:	619a      	str	r2, [r3, #24]
}
 8008ee2:	bf00      	nop
 8008ee4:	3758      	adds	r7, #88	; 0x58
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b096      	sub	sp, #88	; 0x58
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ef8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f02:	2b22      	cmp	r3, #34	; 0x22
 8008f04:	f040 8095 	bne.w	8009032 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008f1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f20:	4013      	ands	r3, r2
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2c:	1c9a      	adds	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d178      	bne.n	8009042 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e6      	bne.n	8008f50 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	f023 0301 	bic.w	r3, r3, #1
 8008f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e5      	bne.n	8008f82 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d12e      	bne.n	800902a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f023 0310 	bic.w	r3, r3, #16
 8008fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e6      	bne.n	8008fd2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b10      	cmp	r3, #16
 8009010:	d103      	bne.n	800901a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2210      	movs	r2, #16
 8009018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fe fdb6 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009028:	e00b      	b.n	8009042 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7f8 fef0 	bl	8001e10 <HAL_UART_RxCpltCallback>
}
 8009030:	e007      	b.n	8009042 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0208 	orr.w	r2, r2, #8
 8009040:	619a      	str	r2, [r3, #24]
}
 8009042:	bf00      	nop
 8009044:	3758      	adds	r7, #88	; 0x58
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b0a6      	sub	sp, #152	; 0x98
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800905a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009082:	2b22      	cmp	r3, #34	; 0x22
 8009084:	f040 814d 	bne.w	8009322 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800908e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009092:	e0f4      	b.n	800927e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800909e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80090a2:	b2d9      	uxtb	r1, r3
 80090a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ae:	400a      	ands	r2, r1
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d053      	beq.n	800918e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d011      	beq.n	8009116 <UART_RxISR_8BIT_FIFOEN+0xca>
 80090f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00b      	beq.n	8009116 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2201      	movs	r2, #1
 8009104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800910c:	f043 0201 	orr.w	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d011      	beq.n	8009146 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2202      	movs	r2, #2
 8009134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800913c:	f043 0204 	orr.w	r2, r3, #4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d011      	beq.n	8009176 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2204      	movs	r2, #4
 8009164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800916c:	f043 0202 	orr.w	r2, r3, #2
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d006      	beq.n	800918e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7fe fcfd 	bl	8007b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d171      	bne.n	800927e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80091a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80091be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80091c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80091ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e4      	bne.n	800919a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3308      	adds	r3, #8
 80091d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80091e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e2:	4b56      	ldr	r3, [pc, #344]	; (800933c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3308      	adds	r3, #8
 80091ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091f0:	657a      	str	r2, [r7, #84]	; 0x54
 80091f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d12e      	bne.n	8009278 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	f023 0310 	bic.w	r3, r3, #16
 8009234:	67bb      	str	r3, [r7, #120]	; 0x78
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800923e:	643b      	str	r3, [r7, #64]	; 0x40
 8009240:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e6      	bne.n	8009220 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b10      	cmp	r3, #16
 800925e:	d103      	bne.n	8009268 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2210      	movs	r2, #16
 8009266:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fe fc8f 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
 8009276:	e002      	b.n	800927e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7f8 fdc9 	bl	8001e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800927e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009282:	2b00      	cmp	r3, #0
 8009284:	d006      	beq.n	8009294 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009286:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	f47f af00 	bne.w	8009094 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800929a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800929e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d045      	beq.n	8009332 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d23e      	bcs.n	8009332 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3308      	adds	r3, #8
 80092ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ca:	673b      	str	r3, [r7, #112]	; 0x70
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e5      	bne.n	80092b4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a15      	ldr	r2, [pc, #84]	; (8009340 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80092ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f043 0320 	orr.w	r3, r3, #32
 8009302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6979      	ldr	r1, [r7, #20]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	613b      	str	r3, [r7, #16]
   return(result);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e6      	bne.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009320:	e007      	b.n	8009332 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0208 	orr.w	r2, r2, #8
 8009330:	619a      	str	r2, [r3, #24]
}
 8009332:	bf00      	nop
 8009334:	3798      	adds	r7, #152	; 0x98
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	effffffe 	.word	0xeffffffe
 8009340:	08008d8b 	.word	0x08008d8b

08009344 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b0a8      	sub	sp, #160	; 0xa0
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009352:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800937a:	2b22      	cmp	r3, #34	; 0x22
 800937c:	f040 8151 	bne.w	8009622 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009386:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800938a:	e0f8      	b.n	800957e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800939e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80093a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80093a6:	4013      	ands	r3, r2
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b4:	1c9a      	adds	r2, r3, #2
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d053      	beq.n	800948a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <UART_RxISR_16BIT_FIFOEN+0xce>
 80093ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2201      	movs	r2, #1
 8009400:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009408:	f043 0201 	orr.w	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d011      	beq.n	8009442 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800941e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2202      	movs	r2, #2
 8009430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009438:	f043 0204 	orr.w	r2, r3, #4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	2b00      	cmp	r3, #0
 800944c:	d011      	beq.n	8009472 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800944e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00b      	beq.n	8009472 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2204      	movs	r2, #4
 8009460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009468:	f043 0202 	orr.w	r2, r3, #2
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7fe fb7f 	bl	8007b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d173      	bne.n	800957e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e4      	bne.n	8009496 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094de:	4b57      	ldr	r3, [pc, #348]	; (800963c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80094f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e3      	bne.n	80094cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009516:	2b01      	cmp	r3, #1
 8009518:	d12e      	bne.n	8009578 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	f023 0310 	bic.w	r3, r3, #16
 8009534:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800953e:	647b      	str	r3, [r7, #68]	; 0x44
 8009540:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800954c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b10      	cmp	r3, #16
 800955e:	d103      	bne.n	8009568 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2210      	movs	r2, #16
 8009566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fe fb0f 	bl	8007b94 <HAL_UARTEx_RxEventCallback>
 8009576:	e002      	b.n	800957e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7f8 fc49 	bl	8001e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800957e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009582:	2b00      	cmp	r3, #0
 8009584:	d006      	beq.n	8009594 <UART_RxISR_16BIT_FIFOEN+0x250>
 8009586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	f47f aefc 	bne.w	800938c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800959a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800959e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d045      	beq.n	8009632 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095ac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d23e      	bcs.n	8009632 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	623b      	str	r3, [r7, #32]
   return(result);
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ca:	677b      	str	r3, [r7, #116]	; 0x74
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80095d4:	633a      	str	r2, [r7, #48]	; 0x30
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e5      	bne.n	80095b4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a15      	ldr	r2, [pc, #84]	; (8009640 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80095ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f043 0320 	orr.w	r3, r3, #32
 8009602:	673b      	str	r3, [r7, #112]	; 0x70
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	69b9      	ldr	r1, [r7, #24]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	617b      	str	r3, [r7, #20]
   return(result);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009620:	e007      	b.n	8009632 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	699a      	ldr	r2, [r3, #24]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f042 0208 	orr.w	r2, r2, #8
 8009630:	619a      	str	r2, [r3, #24]
}
 8009632:	bf00      	nop
 8009634:	37a0      	adds	r7, #160	; 0xa0
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	effffffe 	.word	0xeffffffe
 8009640:	08008eeb 	.word	0x08008eeb

08009644 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_UARTEx_DisableFifoMode+0x16>
 8009692:	2302      	movs	r3, #2
 8009694:	e027      	b.n	80096e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	; 0x24
 80096a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f022 0201 	bic.w	r2, r2, #1
 80096bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009706:	2302      	movs	r3, #2
 8009708:	e02d      	b.n	8009766 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2224      	movs	r2, #36	; 0x24
 8009716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0201 	bic.w	r2, r2, #1
 8009730:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f850 	bl	80097ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009782:	2302      	movs	r3, #2
 8009784:	e02d      	b.n	80097e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2224      	movs	r2, #36	; 0x24
 8009792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f812 	bl	80097ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800980c:	e031      	b.n	8009872 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800980e:	2310      	movs	r3, #16
 8009810:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009812:	2310      	movs	r3, #16
 8009814:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	0e5b      	lsrs	r3, r3, #25
 800981e:	b2db      	uxtb	r3, r3
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	0f5b      	lsrs	r3, r3, #29
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	7b3a      	ldrb	r2, [r7, #12]
 800983a:	4911      	ldr	r1, [pc, #68]	; (8009880 <UARTEx_SetNbDataToProcess+0x94>)
 800983c:	5c8a      	ldrb	r2, [r1, r2]
 800983e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009842:	7b3a      	ldrb	r2, [r7, #12]
 8009844:	490f      	ldr	r1, [pc, #60]	; (8009884 <UARTEx_SetNbDataToProcess+0x98>)
 8009846:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009848:	fb93 f3f2 	sdiv	r3, r3, r2
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	7b7a      	ldrb	r2, [r7, #13]
 8009858:	4909      	ldr	r1, [pc, #36]	; (8009880 <UARTEx_SetNbDataToProcess+0x94>)
 800985a:	5c8a      	ldrb	r2, [r1, r2]
 800985c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009860:	7b7a      	ldrb	r2, [r7, #13]
 8009862:	4908      	ldr	r1, [pc, #32]	; (8009884 <UARTEx_SetNbDataToProcess+0x98>)
 8009864:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009866:	fb93 f3f2 	sdiv	r3, r3, r2
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	0800fc88 	.word	0x0800fc88
 8009884:	0800fc90 	.word	0x0800fc90

08009888 <cos>:
 8009888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800988a:	eeb0 7b40 	vmov.f64	d7, d0
 800988e:	ee17 3a90 	vmov	r3, s15
 8009892:	4a21      	ldr	r2, [pc, #132]	; (8009918 <cos+0x90>)
 8009894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009898:	4293      	cmp	r3, r2
 800989a:	dc06      	bgt.n	80098aa <cos+0x22>
 800989c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8009910 <cos+0x88>
 80098a0:	b005      	add	sp, #20
 80098a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a6:	f000 bc13 	b.w	800a0d0 <__kernel_cos>
 80098aa:	4a1c      	ldr	r2, [pc, #112]	; (800991c <cos+0x94>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	dd04      	ble.n	80098ba <cos+0x32>
 80098b0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80098b4:	b005      	add	sp, #20
 80098b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80098ba:	4668      	mov	r0, sp
 80098bc:	f000 fac0 	bl	8009e40 <__ieee754_rem_pio2>
 80098c0:	f000 0003 	and.w	r0, r0, #3
 80098c4:	2801      	cmp	r0, #1
 80098c6:	d009      	beq.n	80098dc <cos+0x54>
 80098c8:	2802      	cmp	r0, #2
 80098ca:	d010      	beq.n	80098ee <cos+0x66>
 80098cc:	b9b0      	cbnz	r0, 80098fc <cos+0x74>
 80098ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098d2:	ed9d 0b00 	vldr	d0, [sp]
 80098d6:	f000 fbfb 	bl	800a0d0 <__kernel_cos>
 80098da:	e7eb      	b.n	80098b4 <cos+0x2c>
 80098dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098e0:	ed9d 0b00 	vldr	d0, [sp]
 80098e4:	f000 fef8 	bl	800a6d8 <__kernel_sin>
 80098e8:	eeb1 0b40 	vneg.f64	d0, d0
 80098ec:	e7e2      	b.n	80098b4 <cos+0x2c>
 80098ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098f2:	ed9d 0b00 	vldr	d0, [sp]
 80098f6:	f000 fbeb 	bl	800a0d0 <__kernel_cos>
 80098fa:	e7f5      	b.n	80098e8 <cos+0x60>
 80098fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009900:	ed9d 0b00 	vldr	d0, [sp]
 8009904:	2001      	movs	r0, #1
 8009906:	f000 fee7 	bl	800a6d8 <__kernel_sin>
 800990a:	e7d3      	b.n	80098b4 <cos+0x2c>
 800990c:	f3af 8000 	nop.w
	...
 8009918:	3fe921fb 	.word	0x3fe921fb
 800991c:	7fefffff 	.word	0x7fefffff

08009920 <sin>:
 8009920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009922:	eeb0 7b40 	vmov.f64	d7, d0
 8009926:	ee17 3a90 	vmov	r3, s15
 800992a:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <sin+0x90>)
 800992c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009930:	4293      	cmp	r3, r2
 8009932:	dc07      	bgt.n	8009944 <sin+0x24>
 8009934:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80099a8 <sin+0x88>
 8009938:	2000      	movs	r0, #0
 800993a:	b005      	add	sp, #20
 800993c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009940:	f000 beca 	b.w	800a6d8 <__kernel_sin>
 8009944:	4a1b      	ldr	r2, [pc, #108]	; (80099b4 <sin+0x94>)
 8009946:	4293      	cmp	r3, r2
 8009948:	dd04      	ble.n	8009954 <sin+0x34>
 800994a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800994e:	b005      	add	sp, #20
 8009950:	f85d fb04 	ldr.w	pc, [sp], #4
 8009954:	4668      	mov	r0, sp
 8009956:	f000 fa73 	bl	8009e40 <__ieee754_rem_pio2>
 800995a:	f000 0003 	and.w	r0, r0, #3
 800995e:	2801      	cmp	r0, #1
 8009960:	d00a      	beq.n	8009978 <sin+0x58>
 8009962:	2802      	cmp	r0, #2
 8009964:	d00f      	beq.n	8009986 <sin+0x66>
 8009966:	b9c0      	cbnz	r0, 800999a <sin+0x7a>
 8009968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800996c:	ed9d 0b00 	vldr	d0, [sp]
 8009970:	2001      	movs	r0, #1
 8009972:	f000 feb1 	bl	800a6d8 <__kernel_sin>
 8009976:	e7ea      	b.n	800994e <sin+0x2e>
 8009978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800997c:	ed9d 0b00 	vldr	d0, [sp]
 8009980:	f000 fba6 	bl	800a0d0 <__kernel_cos>
 8009984:	e7e3      	b.n	800994e <sin+0x2e>
 8009986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800998a:	ed9d 0b00 	vldr	d0, [sp]
 800998e:	2001      	movs	r0, #1
 8009990:	f000 fea2 	bl	800a6d8 <__kernel_sin>
 8009994:	eeb1 0b40 	vneg.f64	d0, d0
 8009998:	e7d9      	b.n	800994e <sin+0x2e>
 800999a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800999e:	ed9d 0b00 	vldr	d0, [sp]
 80099a2:	f000 fb95 	bl	800a0d0 <__kernel_cos>
 80099a6:	e7f5      	b.n	8009994 <sin+0x74>
	...
 80099b0:	3fe921fb 	.word	0x3fe921fb
 80099b4:	7fefffff 	.word	0x7fefffff

080099b8 <acos>:
 80099b8:	b508      	push	{r3, lr}
 80099ba:	ed2d 8b04 	vpush	{d8-d9}
 80099be:	eeb0 8b40 	vmov.f64	d8, d0
 80099c2:	f000 f849 	bl	8009a58 <__ieee754_acos>
 80099c6:	eeb4 8b48 	vcmp.f64	d8, d8
 80099ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ce:	eeb0 9b40 	vmov.f64	d9, d0
 80099d2:	d615      	bvs.n	8009a00 <acos+0x48>
 80099d4:	eeb0 0b48 	vmov.f64	d0, d8
 80099d8:	f000 ffd0 	bl	800a97c <fabs>
 80099dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80099e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	dd0a      	ble.n	8009a00 <acos+0x48>
 80099ea:	f001 f8d7 	bl	800ab9c <__errno>
 80099ee:	ecbd 8b04 	vpop	{d8-d9}
 80099f2:	2321      	movs	r3, #33	; 0x21
 80099f4:	6003      	str	r3, [r0, #0]
 80099f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099fa:	4804      	ldr	r0, [pc, #16]	; (8009a0c <acos+0x54>)
 80099fc:	f001 b83c 	b.w	800aa78 <nan>
 8009a00:	eeb0 0b49 	vmov.f64	d0, d9
 8009a04:	ecbd 8b04 	vpop	{d8-d9}
 8009a08:	bd08      	pop	{r3, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0801033b 	.word	0x0801033b

08009a10 <atan2>:
 8009a10:	f000 b952 	b.w	8009cb8 <__ieee754_atan2>
 8009a14:	0000      	movs	r0, r0
	...

08009a18 <sqrt>:
 8009a18:	b508      	push	{r3, lr}
 8009a1a:	ed2d 8b04 	vpush	{d8-d9}
 8009a1e:	eeb0 8b40 	vmov.f64	d8, d0
 8009a22:	f000 fb51 	bl	800a0c8 <__ieee754_sqrt>
 8009a26:	eeb4 8b48 	vcmp.f64	d8, d8
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	d60c      	bvs.n	8009a4a <sqrt+0x32>
 8009a30:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8009a50 <sqrt+0x38>
 8009a34:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	d505      	bpl.n	8009a4a <sqrt+0x32>
 8009a3e:	f001 f8ad 	bl	800ab9c <__errno>
 8009a42:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009a46:	2321      	movs	r3, #33	; 0x21
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	ecbd 8b04 	vpop	{d8-d9}
 8009a4e:	bd08      	pop	{r3, pc}
	...

08009a58 <__ieee754_acos>:
 8009a58:	b500      	push	{lr}
 8009a5a:	ee10 2a90 	vmov	r2, s1
 8009a5e:	ed2d 8b10 	vpush	{d8-d15}
 8009a62:	4991      	ldr	r1, [pc, #580]	; (8009ca8 <__ieee754_acos+0x250>)
 8009a64:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009a68:	428b      	cmp	r3, r1
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	dd18      	ble.n	8009aa0 <__ieee754_acos+0x48>
 8009a6e:	ee10 1a10 	vmov	r1, s0
 8009a72:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009a76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	d10b      	bne.n	8009a96 <__ieee754_acos+0x3e>
 8009a7e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8009c30 <__ieee754_acos+0x1d8>
 8009a82:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8009c38 <__ieee754_acos+0x1e0>
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	fe30 0b07 	vselgt.f64	d0, d0, d7
 8009a8c:	b007      	add	sp, #28
 8009a8e:	ecbd 8b10 	vpop	{d8-d15}
 8009a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a96:	ee30 8b40 	vsub.f64	d8, d0, d0
 8009a9a:	ee88 0b08 	vdiv.f64	d0, d8, d8
 8009a9e:	e7f5      	b.n	8009a8c <__ieee754_acos+0x34>
 8009aa0:	4982      	ldr	r1, [pc, #520]	; (8009cac <__ieee754_acos+0x254>)
 8009aa2:	428b      	cmp	r3, r1
 8009aa4:	dc3c      	bgt.n	8009b20 <__ieee754_acos+0xc8>
 8009aa6:	4a82      	ldr	r2, [pc, #520]	; (8009cb0 <__ieee754_acos+0x258>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8009c40 <__ieee754_acos+0x1e8>
 8009aae:	f340 80bc 	ble.w	8009c2a <__ieee754_acos+0x1d2>
 8009ab2:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009ab6:	ed9f 4b64 	vldr	d4, [pc, #400]	; 8009c48 <__ieee754_acos+0x1f0>
 8009aba:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8009c50 <__ieee754_acos+0x1f8>
 8009abe:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009ac2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009c58 <__ieee754_acos+0x200>
 8009ac6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8009aca:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8009c60 <__ieee754_acos+0x208>
 8009ace:	eea4 5b06 	vfma.f64	d5, d4, d6
 8009ad2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009c68 <__ieee754_acos+0x210>
 8009ad6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8009ada:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8009c70 <__ieee754_acos+0x218>
 8009ade:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8009c78 <__ieee754_acos+0x220>
 8009ae2:	eea4 5b06 	vfma.f64	d5, d4, d6
 8009ae6:	ee25 5b06 	vmul.f64	d5, d5, d6
 8009aea:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009c80 <__ieee754_acos+0x228>
 8009aee:	eea6 3b04 	vfma.f64	d3, d6, d4
 8009af2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009c88 <__ieee754_acos+0x230>
 8009af6:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8009c90 <__ieee754_acos+0x238>
 8009afa:	eea3 4b06 	vfma.f64	d4, d3, d6
 8009afe:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8009c98 <__ieee754_acos+0x240>
 8009b02:	eea4 3b06 	vfma.f64	d3, d4, d6
 8009b06:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009b0a:	eea3 4b06 	vfma.f64	d4, d3, d6
 8009b0e:	ee85 6b04 	vdiv.f64	d6, d5, d4
 8009b12:	eea0 8b46 	vfms.f64	d8, d0, d6
 8009b16:	ee30 0b48 	vsub.f64	d0, d0, d8
 8009b1a:	ee37 0b40 	vsub.f64	d0, d7, d0
 8009b1e:	e7b5      	b.n	8009a8c <__ieee754_acos+0x34>
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	ed9f eb49 	vldr	d14, [pc, #292]	; 8009c48 <__ieee754_acos+0x1f0>
 8009b26:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8009b2a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009b2e:	ed9f db48 	vldr	d13, [pc, #288]	; 8009c50 <__ieee754_acos+0x1f8>
 8009b32:	ed9f cb49 	vldr	d12, [pc, #292]	; 8009c58 <__ieee754_acos+0x200>
 8009b36:	ed9f bb4a 	vldr	d11, [pc, #296]	; 8009c60 <__ieee754_acos+0x208>
 8009b3a:	ed9f ab4b 	vldr	d10, [pc, #300]	; 8009c68 <__ieee754_acos+0x210>
 8009b3e:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8009c70 <__ieee754_acos+0x218>
 8009b42:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009c78 <__ieee754_acos+0x220>
 8009b46:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8009c88 <__ieee754_acos+0x230>
 8009b4a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8009c98 <__ieee754_acos+0x240>
 8009b4e:	da2a      	bge.n	8009ba6 <__ieee754_acos+0x14e>
 8009b50:	ee30 0b09 	vadd.f64	d0, d0, d9
 8009b54:	ee20 0b08 	vmul.f64	d0, d0, d8
 8009b58:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8009c80 <__ieee754_acos+0x228>
 8009b5c:	eea0 db0e 	vfma.f64	d13, d0, d14
 8009b60:	eead cb00 	vfma.f64	d12, d13, d0
 8009b64:	eea0 3b07 	vfma.f64	d3, d0, d7
 8009b68:	eeac bb00 	vfma.f64	d11, d12, d0
 8009b6c:	eea3 2b00 	vfma.f64	d2, d3, d0
 8009b70:	eeab ab00 	vfma.f64	d10, d11, d0
 8009b74:	eea2 1b00 	vfma.f64	d1, d2, d0
 8009b78:	eeaa fb00 	vfma.f64	d15, d10, d0
 8009b7c:	eea1 9b00 	vfma.f64	d9, d1, d0
 8009b80:	ee2f fb00 	vmul.f64	d15, d15, d0
 8009b84:	f000 faa0 	bl	800a0c8 <__ieee754_sqrt>
 8009b88:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 8009b8c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8009ca0 <__ieee754_acos+0x248>
 8009b90:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009b94:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009b98:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8009c38 <__ieee754_acos+0x1e0>
 8009b9c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8009ba0:	eea7 0b46 	vfms.f64	d0, d7, d6
 8009ba4:	e772      	b.n	8009a8c <__ieee754_acos+0x34>
 8009ba6:	ee39 0b40 	vsub.f64	d0, d9, d0
 8009baa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009bae:	eeb0 0b48 	vmov.f64	d0, d8
 8009bb2:	ed8d 1b04 	vstr	d1, [sp, #16]
 8009bb6:	ed8d 2b02 	vstr	d2, [sp, #8]
 8009bba:	ed8d 3b00 	vstr	d3, [sp]
 8009bbe:	f000 fa83 	bl	800a0c8 <__ieee754_sqrt>
 8009bc2:	eeb0 5b48 	vmov.f64	d5, d8
 8009bc6:	eea8 db0e 	vfma.f64	d13, d8, d14
 8009bca:	ec53 2b10 	vmov	r2, r3, d0
 8009bce:	eead cb08 	vfma.f64	d12, d13, d8
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	ec43 2b17 	vmov	d7, r2, r3
 8009bd8:	eeac bb08 	vfma.f64	d11, d12, d8
 8009bdc:	ee30 6b07 	vadd.f64	d6, d0, d7
 8009be0:	eea7 5b47 	vfms.f64	d5, d7, d7
 8009be4:	ed9d 3b00 	vldr	d3, [sp]
 8009be8:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8009bec:	eeab ab08 	vfma.f64	d10, d11, d8
 8009bf0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8009c80 <__ieee754_acos+0x228>
 8009bf4:	eeaa fb08 	vfma.f64	d15, d10, d8
 8009bf8:	ee2f fb08 	vmul.f64	d15, d15, d8
 8009bfc:	ed9d 2b02 	vldr	d2, [sp, #8]
 8009c00:	eea8 3b06 	vfma.f64	d3, d8, d6
 8009c04:	eeb0 6b44 	vmov.f64	d6, d4
 8009c08:	ed9d 1b04 	vldr	d1, [sp, #16]
 8009c0c:	eea3 2b08 	vfma.f64	d2, d3, d8
 8009c10:	eea2 1b08 	vfma.f64	d1, d2, d8
 8009c14:	eea1 9b08 	vfma.f64	d9, d1, d8
 8009c18:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 8009c1c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8009c20:	ee37 0b06 	vadd.f64	d0, d7, d6
 8009c24:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009c28:	e730      	b.n	8009a8c <__ieee754_acos+0x34>
 8009c2a:	eeb0 0b47 	vmov.f64	d0, d7
 8009c2e:	e72d      	b.n	8009a8c <__ieee754_acos+0x34>
	...
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	400921fb 	.word	0x400921fb
 8009c40:	54442d18 	.word	0x54442d18
 8009c44:	3ff921fb 	.word	0x3ff921fb
 8009c48:	0dfdf709 	.word	0x0dfdf709
 8009c4c:	3f023de1 	.word	0x3f023de1
 8009c50:	7501b288 	.word	0x7501b288
 8009c54:	3f49efe0 	.word	0x3f49efe0
 8009c58:	b5688f3b 	.word	0xb5688f3b
 8009c5c:	bfa48228 	.word	0xbfa48228
 8009c60:	0e884455 	.word	0x0e884455
 8009c64:	3fc9c155 	.word	0x3fc9c155
 8009c68:	03eb6f7d 	.word	0x03eb6f7d
 8009c6c:	bfd4d612 	.word	0xbfd4d612
 8009c70:	55555555 	.word	0x55555555
 8009c74:	3fc55555 	.word	0x3fc55555
 8009c78:	1b8d0159 	.word	0x1b8d0159
 8009c7c:	bfe6066c 	.word	0xbfe6066c
 8009c80:	b12e9282 	.word	0xb12e9282
 8009c84:	3fb3b8c5 	.word	0x3fb3b8c5
 8009c88:	9c598ac8 	.word	0x9c598ac8
 8009c8c:	40002ae5 	.word	0x40002ae5
 8009c90:	33145c07 	.word	0x33145c07
 8009c94:	3c91a626 	.word	0x3c91a626
 8009c98:	1c8a2d4b 	.word	0x1c8a2d4b
 8009c9c:	c0033a27 	.word	0xc0033a27
 8009ca0:	33145c07 	.word	0x33145c07
 8009ca4:	bc91a626 	.word	0xbc91a626
 8009ca8:	3fefffff 	.word	0x3fefffff
 8009cac:	3fdfffff 	.word	0x3fdfffff
 8009cb0:	3c600000 	.word	0x3c600000
 8009cb4:	00000000 	.word	0x00000000

08009cb8 <__ieee754_atan2>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	eeb0 7b40 	vmov.f64	d7, d0
 8009cbe:	ee11 6a10 	vmov	r6, s2
 8009cc2:	ee11 0a90 	vmov	r0, s3
 8009cc6:	4273      	negs	r3, r6
 8009cc8:	4f59      	ldr	r7, [pc, #356]	; (8009e30 <__ieee754_atan2+0x178>)
 8009cca:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009cce:	4333      	orrs	r3, r6
 8009cd0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009cd4:	42bb      	cmp	r3, r7
 8009cd6:	d80d      	bhi.n	8009cf4 <__ieee754_atan2+0x3c>
 8009cd8:	ee10 ca10 	vmov	ip, s0
 8009cdc:	ee17 5a90 	vmov	r5, s15
 8009ce0:	f1cc 0100 	rsb	r1, ip, #0
 8009ce4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ce8:	ea41 010c 	orr.w	r1, r1, ip
 8009cec:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8009cf0:	42b9      	cmp	r1, r7
 8009cf2:	d904      	bls.n	8009cfe <__ieee754_atan2+0x46>
 8009cf4:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfe:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8009d02:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8009d06:	4331      	orrs	r1, r6
 8009d08:	d103      	bne.n	8009d12 <__ieee754_atan2+0x5a>
 8009d0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d0e:	f000 bd3b 	b.w	800a788 <atan>
 8009d12:	1784      	asrs	r4, r0, #30
 8009d14:	f004 0402 	and.w	r4, r4, #2
 8009d18:	ea53 010c 	orrs.w	r1, r3, ip
 8009d1c:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8009d20:	d107      	bne.n	8009d32 <__ieee754_atan2+0x7a>
 8009d22:	2c02      	cmp	r4, #2
 8009d24:	d05d      	beq.n	8009de2 <__ieee754_atan2+0x12a>
 8009d26:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8009df8 <__ieee754_atan2+0x140>
 8009d2a:	2c03      	cmp	r4, #3
 8009d2c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009d30:	e7e2      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009d32:	ea52 0106 	orrs.w	r1, r2, r6
 8009d36:	d107      	bne.n	8009d48 <__ieee754_atan2+0x90>
 8009d38:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009e00 <__ieee754_atan2+0x148>
 8009d3c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8009e08 <__ieee754_atan2+0x150>
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	fe27 7b00 	vselge.f64	d7, d7, d0
 8009d46:	e7d7      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009d48:	42ba      	cmp	r2, r7
 8009d4a:	d10f      	bne.n	8009d6c <__ieee754_atan2+0xb4>
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009d52:	d107      	bne.n	8009d64 <__ieee754_atan2+0xac>
 8009d54:	2c02      	cmp	r4, #2
 8009d56:	d847      	bhi.n	8009de8 <__ieee754_atan2+0x130>
 8009d58:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <__ieee754_atan2+0x17c>)
 8009d5a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009d5e:	ed94 7b00 	vldr	d7, [r4]
 8009d62:	e7c9      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009d64:	2c02      	cmp	r4, #2
 8009d66:	d842      	bhi.n	8009dee <__ieee754_atan2+0x136>
 8009d68:	4b33      	ldr	r3, [pc, #204]	; (8009e38 <__ieee754_atan2+0x180>)
 8009d6a:	e7f6      	b.n	8009d5a <__ieee754_atan2+0xa2>
 8009d6c:	42bb      	cmp	r3, r7
 8009d6e:	d0e3      	beq.n	8009d38 <__ieee754_atan2+0x80>
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009d76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d7a:	da1a      	bge.n	8009db2 <__ieee754_atan2+0xfa>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	da01      	bge.n	8009d84 <__ieee754_atan2+0xcc>
 8009d80:	323c      	adds	r2, #60	; 0x3c
 8009d82:	db19      	blt.n	8009db8 <__ieee754_atan2+0x100>
 8009d84:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009d88:	f000 fdf8 	bl	800a97c <fabs>
 8009d8c:	f000 fcfc 	bl	800a788 <atan>
 8009d90:	eeb0 7b40 	vmov.f64	d7, d0
 8009d94:	2c01      	cmp	r4, #1
 8009d96:	d012      	beq.n	8009dbe <__ieee754_atan2+0x106>
 8009d98:	2c02      	cmp	r4, #2
 8009d9a:	d019      	beq.n	8009dd0 <__ieee754_atan2+0x118>
 8009d9c:	2c00      	cmp	r4, #0
 8009d9e:	d0ab      	beq.n	8009cf8 <__ieee754_atan2+0x40>
 8009da0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8009e10 <__ieee754_atan2+0x158>
 8009da4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009da8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8009e18 <__ieee754_atan2+0x160>
 8009dac:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009db0:	e7a2      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009db2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009e00 <__ieee754_atan2+0x148>
 8009db6:	e7ed      	b.n	8009d94 <__ieee754_atan2+0xdc>
 8009db8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8009e20 <__ieee754_atan2+0x168>
 8009dbc:	e7ea      	b.n	8009d94 <__ieee754_atan2+0xdc>
 8009dbe:	ee17 1a90 	vmov	r1, s15
 8009dc2:	ec53 2b17 	vmov	r2, r3, d7
 8009dc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dca:	ec43 2b17 	vmov	d7, r2, r3
 8009dce:	e793      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009dd0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8009e10 <__ieee754_atan2+0x158>
 8009dd4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009dd8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8009e18 <__ieee754_atan2+0x160>
 8009ddc:	ee30 7b47 	vsub.f64	d7, d0, d7
 8009de0:	e78a      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009de2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8009e18 <__ieee754_atan2+0x160>
 8009de6:	e787      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009de8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009e28 <__ieee754_atan2+0x170>
 8009dec:	e784      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009dee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009e20 <__ieee754_atan2+0x168>
 8009df2:	e781      	b.n	8009cf8 <__ieee754_atan2+0x40>
 8009df4:	f3af 8000 	nop.w
 8009df8:	54442d18 	.word	0x54442d18
 8009dfc:	c00921fb 	.word	0xc00921fb
 8009e00:	54442d18 	.word	0x54442d18
 8009e04:	3ff921fb 	.word	0x3ff921fb
 8009e08:	54442d18 	.word	0x54442d18
 8009e0c:	bff921fb 	.word	0xbff921fb
 8009e10:	33145c07 	.word	0x33145c07
 8009e14:	3ca1a626 	.word	0x3ca1a626
 8009e18:	54442d18 	.word	0x54442d18
 8009e1c:	400921fb 	.word	0x400921fb
	...
 8009e28:	54442d18 	.word	0x54442d18
 8009e2c:	3fe921fb 	.word	0x3fe921fb
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	0800fc98 	.word	0x0800fc98
 8009e38:	0800fcb0 	.word	0x0800fcb0
 8009e3c:	00000000 	.word	0x00000000

08009e40 <__ieee754_rem_pio2>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	eeb0 7b40 	vmov.f64	d7, d0
 8009e46:	ee17 5a90 	vmov	r5, s15
 8009e4a:	4b99      	ldr	r3, [pc, #612]	; (800a0b0 <__ieee754_rem_pio2+0x270>)
 8009e4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e50:	429e      	cmp	r6, r3
 8009e52:	b088      	sub	sp, #32
 8009e54:	4604      	mov	r4, r0
 8009e56:	dc07      	bgt.n	8009e68 <__ieee754_rem_pio2+0x28>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	ed84 0b00 	vstr	d0, [r4]
 8009e60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e64:	2000      	movs	r0, #0
 8009e66:	e01b      	b.n	8009ea0 <__ieee754_rem_pio2+0x60>
 8009e68:	4b92      	ldr	r3, [pc, #584]	; (800a0b4 <__ieee754_rem_pio2+0x274>)
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	dc3b      	bgt.n	8009ee6 <__ieee754_rem_pio2+0xa6>
 8009e6e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8009e72:	2d00      	cmp	r5, #0
 8009e74:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800a070 <__ieee754_rem_pio2+0x230>
 8009e78:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8009e7c:	dd19      	ble.n	8009eb2 <__ieee754_rem_pio2+0x72>
 8009e7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8009e82:	429e      	cmp	r6, r3
 8009e84:	d00e      	beq.n	8009ea4 <__ieee754_rem_pio2+0x64>
 8009e86:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a078 <__ieee754_rem_pio2+0x238>
 8009e8a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8009e8e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009e92:	ed84 5b00 	vstr	d5, [r4]
 8009e96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	b008      	add	sp, #32
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a080 <__ieee754_rem_pio2+0x240>
 8009ea8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009eac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a088 <__ieee754_rem_pio2+0x248>
 8009eb0:	e7eb      	b.n	8009e8a <__ieee754_rem_pio2+0x4a>
 8009eb2:	429e      	cmp	r6, r3
 8009eb4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009eb8:	d00e      	beq.n	8009ed8 <__ieee754_rem_pio2+0x98>
 8009eba:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800a078 <__ieee754_rem_pio2+0x238>
 8009ebe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8009ec2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009ec6:	ed84 5b00 	vstr	d5, [r4]
 8009eca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed2:	ed84 7b02 	vstr	d7, [r4, #8]
 8009ed6:	e7e3      	b.n	8009ea0 <__ieee754_rem_pio2+0x60>
 8009ed8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a080 <__ieee754_rem_pio2+0x240>
 8009edc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009ee0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a088 <__ieee754_rem_pio2+0x248>
 8009ee4:	e7eb      	b.n	8009ebe <__ieee754_rem_pio2+0x7e>
 8009ee6:	4b74      	ldr	r3, [pc, #464]	; (800a0b8 <__ieee754_rem_pio2+0x278>)
 8009ee8:	429e      	cmp	r6, r3
 8009eea:	dc70      	bgt.n	8009fce <__ieee754_rem_pio2+0x18e>
 8009eec:	f000 fd46 	bl	800a97c <fabs>
 8009ef0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009ef4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a090 <__ieee754_rem_pio2+0x250>
 8009ef8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009efc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009f00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009f04:	ee17 0a90 	vmov	r0, s15
 8009f08:	eeb1 4b45 	vneg.f64	d4, d5
 8009f0c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a070 <__ieee754_rem_pio2+0x230>
 8009f10:	eea5 0b47 	vfms.f64	d0, d5, d7
 8009f14:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a078 <__ieee754_rem_pio2+0x238>
 8009f18:	281f      	cmp	r0, #31
 8009f1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009f22:	dc08      	bgt.n	8009f36 <__ieee754_rem_pio2+0xf6>
 8009f24:	4b65      	ldr	r3, [pc, #404]	; (800a0bc <__ieee754_rem_pio2+0x27c>)
 8009f26:	1e42      	subs	r2, r0, #1
 8009f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2c:	42b3      	cmp	r3, r6
 8009f2e:	d002      	beq.n	8009f36 <__ieee754_rem_pio2+0xf6>
 8009f30:	ed84 6b00 	vstr	d6, [r4]
 8009f34:	e026      	b.n	8009f84 <__ieee754_rem_pio2+0x144>
 8009f36:	ee16 3a90 	vmov	r3, s13
 8009f3a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009f3e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	ea4f 5226 	mov.w	r2, r6, asr #20
 8009f48:	ddf2      	ble.n	8009f30 <__ieee754_rem_pio2+0xf0>
 8009f4a:	eeb0 6b40 	vmov.f64	d6, d0
 8009f4e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800a080 <__ieee754_rem_pio2+0x240>
 8009f52:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800a088 <__ieee754_rem_pio2+0x248>
 8009f56:	eea4 6b07 	vfma.f64	d6, d4, d7
 8009f5a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009f5e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8009f62:	eeb0 7b40 	vmov.f64	d7, d0
 8009f66:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8009f6a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8009f6e:	ee13 3a90 	vmov	r3, s7
 8009f72:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b31      	cmp	r3, #49	; 0x31
 8009f7a:	dc17      	bgt.n	8009fac <__ieee754_rem_pio2+0x16c>
 8009f7c:	eeb0 0b46 	vmov.f64	d0, d6
 8009f80:	ed84 3b00 	vstr	d3, [r4]
 8009f84:	ed94 6b00 	vldr	d6, [r4]
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009f8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009f92:	ed84 0b02 	vstr	d0, [r4, #8]
 8009f96:	da83      	bge.n	8009ea0 <__ieee754_rem_pio2+0x60>
 8009f98:	eeb1 6b46 	vneg.f64	d6, d6
 8009f9c:	eeb1 0b40 	vneg.f64	d0, d0
 8009fa0:	ed84 6b00 	vstr	d6, [r4]
 8009fa4:	ed84 0b02 	vstr	d0, [r4, #8]
 8009fa8:	4240      	negs	r0, r0
 8009faa:	e779      	b.n	8009ea0 <__ieee754_rem_pio2+0x60>
 8009fac:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800a098 <__ieee754_rem_pio2+0x258>
 8009fb0:	eeb0 0b46 	vmov.f64	d0, d6
 8009fb4:	eea4 0b03 	vfma.f64	d0, d4, d3
 8009fb8:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009fbc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800a0a0 <__ieee754_rem_pio2+0x260>
 8009fc0:	eea4 7b03 	vfma.f64	d7, d4, d3
 8009fc4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8009fc8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009fcc:	e7b0      	b.n	8009f30 <__ieee754_rem_pio2+0xf0>
 8009fce:	4b3c      	ldr	r3, [pc, #240]	; (800a0c0 <__ieee754_rem_pio2+0x280>)
 8009fd0:	429e      	cmp	r6, r3
 8009fd2:	dd06      	ble.n	8009fe2 <__ieee754_rem_pio2+0x1a2>
 8009fd4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009fd8:	ed80 7b02 	vstr	d7, [r0, #8]
 8009fdc:	ed80 7b00 	vstr	d7, [r0]
 8009fe0:	e740      	b.n	8009e64 <__ieee754_rem_pio2+0x24>
 8009fe2:	1532      	asrs	r2, r6, #20
 8009fe4:	ee10 0a10 	vmov	r0, s0
 8009fe8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009fec:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8009ff0:	ec41 0b17 	vmov	d7, r0, r1
 8009ff4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009ff8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800a0a8 <__ieee754_rem_pio2+0x268>
 8009ffc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a000:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a004:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a008:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a00c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a010:	a902      	add	r1, sp, #8
 800a012:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a016:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a01a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a01e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a022:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a026:	2603      	movs	r6, #3
 800a028:	4608      	mov	r0, r1
 800a02a:	ed91 7b04 	vldr	d7, [r1, #16]
 800a02e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a036:	4633      	mov	r3, r6
 800a038:	f1a1 0108 	sub.w	r1, r1, #8
 800a03c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800a040:	d0f3      	beq.n	800a02a <__ieee754_rem_pio2+0x1ea>
 800a042:	4920      	ldr	r1, [pc, #128]	; (800a0c4 <__ieee754_rem_pio2+0x284>)
 800a044:	9101      	str	r1, [sp, #4]
 800a046:	2102      	movs	r1, #2
 800a048:	9100      	str	r1, [sp, #0]
 800a04a:	4621      	mov	r1, r4
 800a04c:	f000 f8ac 	bl	800a1a8 <__kernel_rem_pio2>
 800a050:	2d00      	cmp	r5, #0
 800a052:	f6bf af25 	bge.w	8009ea0 <__ieee754_rem_pio2+0x60>
 800a056:	ed94 7b00 	vldr	d7, [r4]
 800a05a:	eeb1 7b47 	vneg.f64	d7, d7
 800a05e:	ed84 7b00 	vstr	d7, [r4]
 800a062:	ed94 7b02 	vldr	d7, [r4, #8]
 800a066:	eeb1 7b47 	vneg.f64	d7, d7
 800a06a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a06e:	e79b      	b.n	8009fa8 <__ieee754_rem_pio2+0x168>
 800a070:	54400000 	.word	0x54400000
 800a074:	3ff921fb 	.word	0x3ff921fb
 800a078:	1a626331 	.word	0x1a626331
 800a07c:	3dd0b461 	.word	0x3dd0b461
 800a080:	1a600000 	.word	0x1a600000
 800a084:	3dd0b461 	.word	0x3dd0b461
 800a088:	2e037073 	.word	0x2e037073
 800a08c:	3ba3198a 	.word	0x3ba3198a
 800a090:	6dc9c883 	.word	0x6dc9c883
 800a094:	3fe45f30 	.word	0x3fe45f30
 800a098:	2e000000 	.word	0x2e000000
 800a09c:	3ba3198a 	.word	0x3ba3198a
 800a0a0:	252049c1 	.word	0x252049c1
 800a0a4:	397b839a 	.word	0x397b839a
 800a0a8:	00000000 	.word	0x00000000
 800a0ac:	41700000 	.word	0x41700000
 800a0b0:	3fe921fb 	.word	0x3fe921fb
 800a0b4:	4002d97b 	.word	0x4002d97b
 800a0b8:	413921fb 	.word	0x413921fb
 800a0bc:	0800fcc8 	.word	0x0800fcc8
 800a0c0:	7fefffff 	.word	0x7fefffff
 800a0c4:	0800fd48 	.word	0x0800fd48

0800a0c8 <__ieee754_sqrt>:
 800a0c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a0cc:	4770      	bx	lr
	...

0800a0d0 <__kernel_cos>:
 800a0d0:	ee10 1a90 	vmov	r1, s1
 800a0d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a0d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a0dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a0e0:	da05      	bge.n	800a0ee <__kernel_cos+0x1e>
 800a0e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a0e6:	ee17 3a90 	vmov	r3, s15
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d03d      	beq.n	800a16a <__kernel_cos+0x9a>
 800a0ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 800a0f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a170 <__kernel_cos+0xa0>
 800a0f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a178 <__kernel_cos+0xa8>
 800a0fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800a0fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a180 <__kernel_cos+0xb0>
 800a102:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a106:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a188 <__kernel_cos+0xb8>
 800a10a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a10e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a190 <__kernel_cos+0xc0>
 800a112:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <__kernel_cos+0xd0>)
 800a114:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a118:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800a198 <__kernel_cos+0xc8>
 800a11c:	4299      	cmp	r1, r3
 800a11e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a122:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a126:	ee26 5b03 	vmul.f64	d5, d6, d3
 800a12a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a12e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800a132:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a136:	dc04      	bgt.n	800a142 <__kernel_cos+0x72>
 800a138:	ee37 6b46 	vsub.f64	d6, d7, d6
 800a13c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800a140:	4770      	bx	lr
 800a142:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <__kernel_cos+0xd4>)
 800a144:	4299      	cmp	r1, r3
 800a146:	dc0d      	bgt.n	800a164 <__kernel_cos+0x94>
 800a148:	2200      	movs	r2, #0
 800a14a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a14e:	ec43 2b15 	vmov	d5, r2, r3
 800a152:	ee34 0b45 	vsub.f64	d0, d4, d5
 800a156:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a15a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a15e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a162:	4770      	bx	lr
 800a164:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a168:	e7f3      	b.n	800a152 <__kernel_cos+0x82>
 800a16a:	eeb0 0b44 	vmov.f64	d0, d4
 800a16e:	4770      	bx	lr
 800a170:	be8838d4 	.word	0xbe8838d4
 800a174:	bda8fae9 	.word	0xbda8fae9
 800a178:	bdb4b1c4 	.word	0xbdb4b1c4
 800a17c:	3e21ee9e 	.word	0x3e21ee9e
 800a180:	809c52ad 	.word	0x809c52ad
 800a184:	be927e4f 	.word	0xbe927e4f
 800a188:	19cb1590 	.word	0x19cb1590
 800a18c:	3efa01a0 	.word	0x3efa01a0
 800a190:	16c15177 	.word	0x16c15177
 800a194:	bf56c16c 	.word	0xbf56c16c
 800a198:	5555554c 	.word	0x5555554c
 800a19c:	3fa55555 	.word	0x3fa55555
 800a1a0:	3fd33332 	.word	0x3fd33332
 800a1a4:	3fe90000 	.word	0x3fe90000

0800a1a8 <__kernel_rem_pio2>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	ed2d 8b06 	vpush	{d8-d10}
 800a1b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	9002      	str	r0, [sp, #8]
 800a1b8:	49c5      	ldr	r1, [pc, #788]	; (800a4d0 <__kernel_rem_pio2+0x328>)
 800a1ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800a1bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800a1c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	f112 0f14 	cmn.w	r2, #20
 800a1ca:	bfa8      	it	ge
 800a1cc:	2018      	movge	r0, #24
 800a1ce:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a1d2:	bfb8      	it	lt
 800a1d4:	2000      	movlt	r0, #0
 800a1d6:	f06f 0417 	mvn.w	r4, #23
 800a1da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800a4b8 <__kernel_rem_pio2+0x310>
 800a1de:	bfa4      	itt	ge
 800a1e0:	f1a2 0a03 	subge.w	sl, r2, #3
 800a1e4:	fb9a f0f0 	sdivge	r0, sl, r0
 800a1e8:	fb00 4404 	mla	r4, r0, r4, r4
 800a1ec:	1a46      	subs	r6, r0, r1
 800a1ee:	4414      	add	r4, r2
 800a1f0:	eb09 0c01 	add.w	ip, r9, r1
 800a1f4:	ad1a      	add	r5, sp, #104	; 0x68
 800a1f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4562      	cmp	r2, ip
 800a1fe:	dd10      	ble.n	800a222 <__kernel_rem_pio2+0x7a>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	ab1a      	add	r3, sp, #104	; 0x68
 800a204:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a208:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800a20c:	f04f 0c00 	mov.w	ip, #0
 800a210:	45cc      	cmp	ip, r9
 800a212:	dc26      	bgt.n	800a262 <__kernel_rem_pio2+0xba>
 800a214:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800a4b8 <__kernel_rem_pio2+0x310>
 800a218:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a21c:	4616      	mov	r6, r2
 800a21e:	2500      	movs	r5, #0
 800a220:	e015      	b.n	800a24e <__kernel_rem_pio2+0xa6>
 800a222:	42d6      	cmn	r6, r2
 800a224:	d409      	bmi.n	800a23a <__kernel_rem_pio2+0x92>
 800a226:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a232:	eca5 7b02 	vstmia	r5!, {d7}
 800a236:	3201      	adds	r2, #1
 800a238:	e7e0      	b.n	800a1fc <__kernel_rem_pio2+0x54>
 800a23a:	eeb0 7b46 	vmov.f64	d7, d6
 800a23e:	e7f8      	b.n	800a232 <__kernel_rem_pio2+0x8a>
 800a240:	ecb8 5b02 	vldmia	r8!, {d5}
 800a244:	ed96 6b00 	vldr	d6, [r6]
 800a248:	3501      	adds	r5, #1
 800a24a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a24e:	428d      	cmp	r5, r1
 800a250:	f1a6 0608 	sub.w	r6, r6, #8
 800a254:	ddf4      	ble.n	800a240 <__kernel_rem_pio2+0x98>
 800a256:	ecaa 7b02 	vstmia	sl!, {d7}
 800a25a:	f10c 0c01 	add.w	ip, ip, #1
 800a25e:	3208      	adds	r2, #8
 800a260:	e7d6      	b.n	800a210 <__kernel_rem_pio2+0x68>
 800a262:	ab06      	add	r3, sp, #24
 800a264:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800a4c0 <__kernel_rem_pio2+0x318>
 800a268:	ed9f ab97 	vldr	d10, [pc, #604]	; 800a4c8 <__kernel_rem_pio2+0x320>
 800a26c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800a276:	464d      	mov	r5, r9
 800a278:	00eb      	lsls	r3, r5, #3
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	ab92      	add	r3, sp, #584	; 0x248
 800a27e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a282:	f10d 0b18 	add.w	fp, sp, #24
 800a286:	ab6a      	add	r3, sp, #424	; 0x1a8
 800a288:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800a28c:	465e      	mov	r6, fp
 800a28e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a292:	4628      	mov	r0, r5
 800a294:	2800      	cmp	r0, #0
 800a296:	f1a2 0208 	sub.w	r2, r2, #8
 800a29a:	dc4c      	bgt.n	800a336 <__kernel_rem_pio2+0x18e>
 800a29c:	4620      	mov	r0, r4
 800a29e:	9105      	str	r1, [sp, #20]
 800a2a0:	f000 fbf2 	bl	800aa88 <scalbn>
 800a2a4:	eeb0 8b40 	vmov.f64	d8, d0
 800a2a8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a2ac:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a2b0:	f000 fb6e 	bl	800a990 <floor>
 800a2b4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a2b8:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a2bc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800a2c6:	ee17 8a90 	vmov	r8, s15
 800a2ca:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a2ce:	9905      	ldr	r1, [sp, #20]
 800a2d0:	dd43      	ble.n	800a35a <__kernel_rem_pio2+0x1b2>
 800a2d2:	1e68      	subs	r0, r5, #1
 800a2d4:	ab06      	add	r3, sp, #24
 800a2d6:	f1c4 0c18 	rsb	ip, r4, #24
 800a2da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a2de:	fa46 f20c 	asr.w	r2, r6, ip
 800a2e2:	4490      	add	r8, r2
 800a2e4:	fa02 f20c 	lsl.w	r2, r2, ip
 800a2e8:	1ab6      	subs	r6, r6, r2
 800a2ea:	f1c4 0217 	rsb	r2, r4, #23
 800a2ee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800a2f2:	4116      	asrs	r6, r2
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	dd3f      	ble.n	800a378 <__kernel_rem_pio2+0x1d0>
 800a2f8:	f04f 0c00 	mov.w	ip, #0
 800a2fc:	f108 0801 	add.w	r8, r8, #1
 800a300:	4660      	mov	r0, ip
 800a302:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800a306:	4565      	cmp	r5, ip
 800a308:	dc6e      	bgt.n	800a3e8 <__kernel_rem_pio2+0x240>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	dd04      	ble.n	800a318 <__kernel_rem_pio2+0x170>
 800a30e:	2c01      	cmp	r4, #1
 800a310:	d07f      	beq.n	800a412 <__kernel_rem_pio2+0x26a>
 800a312:	2c02      	cmp	r4, #2
 800a314:	f000 8087 	beq.w	800a426 <__kernel_rem_pio2+0x27e>
 800a318:	2e02      	cmp	r6, #2
 800a31a:	d12d      	bne.n	800a378 <__kernel_rem_pio2+0x1d0>
 800a31c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a320:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a324:	b340      	cbz	r0, 800a378 <__kernel_rem_pio2+0x1d0>
 800a326:	4620      	mov	r0, r4
 800a328:	9105      	str	r1, [sp, #20]
 800a32a:	f000 fbad 	bl	800aa88 <scalbn>
 800a32e:	9905      	ldr	r1, [sp, #20]
 800a330:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a334:	e020      	b.n	800a378 <__kernel_rem_pio2+0x1d0>
 800a336:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a33a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a33e:	3801      	subs	r0, #1
 800a340:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a344:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a348:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a34c:	eca6 0a01 	vstmia	r6!, {s0}
 800a350:	ed92 0b00 	vldr	d0, [r2]
 800a354:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a358:	e79c      	b.n	800a294 <__kernel_rem_pio2+0xec>
 800a35a:	d105      	bne.n	800a368 <__kernel_rem_pio2+0x1c0>
 800a35c:	1e6a      	subs	r2, r5, #1
 800a35e:	ab06      	add	r3, sp, #24
 800a360:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a364:	15f6      	asrs	r6, r6, #23
 800a366:	e7c5      	b.n	800a2f4 <__kernel_rem_pio2+0x14c>
 800a368:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a36c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a374:	da36      	bge.n	800a3e4 <__kernel_rem_pio2+0x23c>
 800a376:	2600      	movs	r6, #0
 800a378:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a380:	f040 80aa 	bne.w	800a4d8 <__kernel_rem_pio2+0x330>
 800a384:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a388:	4658      	mov	r0, fp
 800a38a:	2200      	movs	r2, #0
 800a38c:	4548      	cmp	r0, r9
 800a38e:	da52      	bge.n	800a436 <__kernel_rem_pio2+0x28e>
 800a390:	2a00      	cmp	r2, #0
 800a392:	f000 8081 	beq.w	800a498 <__kernel_rem_pio2+0x2f0>
 800a396:	ab06      	add	r3, sp, #24
 800a398:	3c18      	subs	r4, #24
 800a39a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 8087 	beq.w	800a4b2 <__kernel_rem_pio2+0x30a>
 800a3a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fb6d 	bl	800aa88 <scalbn>
 800a3ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800a4c0 <__kernel_rem_pio2+0x318>
 800a3b6:	a96a      	add	r1, sp, #424	; 0x1a8
 800a3b8:	f103 0208 	add.w	r2, r3, #8
 800a3bc:	1888      	adds	r0, r1, r2
 800a3be:	4659      	mov	r1, fp
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	f280 80b7 	bge.w	800a534 <__kernel_rem_pio2+0x38c>
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	f2c0 80d5 	blt.w	800a578 <__kernel_rem_pio2+0x3d0>
 800a3ce:	a86a      	add	r0, sp, #424	; 0x1a8
 800a3d0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800a3d4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800a4b8 <__kernel_rem_pio2+0x310>
 800a3d8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800a4d4 <__kernel_rem_pio2+0x32c>
 800a3dc:	2400      	movs	r4, #0
 800a3de:	ebab 0001 	sub.w	r0, fp, r1
 800a3e2:	e0be      	b.n	800a562 <__kernel_rem_pio2+0x3ba>
 800a3e4:	2602      	movs	r6, #2
 800a3e6:	e787      	b.n	800a2f8 <__kernel_rem_pio2+0x150>
 800a3e8:	f8db 2000 	ldr.w	r2, [fp]
 800a3ec:	b958      	cbnz	r0, 800a406 <__kernel_rem_pio2+0x25e>
 800a3ee:	b122      	cbz	r2, 800a3fa <__kernel_rem_pio2+0x252>
 800a3f0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800a3f4:	f8cb 2000 	str.w	r2, [fp]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f10c 0c01 	add.w	ip, ip, #1
 800a3fe:	f10b 0b04 	add.w	fp, fp, #4
 800a402:	4610      	mov	r0, r2
 800a404:	e77f      	b.n	800a306 <__kernel_rem_pio2+0x15e>
 800a406:	ebae 0202 	sub.w	r2, lr, r2
 800a40a:	f8cb 2000 	str.w	r2, [fp]
 800a40e:	4602      	mov	r2, r0
 800a410:	e7f3      	b.n	800a3fa <__kernel_rem_pio2+0x252>
 800a412:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800a416:	ab06      	add	r3, sp, #24
 800a418:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a41c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a420:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800a424:	e778      	b.n	800a318 <__kernel_rem_pio2+0x170>
 800a426:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800a42a:	ab06      	add	r3, sp, #24
 800a42c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a430:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800a434:	e7f4      	b.n	800a420 <__kernel_rem_pio2+0x278>
 800a436:	ab06      	add	r3, sp, #24
 800a438:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a43c:	3801      	subs	r0, #1
 800a43e:	431a      	orrs	r2, r3
 800a440:	e7a4      	b.n	800a38c <__kernel_rem_pio2+0x1e4>
 800a442:	f10c 0c01 	add.w	ip, ip, #1
 800a446:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d0f9      	beq.n	800a442 <__kernel_rem_pio2+0x29a>
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a454:	eb0d 0203 	add.w	r2, sp, r3
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	18e8      	adds	r0, r5, r3
 800a45c:	ab1a      	add	r3, sp, #104	; 0x68
 800a45e:	1c6e      	adds	r6, r5, #1
 800a460:	3a98      	subs	r2, #152	; 0x98
 800a462:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a466:	4465      	add	r5, ip
 800a468:	42b5      	cmp	r5, r6
 800a46a:	f6ff af05 	blt.w	800a278 <__kernel_rem_pio2+0xd0>
 800a46e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800a472:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a47e:	f04f 0c00 	mov.w	ip, #0
 800a482:	eca0 7b02 	vstmia	r0!, {d7}
 800a486:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800a4b8 <__kernel_rem_pio2+0x310>
 800a48a:	4680      	mov	r8, r0
 800a48c:	458c      	cmp	ip, r1
 800a48e:	dd07      	ble.n	800a4a0 <__kernel_rem_pio2+0x2f8>
 800a490:	eca2 7b02 	vstmia	r2!, {d7}
 800a494:	3601      	adds	r6, #1
 800a496:	e7e7      	b.n	800a468 <__kernel_rem_pio2+0x2c0>
 800a498:	9a03      	ldr	r2, [sp, #12]
 800a49a:	f04f 0c01 	mov.w	ip, #1
 800a49e:	e7d2      	b.n	800a446 <__kernel_rem_pio2+0x29e>
 800a4a0:	ecbe 5b02 	vldmia	lr!, {d5}
 800a4a4:	ed38 6b02 	vldmdb	r8!, {d6}
 800a4a8:	f10c 0c01 	add.w	ip, ip, #1
 800a4ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a4b0:	e7ec      	b.n	800a48c <__kernel_rem_pio2+0x2e4>
 800a4b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a4b6:	e76e      	b.n	800a396 <__kernel_rem_pio2+0x1ee>
	...
 800a4c4:	3e700000 	.word	0x3e700000
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	41700000 	.word	0x41700000
 800a4d0:	0800fe90 	.word	0x0800fe90
 800a4d4:	0800fe50 	.word	0x0800fe50
 800a4d8:	4260      	negs	r0, r4
 800a4da:	eeb0 0b48 	vmov.f64	d0, d8
 800a4de:	f000 fad3 	bl	800aa88 <scalbn>
 800a4e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800a6c0 <__kernel_rem_pio2+0x518>
 800a4e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	db18      	blt.n	800a522 <__kernel_rem_pio2+0x37a>
 800a4f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800a6c8 <__kernel_rem_pio2+0x520>
 800a4f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a4f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a4fc:	aa06      	add	r2, sp, #24
 800a4fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a502:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a506:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a50a:	f105 0b01 	add.w	fp, r5, #1
 800a50e:	ee10 3a10 	vmov	r3, s0
 800a512:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a516:	ee17 3a10 	vmov	r3, s14
 800a51a:	3418      	adds	r4, #24
 800a51c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800a520:	e740      	b.n	800a3a4 <__kernel_rem_pio2+0x1fc>
 800a522:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a526:	aa06      	add	r2, sp, #24
 800a528:	ee10 3a10 	vmov	r3, s0
 800a52c:	46ab      	mov	fp, r5
 800a52e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a532:	e737      	b.n	800a3a4 <__kernel_rem_pio2+0x1fc>
 800a534:	ac06      	add	r4, sp, #24
 800a536:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800a53a:	9401      	str	r4, [sp, #4]
 800a53c:	ee07 4a90 	vmov	s15, r4
 800a540:	3901      	subs	r1, #1
 800a542:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a546:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a54a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a54e:	ed20 7b02 	vstmdb	r0!, {d7}
 800a552:	e735      	b.n	800a3c0 <__kernel_rem_pio2+0x218>
 800a554:	ecbc 5b02 	vldmia	ip!, {d5}
 800a558:	ecb5 6b02 	vldmia	r5!, {d6}
 800a55c:	3401      	adds	r4, #1
 800a55e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a562:	454c      	cmp	r4, r9
 800a564:	dc01      	bgt.n	800a56a <__kernel_rem_pio2+0x3c2>
 800a566:	4284      	cmp	r4, r0
 800a568:	ddf4      	ble.n	800a554 <__kernel_rem_pio2+0x3ac>
 800a56a:	ac42      	add	r4, sp, #264	; 0x108
 800a56c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800a570:	ed80 7b00 	vstr	d7, [r0]
 800a574:	3901      	subs	r1, #1
 800a576:	e727      	b.n	800a3c8 <__kernel_rem_pio2+0x220>
 800a578:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a57a:	2902      	cmp	r1, #2
 800a57c:	dc0a      	bgt.n	800a594 <__kernel_rem_pio2+0x3ec>
 800a57e:	2900      	cmp	r1, #0
 800a580:	dc2c      	bgt.n	800a5dc <__kernel_rem_pio2+0x434>
 800a582:	d045      	beq.n	800a610 <__kernel_rem_pio2+0x468>
 800a584:	f008 0007 	and.w	r0, r8, #7
 800a588:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800a58c:	ecbd 8b06 	vpop	{d8-d10}
 800a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a594:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800a596:	2a03      	cmp	r2, #3
 800a598:	d1f4      	bne.n	800a584 <__kernel_rem_pio2+0x3dc>
 800a59a:	aa42      	add	r2, sp, #264	; 0x108
 800a59c:	4413      	add	r3, r2
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f1a1 0108 	sub.w	r1, r1, #8
 800a5aa:	dc54      	bgt.n	800a656 <__kernel_rem_pio2+0x4ae>
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	2901      	cmp	r1, #1
 800a5b0:	f1a2 0208 	sub.w	r2, r2, #8
 800a5b4:	dc5f      	bgt.n	800a676 <__kernel_rem_pio2+0x4ce>
 800a5b6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800a6d0 <__kernel_rem_pio2+0x528>
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	f1bb 0f01 	cmp.w	fp, #1
 800a5c0:	dc69      	bgt.n	800a696 <__kernel_rem_pio2+0x4ee>
 800a5c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800a5c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	d16a      	bne.n	800a6a4 <__kernel_rem_pio2+0x4fc>
 800a5ce:	ed87 5b00 	vstr	d5, [r7]
 800a5d2:	ed87 6b02 	vstr	d6, [r7, #8]
 800a5d6:	ed87 7b04 	vstr	d7, [r7, #16]
 800a5da:	e7d3      	b.n	800a584 <__kernel_rem_pio2+0x3dc>
 800a5dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a6d0 <__kernel_rem_pio2+0x528>
 800a5e0:	ab42      	add	r3, sp, #264	; 0x108
 800a5e2:	441a      	add	r2, r3
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da26      	bge.n	800a638 <__kernel_rem_pio2+0x490>
 800a5ea:	b35e      	cbz	r6, 800a644 <__kernel_rem_pio2+0x49c>
 800a5ec:	eeb1 7b46 	vneg.f64	d7, d6
 800a5f0:	ed87 7b00 	vstr	d7, [r7]
 800a5f4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800a5f8:	aa44      	add	r2, sp, #272	; 0x110
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a600:	459b      	cmp	fp, r3
 800a602:	da22      	bge.n	800a64a <__kernel_rem_pio2+0x4a2>
 800a604:	b10e      	cbz	r6, 800a60a <__kernel_rem_pio2+0x462>
 800a606:	eeb1 7b47 	vneg.f64	d7, d7
 800a60a:	ed87 7b02 	vstr	d7, [r7, #8]
 800a60e:	e7b9      	b.n	800a584 <__kernel_rem_pio2+0x3dc>
 800a610:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a6d0 <__kernel_rem_pio2+0x528>
 800a614:	ab42      	add	r3, sp, #264	; 0x108
 800a616:	441a      	add	r2, r3
 800a618:	f1bb 0f00 	cmp.w	fp, #0
 800a61c:	da05      	bge.n	800a62a <__kernel_rem_pio2+0x482>
 800a61e:	b10e      	cbz	r6, 800a624 <__kernel_rem_pio2+0x47c>
 800a620:	eeb1 7b47 	vneg.f64	d7, d7
 800a624:	ed87 7b00 	vstr	d7, [r7]
 800a628:	e7ac      	b.n	800a584 <__kernel_rem_pio2+0x3dc>
 800a62a:	ed32 6b02 	vldmdb	r2!, {d6}
 800a62e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a632:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a636:	e7ef      	b.n	800a618 <__kernel_rem_pio2+0x470>
 800a638:	ed32 7b02 	vldmdb	r2!, {d7}
 800a63c:	3b01      	subs	r3, #1
 800a63e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a642:	e7d0      	b.n	800a5e6 <__kernel_rem_pio2+0x43e>
 800a644:	eeb0 7b46 	vmov.f64	d7, d6
 800a648:	e7d2      	b.n	800a5f0 <__kernel_rem_pio2+0x448>
 800a64a:	ecb2 6b02 	vldmia	r2!, {d6}
 800a64e:	3301      	adds	r3, #1
 800a650:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a654:	e7d4      	b.n	800a600 <__kernel_rem_pio2+0x458>
 800a656:	ed91 7b00 	vldr	d7, [r1]
 800a65a:	ed91 5b02 	vldr	d5, [r1, #8]
 800a65e:	3801      	subs	r0, #1
 800a660:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a664:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a668:	ed81 6b00 	vstr	d6, [r1]
 800a66c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a670:	ed81 7b02 	vstr	d7, [r1, #8]
 800a674:	e796      	b.n	800a5a4 <__kernel_rem_pio2+0x3fc>
 800a676:	ed92 7b00 	vldr	d7, [r2]
 800a67a:	ed92 5b02 	vldr	d5, [r2, #8]
 800a67e:	3901      	subs	r1, #1
 800a680:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a684:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a688:	ed82 6b00 	vstr	d6, [r2]
 800a68c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a690:	ed82 7b02 	vstr	d7, [r2, #8]
 800a694:	e78b      	b.n	800a5ae <__kernel_rem_pio2+0x406>
 800a696:	ed33 6b02 	vldmdb	r3!, {d6}
 800a69a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a69e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a6a2:	e78b      	b.n	800a5bc <__kernel_rem_pio2+0x414>
 800a6a4:	eeb1 5b45 	vneg.f64	d5, d5
 800a6a8:	eeb1 6b46 	vneg.f64	d6, d6
 800a6ac:	ed87 5b00 	vstr	d5, [r7]
 800a6b0:	eeb1 7b47 	vneg.f64	d7, d7
 800a6b4:	ed87 6b02 	vstr	d6, [r7, #8]
 800a6b8:	e78d      	b.n	800a5d6 <__kernel_rem_pio2+0x42e>
 800a6ba:	bf00      	nop
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	00000000 	.word	0x00000000
 800a6c4:	41700000 	.word	0x41700000
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	3e700000 	.word	0x3e700000
	...

0800a6d8 <__kernel_sin>:
 800a6d8:	ee10 3a90 	vmov	r3, s1
 800a6dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a6e4:	da04      	bge.n	800a6f0 <__kernel_sin+0x18>
 800a6e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a6ea:	ee17 3a90 	vmov	r3, s15
 800a6ee:	b35b      	cbz	r3, 800a748 <__kernel_sin+0x70>
 800a6f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a6f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a6f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a750 <__kernel_sin+0x78>
 800a6fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a758 <__kernel_sin+0x80>
 800a700:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a704:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a760 <__kernel_sin+0x88>
 800a708:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a70c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a768 <__kernel_sin+0x90>
 800a710:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a714:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a770 <__kernel_sin+0x98>
 800a718:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a71c:	b930      	cbnz	r0, 800a72c <__kernel_sin+0x54>
 800a71e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a778 <__kernel_sin+0xa0>
 800a722:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a726:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a72a:	4770      	bx	lr
 800a72c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a730:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a734:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a738:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a73c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a780 <__kernel_sin+0xa8>
 800a740:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a744:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w
 800a750:	5acfd57c 	.word	0x5acfd57c
 800a754:	3de5d93a 	.word	0x3de5d93a
 800a758:	8a2b9ceb 	.word	0x8a2b9ceb
 800a75c:	be5ae5e6 	.word	0xbe5ae5e6
 800a760:	57b1fe7d 	.word	0x57b1fe7d
 800a764:	3ec71de3 	.word	0x3ec71de3
 800a768:	19c161d5 	.word	0x19c161d5
 800a76c:	bf2a01a0 	.word	0xbf2a01a0
 800a770:	1110f8a6 	.word	0x1110f8a6
 800a774:	3f811111 	.word	0x3f811111
 800a778:	55555549 	.word	0x55555549
 800a77c:	bfc55555 	.word	0xbfc55555
 800a780:	55555549 	.word	0x55555549
 800a784:	3fc55555 	.word	0x3fc55555

0800a788 <atan>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	eeb0 7b40 	vmov.f64	d7, d0
 800a78e:	ee17 5a90 	vmov	r5, s15
 800a792:	4b73      	ldr	r3, [pc, #460]	; (800a960 <atan+0x1d8>)
 800a794:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a798:	429c      	cmp	r4, r3
 800a79a:	dd13      	ble.n	800a7c4 <atan+0x3c>
 800a79c:	4b71      	ldr	r3, [pc, #452]	; (800a964 <atan+0x1dc>)
 800a79e:	429c      	cmp	r4, r3
 800a7a0:	dc03      	bgt.n	800a7aa <atan+0x22>
 800a7a2:	d107      	bne.n	800a7b4 <atan+0x2c>
 800a7a4:	ee10 3a10 	vmov	r3, s0
 800a7a8:	b123      	cbz	r3, 800a7b4 <atan+0x2c>
 800a7aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a7ae:	eeb0 0b47 	vmov.f64	d0, d7
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800a8f0 <atan+0x168>
 800a7b8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800a8f8 <atan+0x170>
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800a7c2:	e7f4      	b.n	800a7ae <atan+0x26>
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <atan+0x1e0>)
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	dc11      	bgt.n	800a7ee <atan+0x66>
 800a7ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a7ce:	429c      	cmp	r4, r3
 800a7d0:	dc0a      	bgt.n	800a7e8 <atan+0x60>
 800a7d2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800a7d6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800a900 <atan+0x178>
 800a7da:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a7de:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	dce2      	bgt.n	800a7ae <atan+0x26>
 800a7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ec:	e013      	b.n	800a816 <atan+0x8e>
 800a7ee:	f000 f8c5 	bl	800a97c <fabs>
 800a7f2:	4b5e      	ldr	r3, [pc, #376]	; (800a96c <atan+0x1e4>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	dc4f      	bgt.n	800a898 <atan+0x110>
 800a7f8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	dc41      	bgt.n	800a884 <atan+0xfc>
 800a800:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a804:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a808:	2300      	movs	r3, #0
 800a80a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a80e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a812:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a816:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a908 <atan+0x180>
 800a81a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a81e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a822:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a910 <atan+0x188>
 800a826:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a82a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a918 <atan+0x190>
 800a82e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a832:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a920 <atan+0x198>
 800a836:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a83a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a928 <atan+0x1a0>
 800a83e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a842:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a930 <atan+0x1a8>
 800a846:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a938 <atan+0x1b0>
 800a84a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a84e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a940 <atan+0x1b8>
 800a852:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a856:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a948 <atan+0x1c0>
 800a85a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a85e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a950 <atan+0x1c8>
 800a862:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a866:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a958 <atan+0x1d0>
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a870:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a874:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a878:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a87c:	d121      	bne.n	800a8c2 <atan+0x13a>
 800a87e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a882:	e794      	b.n	800a7ae <atan+0x26>
 800a884:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a888:	2301      	movs	r3, #1
 800a88a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a88e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a892:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a896:	e7be      	b.n	800a816 <atan+0x8e>
 800a898:	4b35      	ldr	r3, [pc, #212]	; (800a970 <atan+0x1e8>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	da0b      	bge.n	800a8b6 <atan+0x12e>
 800a89e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a8a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a8a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a8aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a8b4:	e7af      	b.n	800a816 <atan+0x8e>
 800a8b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a8c0:	e7a9      	b.n	800a816 <atan+0x8e>
 800a8c2:	4a2c      	ldr	r2, [pc, #176]	; (800a974 <atan+0x1ec>)
 800a8c4:	492c      	ldr	r1, [pc, #176]	; (800a978 <atan+0x1f0>)
 800a8c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a8ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a8ce:	ed93 5b00 	vldr	d5, [r3]
 800a8d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a8d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a8da:	ed92 6b00 	vldr	d6, [r2]
 800a8de:	2d00      	cmp	r5, #0
 800a8e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a8e4:	bfb8      	it	lt
 800a8e6:	eeb1 7b47 	vneglt.f64	d7, d7
 800a8ea:	e760      	b.n	800a7ae <atan+0x26>
 800a8ec:	f3af 8000 	nop.w
 800a8f0:	54442d18 	.word	0x54442d18
 800a8f4:	3ff921fb 	.word	0x3ff921fb
 800a8f8:	54442d18 	.word	0x54442d18
 800a8fc:	bff921fb 	.word	0xbff921fb
 800a900:	8800759c 	.word	0x8800759c
 800a904:	7e37e43c 	.word	0x7e37e43c
 800a908:	e322da11 	.word	0xe322da11
 800a90c:	3f90ad3a 	.word	0x3f90ad3a
 800a910:	24760deb 	.word	0x24760deb
 800a914:	3fa97b4b 	.word	0x3fa97b4b
 800a918:	a0d03d51 	.word	0xa0d03d51
 800a91c:	3fb10d66 	.word	0x3fb10d66
 800a920:	c54c206e 	.word	0xc54c206e
 800a924:	3fb745cd 	.word	0x3fb745cd
 800a928:	920083ff 	.word	0x920083ff
 800a92c:	3fc24924 	.word	0x3fc24924
 800a930:	5555550d 	.word	0x5555550d
 800a934:	3fd55555 	.word	0x3fd55555
 800a938:	52defd9a 	.word	0x52defd9a
 800a93c:	bfadde2d 	.word	0xbfadde2d
 800a940:	2c6a6c2f 	.word	0x2c6a6c2f
 800a944:	bfa2b444 	.word	0xbfa2b444
 800a948:	af749a6d 	.word	0xaf749a6d
 800a94c:	bfb3b0f2 	.word	0xbfb3b0f2
 800a950:	fe231671 	.word	0xfe231671
 800a954:	bfbc71c6 	.word	0xbfbc71c6
 800a958:	9998ebc4 	.word	0x9998ebc4
 800a95c:	bfc99999 	.word	0xbfc99999
 800a960:	440fffff 	.word	0x440fffff
 800a964:	7ff00000 	.word	0x7ff00000
 800a968:	3fdbffff 	.word	0x3fdbffff
 800a96c:	3ff2ffff 	.word	0x3ff2ffff
 800a970:	40038000 	.word	0x40038000
 800a974:	0800fea0 	.word	0x0800fea0
 800a978:	0800fec0 	.word	0x0800fec0

0800a97c <fabs>:
 800a97c:	ec51 0b10 	vmov	r0, r1, d0
 800a980:	ee10 2a10 	vmov	r2, s0
 800a984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a988:	ec43 2b10 	vmov	d0, r2, r3
 800a98c:	4770      	bx	lr
	...

0800a990 <floor>:
 800a990:	ee10 1a90 	vmov	r1, s1
 800a994:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a998:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a99c:	2b13      	cmp	r3, #19
 800a99e:	b530      	push	{r4, r5, lr}
 800a9a0:	ee10 0a10 	vmov	r0, s0
 800a9a4:	ee10 5a10 	vmov	r5, s0
 800a9a8:	dc31      	bgt.n	800aa0e <floor+0x7e>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da15      	bge.n	800a9da <floor+0x4a>
 800a9ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800aa68 <floor+0xd8>
 800a9b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a9b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9be:	dd07      	ble.n	800a9d0 <floor+0x40>
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	da4e      	bge.n	800aa62 <floor+0xd2>
 800a9c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9c8:	4318      	orrs	r0, r3
 800a9ca:	d001      	beq.n	800a9d0 <floor+0x40>
 800a9cc:	4928      	ldr	r1, [pc, #160]	; (800aa70 <floor+0xe0>)
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	ec43 2b10 	vmov	d0, r2, r3
 800a9d8:	e020      	b.n	800aa1c <floor+0x8c>
 800a9da:	4a26      	ldr	r2, [pc, #152]	; (800aa74 <floor+0xe4>)
 800a9dc:	411a      	asrs	r2, r3
 800a9de:	ea01 0402 	and.w	r4, r1, r2
 800a9e2:	4304      	orrs	r4, r0
 800a9e4:	d01a      	beq.n	800aa1c <floor+0x8c>
 800a9e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800aa68 <floor+0xd8>
 800a9ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a9ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f6:	ddeb      	ble.n	800a9d0 <floor+0x40>
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	bfbe      	ittt	lt
 800a9fc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800aa00:	fa40 f303 	asrlt.w	r3, r0, r3
 800aa04:	18c9      	addlt	r1, r1, r3
 800aa06:	ea21 0102 	bic.w	r1, r1, r2
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7e0      	b.n	800a9d0 <floor+0x40>
 800aa0e:	2b33      	cmp	r3, #51	; 0x33
 800aa10:	dd05      	ble.n	800aa1e <floor+0x8e>
 800aa12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa16:	d101      	bne.n	800aa1c <floor+0x8c>
 800aa18:	ee30 0b00 	vadd.f64	d0, d0, d0
 800aa1c:	bd30      	pop	{r4, r5, pc}
 800aa1e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800aa22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa26:	40e2      	lsrs	r2, r4
 800aa28:	4202      	tst	r2, r0
 800aa2a:	d0f7      	beq.n	800aa1c <floor+0x8c>
 800aa2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800aa68 <floor+0xd8>
 800aa30:	ee30 0b07 	vadd.f64	d0, d0, d7
 800aa34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3c:	ddc8      	ble.n	800a9d0 <floor+0x40>
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	da02      	bge.n	800aa48 <floor+0xb8>
 800aa42:	2b14      	cmp	r3, #20
 800aa44:	d103      	bne.n	800aa4e <floor+0xbe>
 800aa46:	3101      	adds	r1, #1
 800aa48:	ea20 0002 	bic.w	r0, r0, r2
 800aa4c:	e7c0      	b.n	800a9d0 <floor+0x40>
 800aa4e:	2401      	movs	r4, #1
 800aa50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa54:	fa04 f303 	lsl.w	r3, r4, r3
 800aa58:	4418      	add	r0, r3
 800aa5a:	42a8      	cmp	r0, r5
 800aa5c:	bf38      	it	cc
 800aa5e:	1909      	addcc	r1, r1, r4
 800aa60:	e7f2      	b.n	800aa48 <floor+0xb8>
 800aa62:	2000      	movs	r0, #0
 800aa64:	4601      	mov	r1, r0
 800aa66:	e7b3      	b.n	800a9d0 <floor+0x40>
 800aa68:	8800759c 	.word	0x8800759c
 800aa6c:	7e37e43c 	.word	0x7e37e43c
 800aa70:	bff00000 	.word	0xbff00000
 800aa74:	000fffff 	.word	0x000fffff

0800aa78 <nan>:
 800aa78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa80 <nan+0x8>
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	00000000 	.word	0x00000000
 800aa84:	7ff80000 	.word	0x7ff80000

0800aa88 <scalbn>:
 800aa88:	ee10 1a90 	vmov	r1, s1
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800aa92:	b98c      	cbnz	r4, 800aab8 <scalbn+0x30>
 800aa94:	ee10 3a10 	vmov	r3, s0
 800aa98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	d011      	beq.n	800aac4 <scalbn+0x3c>
 800aaa0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800ab68 <scalbn+0xe0>
 800aaa4:	4b3c      	ldr	r3, [pc, #240]	; (800ab98 <scalbn+0x110>)
 800aaa6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	da0b      	bge.n	800aac6 <scalbn+0x3e>
 800aaae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ab70 <scalbn+0xe8>
 800aab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aab6:	e005      	b.n	800aac4 <scalbn+0x3c>
 800aab8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d107      	bne.n	800aad0 <scalbn+0x48>
 800aac0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	ee10 1a90 	vmov	r1, s1
 800aaca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800aace:	3c36      	subs	r4, #54	; 0x36
 800aad0:	4404      	add	r4, r0
 800aad2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800aad6:	429c      	cmp	r4, r3
 800aad8:	dd0d      	ble.n	800aaf6 <scalbn+0x6e>
 800aada:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800ab78 <scalbn+0xf0>
 800aade:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800ab80 <scalbn+0xf8>
 800aae2:	eeb0 6b47 	vmov.f64	d6, d7
 800aae6:	ee10 3a90 	vmov	r3, s1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	fe27 7b05 	vselge.f64	d7, d7, d5
 800aaf0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800aaf4:	e7e6      	b.n	800aac4 <scalbn+0x3c>
 800aaf6:	2c00      	cmp	r4, #0
 800aaf8:	dd0a      	ble.n	800ab10 <scalbn+0x88>
 800aafa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800aafe:	ec53 2b10 	vmov	r2, r3, d0
 800ab02:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ab06:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800ab0a:	ec43 2b10 	vmov	d0, r2, r3
 800ab0e:	e7d9      	b.n	800aac4 <scalbn+0x3c>
 800ab10:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800ab14:	da19      	bge.n	800ab4a <scalbn+0xc2>
 800ab16:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab1a:	4298      	cmp	r0, r3
 800ab1c:	ee10 3a90 	vmov	r3, s1
 800ab20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab24:	dd09      	ble.n	800ab3a <scalbn+0xb2>
 800ab26:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800ab78 <scalbn+0xf0>
 800ab2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ab80 <scalbn+0xf8>
 800ab2e:	eeb0 7b40 	vmov.f64	d7, d0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800ab38:	e7bb      	b.n	800aab2 <scalbn+0x2a>
 800ab3a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800ab70 <scalbn+0xe8>
 800ab3e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800ab88 <scalbn+0x100>
 800ab42:	eeb0 7b40 	vmov.f64	d7, d0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	e7f4      	b.n	800ab34 <scalbn+0xac>
 800ab4a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800ab4e:	ec53 2b10 	vmov	r2, r3, d0
 800ab52:	3436      	adds	r4, #54	; 0x36
 800ab54:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ab58:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800ab5c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ab90 <scalbn+0x108>
 800ab60:	ec43 2b10 	vmov	d0, r2, r3
 800ab64:	e7a5      	b.n	800aab2 <scalbn+0x2a>
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	43500000 	.word	0x43500000
 800ab70:	c2f8f359 	.word	0xc2f8f359
 800ab74:	01a56e1f 	.word	0x01a56e1f
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	7e37e43c 	.word	0x7e37e43c
 800ab80:	8800759c 	.word	0x8800759c
 800ab84:	fe37e43c 	.word	0xfe37e43c
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	81a56e1f 	.word	0x81a56e1f
 800ab90:	00000000 	.word	0x00000000
 800ab94:	3c900000 	.word	0x3c900000
 800ab98:	ffff3cb0 	.word	0xffff3cb0

0800ab9c <__errno>:
 800ab9c:	4b01      	ldr	r3, [pc, #4]	; (800aba4 <__errno+0x8>)
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	24000010 	.word	0x24000010

0800aba8 <__libc_init_array>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	4d0d      	ldr	r5, [pc, #52]	; (800abe0 <__libc_init_array+0x38>)
 800abac:	4c0d      	ldr	r4, [pc, #52]	; (800abe4 <__libc_init_array+0x3c>)
 800abae:	1b64      	subs	r4, r4, r5
 800abb0:	10a4      	asrs	r4, r4, #2
 800abb2:	2600      	movs	r6, #0
 800abb4:	42a6      	cmp	r6, r4
 800abb6:	d109      	bne.n	800abcc <__libc_init_array+0x24>
 800abb8:	4d0b      	ldr	r5, [pc, #44]	; (800abe8 <__libc_init_array+0x40>)
 800abba:	4c0c      	ldr	r4, [pc, #48]	; (800abec <__libc_init_array+0x44>)
 800abbc:	f004 ffb6 	bl	800fb2c <_init>
 800abc0:	1b64      	subs	r4, r4, r5
 800abc2:	10a4      	asrs	r4, r4, #2
 800abc4:	2600      	movs	r6, #0
 800abc6:	42a6      	cmp	r6, r4
 800abc8:	d105      	bne.n	800abd6 <__libc_init_array+0x2e>
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd0:	4798      	blx	r3
 800abd2:	3601      	adds	r6, #1
 800abd4:	e7ee      	b.n	800abb4 <__libc_init_array+0xc>
 800abd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abda:	4798      	blx	r3
 800abdc:	3601      	adds	r6, #1
 800abde:	e7f2      	b.n	800abc6 <__libc_init_array+0x1e>
 800abe0:	080103a4 	.word	0x080103a4
 800abe4:	080103a4 	.word	0x080103a4
 800abe8:	080103a4 	.word	0x080103a4
 800abec:	080103a8 	.word	0x080103a8

0800abf0 <malloc>:
 800abf0:	4b02      	ldr	r3, [pc, #8]	; (800abfc <malloc+0xc>)
 800abf2:	4601      	mov	r1, r0
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	f000 b877 	b.w	800ace8 <_malloc_r>
 800abfa:	bf00      	nop
 800abfc:	24000010 	.word	0x24000010

0800ac00 <memset>:
 800ac00:	4402      	add	r2, r0
 800ac02:	4603      	mov	r3, r0
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d100      	bne.n	800ac0a <memset+0xa>
 800ac08:	4770      	bx	lr
 800ac0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac0e:	e7f9      	b.n	800ac04 <memset+0x4>

0800ac10 <_free_r>:
 800ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac12:	2900      	cmp	r1, #0
 800ac14:	d044      	beq.n	800aca0 <_free_r+0x90>
 800ac16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac1a:	9001      	str	r0, [sp, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac22:	bfb8      	it	lt
 800ac24:	18e4      	addlt	r4, r4, r3
 800ac26:	f002 ffe3 	bl	800dbf0 <__malloc_lock>
 800ac2a:	4a1e      	ldr	r2, [pc, #120]	; (800aca4 <_free_r+0x94>)
 800ac2c:	9801      	ldr	r0, [sp, #4]
 800ac2e:	6813      	ldr	r3, [r2, #0]
 800ac30:	b933      	cbnz	r3, 800ac40 <_free_r+0x30>
 800ac32:	6063      	str	r3, [r4, #4]
 800ac34:	6014      	str	r4, [r2, #0]
 800ac36:	b003      	add	sp, #12
 800ac38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac3c:	f002 bfde 	b.w	800dbfc <__malloc_unlock>
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d908      	bls.n	800ac56 <_free_r+0x46>
 800ac44:	6825      	ldr	r5, [r4, #0]
 800ac46:	1961      	adds	r1, r4, r5
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	bf01      	itttt	eq
 800ac4c:	6819      	ldreq	r1, [r3, #0]
 800ac4e:	685b      	ldreq	r3, [r3, #4]
 800ac50:	1949      	addeq	r1, r1, r5
 800ac52:	6021      	streq	r1, [r4, #0]
 800ac54:	e7ed      	b.n	800ac32 <_free_r+0x22>
 800ac56:	461a      	mov	r2, r3
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	b10b      	cbz	r3, 800ac60 <_free_r+0x50>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d9fa      	bls.n	800ac56 <_free_r+0x46>
 800ac60:	6811      	ldr	r1, [r2, #0]
 800ac62:	1855      	adds	r5, r2, r1
 800ac64:	42a5      	cmp	r5, r4
 800ac66:	d10b      	bne.n	800ac80 <_free_r+0x70>
 800ac68:	6824      	ldr	r4, [r4, #0]
 800ac6a:	4421      	add	r1, r4
 800ac6c:	1854      	adds	r4, r2, r1
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	d1e0      	bne.n	800ac36 <_free_r+0x26>
 800ac74:	681c      	ldr	r4, [r3, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	6053      	str	r3, [r2, #4]
 800ac7a:	4421      	add	r1, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	e7da      	b.n	800ac36 <_free_r+0x26>
 800ac80:	d902      	bls.n	800ac88 <_free_r+0x78>
 800ac82:	230c      	movs	r3, #12
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	e7d6      	b.n	800ac36 <_free_r+0x26>
 800ac88:	6825      	ldr	r5, [r4, #0]
 800ac8a:	1961      	adds	r1, r4, r5
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	bf04      	itt	eq
 800ac90:	6819      	ldreq	r1, [r3, #0]
 800ac92:	685b      	ldreq	r3, [r3, #4]
 800ac94:	6063      	str	r3, [r4, #4]
 800ac96:	bf04      	itt	eq
 800ac98:	1949      	addeq	r1, r1, r5
 800ac9a:	6021      	streq	r1, [r4, #0]
 800ac9c:	6054      	str	r4, [r2, #4]
 800ac9e:	e7ca      	b.n	800ac36 <_free_r+0x26>
 800aca0:	b003      	add	sp, #12
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	240004a8 	.word	0x240004a8

0800aca8 <sbrk_aligned>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4e0e      	ldr	r6, [pc, #56]	; (800ace4 <sbrk_aligned+0x3c>)
 800acac:	460c      	mov	r4, r1
 800acae:	6831      	ldr	r1, [r6, #0]
 800acb0:	4605      	mov	r5, r0
 800acb2:	b911      	cbnz	r1, 800acba <sbrk_aligned+0x12>
 800acb4:	f000 fed4 	bl	800ba60 <_sbrk_r>
 800acb8:	6030      	str	r0, [r6, #0]
 800acba:	4621      	mov	r1, r4
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 fecf 	bl	800ba60 <_sbrk_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d00a      	beq.n	800acdc <sbrk_aligned+0x34>
 800acc6:	1cc4      	adds	r4, r0, #3
 800acc8:	f024 0403 	bic.w	r4, r4, #3
 800accc:	42a0      	cmp	r0, r4
 800acce:	d007      	beq.n	800ace0 <sbrk_aligned+0x38>
 800acd0:	1a21      	subs	r1, r4, r0
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 fec4 	bl	800ba60 <_sbrk_r>
 800acd8:	3001      	adds	r0, #1
 800acda:	d101      	bne.n	800ace0 <sbrk_aligned+0x38>
 800acdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ace0:	4620      	mov	r0, r4
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	240004ac 	.word	0x240004ac

0800ace8 <_malloc_r>:
 800ace8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acec:	1ccd      	adds	r5, r1, #3
 800acee:	f025 0503 	bic.w	r5, r5, #3
 800acf2:	3508      	adds	r5, #8
 800acf4:	2d0c      	cmp	r5, #12
 800acf6:	bf38      	it	cc
 800acf8:	250c      	movcc	r5, #12
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	4607      	mov	r7, r0
 800acfe:	db01      	blt.n	800ad04 <_malloc_r+0x1c>
 800ad00:	42a9      	cmp	r1, r5
 800ad02:	d905      	bls.n	800ad10 <_malloc_r+0x28>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	2600      	movs	r6, #0
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	4e2e      	ldr	r6, [pc, #184]	; (800adcc <_malloc_r+0xe4>)
 800ad12:	f002 ff6d 	bl	800dbf0 <__malloc_lock>
 800ad16:	6833      	ldr	r3, [r6, #0]
 800ad18:	461c      	mov	r4, r3
 800ad1a:	bb34      	cbnz	r4, 800ad6a <_malloc_r+0x82>
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4638      	mov	r0, r7
 800ad20:	f7ff ffc2 	bl	800aca8 <sbrk_aligned>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	4604      	mov	r4, r0
 800ad28:	d14d      	bne.n	800adc6 <_malloc_r+0xde>
 800ad2a:	6834      	ldr	r4, [r6, #0]
 800ad2c:	4626      	mov	r6, r4
 800ad2e:	2e00      	cmp	r6, #0
 800ad30:	d140      	bne.n	800adb4 <_malloc_r+0xcc>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	4631      	mov	r1, r6
 800ad36:	4638      	mov	r0, r7
 800ad38:	eb04 0803 	add.w	r8, r4, r3
 800ad3c:	f000 fe90 	bl	800ba60 <_sbrk_r>
 800ad40:	4580      	cmp	r8, r0
 800ad42:	d13a      	bne.n	800adba <_malloc_r+0xd2>
 800ad44:	6821      	ldr	r1, [r4, #0]
 800ad46:	3503      	adds	r5, #3
 800ad48:	1a6d      	subs	r5, r5, r1
 800ad4a:	f025 0503 	bic.w	r5, r5, #3
 800ad4e:	3508      	adds	r5, #8
 800ad50:	2d0c      	cmp	r5, #12
 800ad52:	bf38      	it	cc
 800ad54:	250c      	movcc	r5, #12
 800ad56:	4629      	mov	r1, r5
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff ffa5 	bl	800aca8 <sbrk_aligned>
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d02b      	beq.n	800adba <_malloc_r+0xd2>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	442b      	add	r3, r5
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	e00e      	b.n	800ad88 <_malloc_r+0xa0>
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	1b52      	subs	r2, r2, r5
 800ad6e:	d41e      	bmi.n	800adae <_malloc_r+0xc6>
 800ad70:	2a0b      	cmp	r2, #11
 800ad72:	d916      	bls.n	800ada2 <_malloc_r+0xba>
 800ad74:	1961      	adds	r1, r4, r5
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	6025      	str	r5, [r4, #0]
 800ad7a:	bf18      	it	ne
 800ad7c:	6059      	strne	r1, [r3, #4]
 800ad7e:	6863      	ldr	r3, [r4, #4]
 800ad80:	bf08      	it	eq
 800ad82:	6031      	streq	r1, [r6, #0]
 800ad84:	5162      	str	r2, [r4, r5]
 800ad86:	604b      	str	r3, [r1, #4]
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f104 060b 	add.w	r6, r4, #11
 800ad8e:	f002 ff35 	bl	800dbfc <__malloc_unlock>
 800ad92:	f026 0607 	bic.w	r6, r6, #7
 800ad96:	1d23      	adds	r3, r4, #4
 800ad98:	1af2      	subs	r2, r6, r3
 800ad9a:	d0b6      	beq.n	800ad0a <_malloc_r+0x22>
 800ad9c:	1b9b      	subs	r3, r3, r6
 800ad9e:	50a3      	str	r3, [r4, r2]
 800ada0:	e7b3      	b.n	800ad0a <_malloc_r+0x22>
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	bf0c      	ite	eq
 800ada8:	6032      	streq	r2, [r6, #0]
 800adaa:	605a      	strne	r2, [r3, #4]
 800adac:	e7ec      	b.n	800ad88 <_malloc_r+0xa0>
 800adae:	4623      	mov	r3, r4
 800adb0:	6864      	ldr	r4, [r4, #4]
 800adb2:	e7b2      	b.n	800ad1a <_malloc_r+0x32>
 800adb4:	4634      	mov	r4, r6
 800adb6:	6876      	ldr	r6, [r6, #4]
 800adb8:	e7b9      	b.n	800ad2e <_malloc_r+0x46>
 800adba:	230c      	movs	r3, #12
 800adbc:	603b      	str	r3, [r7, #0]
 800adbe:	4638      	mov	r0, r7
 800adc0:	f002 ff1c 	bl	800dbfc <__malloc_unlock>
 800adc4:	e7a1      	b.n	800ad0a <_malloc_r+0x22>
 800adc6:	6025      	str	r5, [r4, #0]
 800adc8:	e7de      	b.n	800ad88 <_malloc_r+0xa0>
 800adca:	bf00      	nop
 800adcc:	240004a8 	.word	0x240004a8

0800add0 <__cvt>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	ed2d 8b02 	vpush	{d8}
 800add6:	eeb0 8b40 	vmov.f64	d8, d0
 800adda:	b085      	sub	sp, #20
 800addc:	4617      	mov	r7, r2
 800adde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ade0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ade2:	ee18 2a90 	vmov	r2, s17
 800ade6:	f025 0520 	bic.w	r5, r5, #32
 800adea:	2a00      	cmp	r2, #0
 800adec:	bfb6      	itet	lt
 800adee:	222d      	movlt	r2, #45	; 0x2d
 800adf0:	2200      	movge	r2, #0
 800adf2:	eeb1 8b40 	vneglt.f64	d8, d0
 800adf6:	2d46      	cmp	r5, #70	; 0x46
 800adf8:	460c      	mov	r4, r1
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	d004      	beq.n	800ae08 <__cvt+0x38>
 800adfe:	2d45      	cmp	r5, #69	; 0x45
 800ae00:	d100      	bne.n	800ae04 <__cvt+0x34>
 800ae02:	3401      	adds	r4, #1
 800ae04:	2102      	movs	r1, #2
 800ae06:	e000      	b.n	800ae0a <__cvt+0x3a>
 800ae08:	2103      	movs	r1, #3
 800ae0a:	ab03      	add	r3, sp, #12
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	ab02      	add	r3, sp, #8
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	4622      	mov	r2, r4
 800ae14:	4633      	mov	r3, r6
 800ae16:	eeb0 0b48 	vmov.f64	d0, d8
 800ae1a:	f001 fdd5 	bl	800c9c8 <_dtoa_r>
 800ae1e:	2d47      	cmp	r5, #71	; 0x47
 800ae20:	d101      	bne.n	800ae26 <__cvt+0x56>
 800ae22:	07fb      	lsls	r3, r7, #31
 800ae24:	d51a      	bpl.n	800ae5c <__cvt+0x8c>
 800ae26:	2d46      	cmp	r5, #70	; 0x46
 800ae28:	eb00 0204 	add.w	r2, r0, r4
 800ae2c:	d10c      	bne.n	800ae48 <__cvt+0x78>
 800ae2e:	7803      	ldrb	r3, [r0, #0]
 800ae30:	2b30      	cmp	r3, #48	; 0x30
 800ae32:	d107      	bne.n	800ae44 <__cvt+0x74>
 800ae34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3c:	bf1c      	itt	ne
 800ae3e:	f1c4 0401 	rsbne	r4, r4, #1
 800ae42:	6034      	strne	r4, [r6, #0]
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	441a      	add	r2, r3
 800ae48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae50:	bf08      	it	eq
 800ae52:	9203      	streq	r2, [sp, #12]
 800ae54:	2130      	movs	r1, #48	; 0x30
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d307      	bcc.n	800ae6c <__cvt+0x9c>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae60:	1a1b      	subs	r3, r3, r0
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	b005      	add	sp, #20
 800ae66:	ecbd 8b02 	vpop	{d8}
 800ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6c:	1c5c      	adds	r4, r3, #1
 800ae6e:	9403      	str	r4, [sp, #12]
 800ae70:	7019      	strb	r1, [r3, #0]
 800ae72:	e7f0      	b.n	800ae56 <__cvt+0x86>

0800ae74 <__exponent>:
 800ae74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae76:	4603      	mov	r3, r0
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	bfb8      	it	lt
 800ae7c:	4249      	neglt	r1, r1
 800ae7e:	f803 2b02 	strb.w	r2, [r3], #2
 800ae82:	bfb4      	ite	lt
 800ae84:	222d      	movlt	r2, #45	; 0x2d
 800ae86:	222b      	movge	r2, #43	; 0x2b
 800ae88:	2909      	cmp	r1, #9
 800ae8a:	7042      	strb	r2, [r0, #1]
 800ae8c:	dd2a      	ble.n	800aee4 <__exponent+0x70>
 800ae8e:	f10d 0407 	add.w	r4, sp, #7
 800ae92:	46a4      	mov	ip, r4
 800ae94:	270a      	movs	r7, #10
 800ae96:	46a6      	mov	lr, r4
 800ae98:	460a      	mov	r2, r1
 800ae9a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae9e:	fb07 1516 	mls	r5, r7, r6, r1
 800aea2:	3530      	adds	r5, #48	; 0x30
 800aea4:	2a63      	cmp	r2, #99	; 0x63
 800aea6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aeaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aeae:	4631      	mov	r1, r6
 800aeb0:	dcf1      	bgt.n	800ae96 <__exponent+0x22>
 800aeb2:	3130      	adds	r1, #48	; 0x30
 800aeb4:	f1ae 0502 	sub.w	r5, lr, #2
 800aeb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aebc:	1c44      	adds	r4, r0, #1
 800aebe:	4629      	mov	r1, r5
 800aec0:	4561      	cmp	r1, ip
 800aec2:	d30a      	bcc.n	800aeda <__exponent+0x66>
 800aec4:	f10d 0209 	add.w	r2, sp, #9
 800aec8:	eba2 020e 	sub.w	r2, r2, lr
 800aecc:	4565      	cmp	r5, ip
 800aece:	bf88      	it	hi
 800aed0:	2200      	movhi	r2, #0
 800aed2:	4413      	add	r3, r2
 800aed4:	1a18      	subs	r0, r3, r0
 800aed6:	b003      	add	sp, #12
 800aed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aede:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aee2:	e7ed      	b.n	800aec0 <__exponent+0x4c>
 800aee4:	2330      	movs	r3, #48	; 0x30
 800aee6:	3130      	adds	r1, #48	; 0x30
 800aee8:	7083      	strb	r3, [r0, #2]
 800aeea:	70c1      	strb	r1, [r0, #3]
 800aeec:	1d03      	adds	r3, r0, #4
 800aeee:	e7f1      	b.n	800aed4 <__exponent+0x60>

0800aef0 <_printf_float>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	b08b      	sub	sp, #44	; 0x2c
 800aef6:	460c      	mov	r4, r1
 800aef8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800aefc:	4616      	mov	r6, r2
 800aefe:	461f      	mov	r7, r3
 800af00:	4605      	mov	r5, r0
 800af02:	f002 fe3f 	bl	800db84 <_localeconv_r>
 800af06:	f8d0 b000 	ldr.w	fp, [r0]
 800af0a:	4658      	mov	r0, fp
 800af0c:	f7f5 f9e8 	bl	80002e0 <strlen>
 800af10:	2300      	movs	r3, #0
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	f8d8 3000 	ldr.w	r3, [r8]
 800af18:	f894 9018 	ldrb.w	r9, [r4, #24]
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	f103 0108 	add.w	r1, r3, #8
 800af28:	f8c8 1000 	str.w	r1, [r8]
 800af2c:	4682      	mov	sl, r0
 800af2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800af36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b198 <_printf_float+0x2a8>
 800af3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800af3e:	eeb0 6bc0 	vabs.f64	d6, d0
 800af42:	eeb4 6b47 	vcmp.f64	d6, d7
 800af46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4a:	dd24      	ble.n	800af96 <_printf_float+0xa6>
 800af4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800af50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af54:	d502      	bpl.n	800af5c <_printf_float+0x6c>
 800af56:	232d      	movs	r3, #45	; 0x2d
 800af58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af5c:	4b90      	ldr	r3, [pc, #576]	; (800b1a0 <_printf_float+0x2b0>)
 800af5e:	4891      	ldr	r0, [pc, #580]	; (800b1a4 <_printf_float+0x2b4>)
 800af60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800af64:	bf94      	ite	ls
 800af66:	4698      	movls	r8, r3
 800af68:	4680      	movhi	r8, r0
 800af6a:	2303      	movs	r3, #3
 800af6c:	6123      	str	r3, [r4, #16]
 800af6e:	f022 0204 	bic.w	r2, r2, #4
 800af72:	2300      	movs	r3, #0
 800af74:	6022      	str	r2, [r4, #0]
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	9700      	str	r7, [sp, #0]
 800af7a:	4633      	mov	r3, r6
 800af7c:	aa09      	add	r2, sp, #36	; 0x24
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f000 f9d3 	bl	800b32c <_printf_common>
 800af86:	3001      	adds	r0, #1
 800af88:	f040 808a 	bne.w	800b0a0 <_printf_float+0x1b0>
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af90:	b00b      	add	sp, #44	; 0x2c
 800af92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af96:	eeb4 0b40 	vcmp.f64	d0, d0
 800af9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af9e:	d709      	bvc.n	800afb4 <_printf_float+0xc4>
 800afa0:	ee10 3a90 	vmov	r3, s1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfbc      	itt	lt
 800afa8:	232d      	movlt	r3, #45	; 0x2d
 800afaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800afae:	487e      	ldr	r0, [pc, #504]	; (800b1a8 <_printf_float+0x2b8>)
 800afb0:	4b7e      	ldr	r3, [pc, #504]	; (800b1ac <_printf_float+0x2bc>)
 800afb2:	e7d5      	b.n	800af60 <_printf_float+0x70>
 800afb4:	6863      	ldr	r3, [r4, #4]
 800afb6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800afba:	9104      	str	r1, [sp, #16]
 800afbc:	1c59      	adds	r1, r3, #1
 800afbe:	d13c      	bne.n	800b03a <_printf_float+0x14a>
 800afc0:	2306      	movs	r3, #6
 800afc2:	6063      	str	r3, [r4, #4]
 800afc4:	2300      	movs	r3, #0
 800afc6:	9303      	str	r3, [sp, #12]
 800afc8:	ab08      	add	r3, sp, #32
 800afca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800afce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800afd2:	ab07      	add	r3, sp, #28
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	6022      	str	r2, [r4, #0]
 800afda:	f10d 031b 	add.w	r3, sp, #27
 800afde:	4628      	mov	r0, r5
 800afe0:	f7ff fef6 	bl	800add0 <__cvt>
 800afe4:	9b04      	ldr	r3, [sp, #16]
 800afe6:	9907      	ldr	r1, [sp, #28]
 800afe8:	2b47      	cmp	r3, #71	; 0x47
 800afea:	4680      	mov	r8, r0
 800afec:	d108      	bne.n	800b000 <_printf_float+0x110>
 800afee:	1cc8      	adds	r0, r1, #3
 800aff0:	db02      	blt.n	800aff8 <_printf_float+0x108>
 800aff2:	6863      	ldr	r3, [r4, #4]
 800aff4:	4299      	cmp	r1, r3
 800aff6:	dd41      	ble.n	800b07c <_printf_float+0x18c>
 800aff8:	f1a9 0902 	sub.w	r9, r9, #2
 800affc:	fa5f f989 	uxtb.w	r9, r9
 800b000:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b004:	d820      	bhi.n	800b048 <_printf_float+0x158>
 800b006:	3901      	subs	r1, #1
 800b008:	464a      	mov	r2, r9
 800b00a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b00e:	9107      	str	r1, [sp, #28]
 800b010:	f7ff ff30 	bl	800ae74 <__exponent>
 800b014:	9a08      	ldr	r2, [sp, #32]
 800b016:	9004      	str	r0, [sp, #16]
 800b018:	1813      	adds	r3, r2, r0
 800b01a:	2a01      	cmp	r2, #1
 800b01c:	6123      	str	r3, [r4, #16]
 800b01e:	dc02      	bgt.n	800b026 <_printf_float+0x136>
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	07d2      	lsls	r2, r2, #31
 800b024:	d501      	bpl.n	800b02a <_printf_float+0x13a>
 800b026:	3301      	adds	r3, #1
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0a2      	beq.n	800af78 <_printf_float+0x88>
 800b032:	232d      	movs	r3, #45	; 0x2d
 800b034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b038:	e79e      	b.n	800af78 <_printf_float+0x88>
 800b03a:	9904      	ldr	r1, [sp, #16]
 800b03c:	2947      	cmp	r1, #71	; 0x47
 800b03e:	d1c1      	bne.n	800afc4 <_printf_float+0xd4>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1bf      	bne.n	800afc4 <_printf_float+0xd4>
 800b044:	2301      	movs	r3, #1
 800b046:	e7bc      	b.n	800afc2 <_printf_float+0xd2>
 800b048:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b04c:	d118      	bne.n	800b080 <_printf_float+0x190>
 800b04e:	2900      	cmp	r1, #0
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	dd0b      	ble.n	800b06c <_printf_float+0x17c>
 800b054:	6121      	str	r1, [r4, #16]
 800b056:	b913      	cbnz	r3, 800b05e <_printf_float+0x16e>
 800b058:	6822      	ldr	r2, [r4, #0]
 800b05a:	07d0      	lsls	r0, r2, #31
 800b05c:	d502      	bpl.n	800b064 <_printf_float+0x174>
 800b05e:	3301      	adds	r3, #1
 800b060:	440b      	add	r3, r1
 800b062:	6123      	str	r3, [r4, #16]
 800b064:	2300      	movs	r3, #0
 800b066:	65a1      	str	r1, [r4, #88]	; 0x58
 800b068:	9304      	str	r3, [sp, #16]
 800b06a:	e7de      	b.n	800b02a <_printf_float+0x13a>
 800b06c:	b913      	cbnz	r3, 800b074 <_printf_float+0x184>
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	07d2      	lsls	r2, r2, #31
 800b072:	d501      	bpl.n	800b078 <_printf_float+0x188>
 800b074:	3302      	adds	r3, #2
 800b076:	e7f4      	b.n	800b062 <_printf_float+0x172>
 800b078:	2301      	movs	r3, #1
 800b07a:	e7f2      	b.n	800b062 <_printf_float+0x172>
 800b07c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b080:	9b08      	ldr	r3, [sp, #32]
 800b082:	4299      	cmp	r1, r3
 800b084:	db05      	blt.n	800b092 <_printf_float+0x1a2>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	6121      	str	r1, [r4, #16]
 800b08a:	07d8      	lsls	r0, r3, #31
 800b08c:	d5ea      	bpl.n	800b064 <_printf_float+0x174>
 800b08e:	1c4b      	adds	r3, r1, #1
 800b090:	e7e7      	b.n	800b062 <_printf_float+0x172>
 800b092:	2900      	cmp	r1, #0
 800b094:	bfd4      	ite	le
 800b096:	f1c1 0202 	rsble	r2, r1, #2
 800b09a:	2201      	movgt	r2, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	e7e0      	b.n	800b062 <_printf_float+0x172>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	055a      	lsls	r2, r3, #21
 800b0a4:	d407      	bmi.n	800b0b6 <_printf_float+0x1c6>
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d12a      	bne.n	800b10a <_printf_float+0x21a>
 800b0b4:	e76a      	b.n	800af8c <_printf_float+0x9c>
 800b0b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b0ba:	f240 80e2 	bls.w	800b282 <_printf_float+0x392>
 800b0be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b0c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ca:	d133      	bne.n	800b134 <_printf_float+0x244>
 800b0cc:	4a38      	ldr	r2, [pc, #224]	; (800b1b0 <_printf_float+0x2c0>)
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b8      	blx	r7
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f43f af58 	beq.w	800af8c <_printf_float+0x9c>
 800b0dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	db02      	blt.n	800b0ea <_printf_float+0x1fa>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	07d8      	lsls	r0, r3, #31
 800b0e8:	d50f      	bpl.n	800b10a <_printf_float+0x21a>
 800b0ea:	4653      	mov	r3, sl
 800b0ec:	465a      	mov	r2, fp
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f af49 	beq.w	800af8c <_printf_float+0x9c>
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	f104 091a 	add.w	r9, r4, #26
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	3b01      	subs	r3, #1
 800b106:	4543      	cmp	r3, r8
 800b108:	dc09      	bgt.n	800b11e <_printf_float+0x22e>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	079b      	lsls	r3, r3, #30
 800b10e:	f100 8108 	bmi.w	800b322 <_printf_float+0x432>
 800b112:	68e0      	ldr	r0, [r4, #12]
 800b114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b116:	4298      	cmp	r0, r3
 800b118:	bfb8      	it	lt
 800b11a:	4618      	movlt	r0, r3
 800b11c:	e738      	b.n	800af90 <_printf_float+0xa0>
 800b11e:	2301      	movs	r3, #1
 800b120:	464a      	mov	r2, r9
 800b122:	4631      	mov	r1, r6
 800b124:	4628      	mov	r0, r5
 800b126:	47b8      	blx	r7
 800b128:	3001      	adds	r0, #1
 800b12a:	f43f af2f 	beq.w	800af8c <_printf_float+0x9c>
 800b12e:	f108 0801 	add.w	r8, r8, #1
 800b132:	e7e6      	b.n	800b102 <_printf_float+0x212>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dc3c      	bgt.n	800b1b4 <_printf_float+0x2c4>
 800b13a:	4a1d      	ldr	r2, [pc, #116]	; (800b1b0 <_printf_float+0x2c0>)
 800b13c:	2301      	movs	r3, #1
 800b13e:	4631      	mov	r1, r6
 800b140:	4628      	mov	r0, r5
 800b142:	47b8      	blx	r7
 800b144:	3001      	adds	r0, #1
 800b146:	f43f af21 	beq.w	800af8c <_printf_float+0x9c>
 800b14a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b14e:	4313      	orrs	r3, r2
 800b150:	d102      	bne.n	800b158 <_printf_float+0x268>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	07d9      	lsls	r1, r3, #31
 800b156:	d5d8      	bpl.n	800b10a <_printf_float+0x21a>
 800b158:	4653      	mov	r3, sl
 800b15a:	465a      	mov	r2, fp
 800b15c:	4631      	mov	r1, r6
 800b15e:	4628      	mov	r0, r5
 800b160:	47b8      	blx	r7
 800b162:	3001      	adds	r0, #1
 800b164:	f43f af12 	beq.w	800af8c <_printf_float+0x9c>
 800b168:	f04f 0900 	mov.w	r9, #0
 800b16c:	f104 0a1a 	add.w	sl, r4, #26
 800b170:	9b07      	ldr	r3, [sp, #28]
 800b172:	425b      	negs	r3, r3
 800b174:	454b      	cmp	r3, r9
 800b176:	dc01      	bgt.n	800b17c <_printf_float+0x28c>
 800b178:	9b08      	ldr	r3, [sp, #32]
 800b17a:	e795      	b.n	800b0a8 <_printf_float+0x1b8>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4652      	mov	r2, sl
 800b180:	4631      	mov	r1, r6
 800b182:	4628      	mov	r0, r5
 800b184:	47b8      	blx	r7
 800b186:	3001      	adds	r0, #1
 800b188:	f43f af00 	beq.w	800af8c <_printf_float+0x9c>
 800b18c:	f109 0901 	add.w	r9, r9, #1
 800b190:	e7ee      	b.n	800b170 <_printf_float+0x280>
 800b192:	bf00      	nop
 800b194:	f3af 8000 	nop.w
 800b198:	ffffffff 	.word	0xffffffff
 800b19c:	7fefffff 	.word	0x7fefffff
 800b1a0:	0800fee4 	.word	0x0800fee4
 800b1a4:	0800fee8 	.word	0x0800fee8
 800b1a8:	0800fef0 	.word	0x0800fef0
 800b1ac:	0800feec 	.word	0x0800feec
 800b1b0:	080102e9 	.word	0x080102e9
 800b1b4:	9a08      	ldr	r2, [sp, #32]
 800b1b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	bfa8      	it	ge
 800b1bc:	461a      	movge	r2, r3
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	4691      	mov	r9, r2
 800b1c2:	dc38      	bgt.n	800b236 <_printf_float+0x346>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1cc:	f104 021a 	add.w	r2, r4, #26
 800b1d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1d2:	9905      	ldr	r1, [sp, #20]
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	eba3 0309 	sub.w	r3, r3, r9
 800b1da:	428b      	cmp	r3, r1
 800b1dc:	dc33      	bgt.n	800b246 <_printf_float+0x356>
 800b1de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	db3c      	blt.n	800b260 <_printf_float+0x370>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	07da      	lsls	r2, r3, #31
 800b1ea:	d439      	bmi.n	800b260 <_printf_float+0x370>
 800b1ec:	9b08      	ldr	r3, [sp, #32]
 800b1ee:	9a04      	ldr	r2, [sp, #16]
 800b1f0:	9907      	ldr	r1, [sp, #28]
 800b1f2:	1a9a      	subs	r2, r3, r2
 800b1f4:	eba3 0901 	sub.w	r9, r3, r1
 800b1f8:	4591      	cmp	r9, r2
 800b1fa:	bfa8      	it	ge
 800b1fc:	4691      	movge	r9, r2
 800b1fe:	f1b9 0f00 	cmp.w	r9, #0
 800b202:	dc35      	bgt.n	800b270 <_printf_float+0x380>
 800b204:	f04f 0800 	mov.w	r8, #0
 800b208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b20c:	f104 0a1a 	add.w	sl, r4, #26
 800b210:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	eba3 0309 	sub.w	r3, r3, r9
 800b21a:	4543      	cmp	r3, r8
 800b21c:	f77f af75 	ble.w	800b10a <_printf_float+0x21a>
 800b220:	2301      	movs	r3, #1
 800b222:	4652      	mov	r2, sl
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f aeae 	beq.w	800af8c <_printf_float+0x9c>
 800b230:	f108 0801 	add.w	r8, r8, #1
 800b234:	e7ec      	b.n	800b210 <_printf_float+0x320>
 800b236:	4613      	mov	r3, r2
 800b238:	4631      	mov	r1, r6
 800b23a:	4642      	mov	r2, r8
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	d1bf      	bne.n	800b1c4 <_printf_float+0x2d4>
 800b244:	e6a2      	b.n	800af8c <_printf_float+0x9c>
 800b246:	2301      	movs	r3, #1
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	9204      	str	r2, [sp, #16]
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	f43f ae9b 	beq.w	800af8c <_printf_float+0x9c>
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	9a04      	ldr	r2, [sp, #16]
 800b25a:	3301      	adds	r3, #1
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	e7b7      	b.n	800b1d0 <_printf_float+0x2e0>
 800b260:	4653      	mov	r3, sl
 800b262:	465a      	mov	r2, fp
 800b264:	4631      	mov	r1, r6
 800b266:	4628      	mov	r0, r5
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	d1be      	bne.n	800b1ec <_printf_float+0x2fc>
 800b26e:	e68d      	b.n	800af8c <_printf_float+0x9c>
 800b270:	9a04      	ldr	r2, [sp, #16]
 800b272:	464b      	mov	r3, r9
 800b274:	4442      	add	r2, r8
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	d1c1      	bne.n	800b204 <_printf_float+0x314>
 800b280:	e684      	b.n	800af8c <_printf_float+0x9c>
 800b282:	9a08      	ldr	r2, [sp, #32]
 800b284:	2a01      	cmp	r2, #1
 800b286:	dc01      	bgt.n	800b28c <_printf_float+0x39c>
 800b288:	07db      	lsls	r3, r3, #31
 800b28a:	d537      	bpl.n	800b2fc <_printf_float+0x40c>
 800b28c:	2301      	movs	r3, #1
 800b28e:	4642      	mov	r2, r8
 800b290:	4631      	mov	r1, r6
 800b292:	4628      	mov	r0, r5
 800b294:	47b8      	blx	r7
 800b296:	3001      	adds	r0, #1
 800b298:	f43f ae78 	beq.w	800af8c <_printf_float+0x9c>
 800b29c:	4653      	mov	r3, sl
 800b29e:	465a      	mov	r2, fp
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f43f ae70 	beq.w	800af8c <_printf_float+0x9c>
 800b2ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b2b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b8:	d01b      	beq.n	800b2f2 <_printf_float+0x402>
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	f108 0201 	add.w	r2, r8, #1
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d10e      	bne.n	800b2ea <_printf_float+0x3fa>
 800b2cc:	e65e      	b.n	800af8c <_printf_float+0x9c>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	464a      	mov	r2, r9
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f43f ae57 	beq.w	800af8c <_printf_float+0x9c>
 800b2de:	f108 0801 	add.w	r8, r8, #1
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	4543      	cmp	r3, r8
 800b2e8:	dcf1      	bgt.n	800b2ce <_printf_float+0x3de>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2f0:	e6db      	b.n	800b0aa <_printf_float+0x1ba>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	f104 091a 	add.w	r9, r4, #26
 800b2fa:	e7f2      	b.n	800b2e2 <_printf_float+0x3f2>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4642      	mov	r2, r8
 800b300:	e7df      	b.n	800b2c2 <_printf_float+0x3d2>
 800b302:	2301      	movs	r3, #1
 800b304:	464a      	mov	r2, r9
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	f43f ae3d 	beq.w	800af8c <_printf_float+0x9c>
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b31a:	1a5b      	subs	r3, r3, r1
 800b31c:	4543      	cmp	r3, r8
 800b31e:	dcf0      	bgt.n	800b302 <_printf_float+0x412>
 800b320:	e6f7      	b.n	800b112 <_printf_float+0x222>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	f104 0919 	add.w	r9, r4, #25
 800b32a:	e7f4      	b.n	800b316 <_printf_float+0x426>

0800b32c <_printf_common>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	4616      	mov	r6, r2
 800b332:	4699      	mov	r9, r3
 800b334:	688a      	ldr	r2, [r1, #8]
 800b336:	690b      	ldr	r3, [r1, #16]
 800b338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bfb8      	it	lt
 800b340:	4613      	movlt	r3, r2
 800b342:	6033      	str	r3, [r6, #0]
 800b344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b348:	4607      	mov	r7, r0
 800b34a:	460c      	mov	r4, r1
 800b34c:	b10a      	cbz	r2, 800b352 <_printf_common+0x26>
 800b34e:	3301      	adds	r3, #1
 800b350:	6033      	str	r3, [r6, #0]
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	0699      	lsls	r1, r3, #26
 800b356:	bf42      	ittt	mi
 800b358:	6833      	ldrmi	r3, [r6, #0]
 800b35a:	3302      	addmi	r3, #2
 800b35c:	6033      	strmi	r3, [r6, #0]
 800b35e:	6825      	ldr	r5, [r4, #0]
 800b360:	f015 0506 	ands.w	r5, r5, #6
 800b364:	d106      	bne.n	800b374 <_printf_common+0x48>
 800b366:	f104 0a19 	add.w	sl, r4, #25
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	6832      	ldr	r2, [r6, #0]
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc26      	bgt.n	800b3c2 <_printf_common+0x96>
 800b374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b378:	1e13      	subs	r3, r2, #0
 800b37a:	6822      	ldr	r2, [r4, #0]
 800b37c:	bf18      	it	ne
 800b37e:	2301      	movne	r3, #1
 800b380:	0692      	lsls	r2, r2, #26
 800b382:	d42b      	bmi.n	800b3dc <_printf_common+0xb0>
 800b384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b388:	4649      	mov	r1, r9
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	3001      	adds	r0, #1
 800b390:	d01e      	beq.n	800b3d0 <_printf_common+0xa4>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	68e5      	ldr	r5, [r4, #12]
 800b396:	6832      	ldr	r2, [r6, #0]
 800b398:	f003 0306 	and.w	r3, r3, #6
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	bf08      	it	eq
 800b3a0:	1aad      	subeq	r5, r5, r2
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	bf0c      	ite	eq
 800b3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ac:	2500      	movne	r5, #0
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	bfc4      	itt	gt
 800b3b2:	1a9b      	subgt	r3, r3, r2
 800b3b4:	18ed      	addgt	r5, r5, r3
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	341a      	adds	r4, #26
 800b3ba:	42b5      	cmp	r5, r6
 800b3bc:	d11a      	bne.n	800b3f4 <_printf_common+0xc8>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e008      	b.n	800b3d4 <_printf_common+0xa8>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	47c0      	blx	r8
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d103      	bne.n	800b3d8 <_printf_common+0xac>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	3501      	adds	r5, #1
 800b3da:	e7c6      	b.n	800b36a <_printf_common+0x3e>
 800b3dc:	18e1      	adds	r1, r4, r3
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	2030      	movs	r0, #48	; 0x30
 800b3e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3e6:	4422      	add	r2, r4
 800b3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7c7      	b.n	800b384 <_printf_common+0x58>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c0      	blx	r8
 800b3fe:	3001      	adds	r0, #1
 800b400:	d0e6      	beq.n	800b3d0 <_printf_common+0xa4>
 800b402:	3601      	adds	r6, #1
 800b404:	e7d9      	b.n	800b3ba <_printf_common+0x8e>
	...

0800b408 <_printf_i>:
 800b408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	7e0f      	ldrb	r7, [r1, #24]
 800b40e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b410:	2f78      	cmp	r7, #120	; 0x78
 800b412:	4691      	mov	r9, r2
 800b414:	4680      	mov	r8, r0
 800b416:	460c      	mov	r4, r1
 800b418:	469a      	mov	sl, r3
 800b41a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b41e:	d807      	bhi.n	800b430 <_printf_i+0x28>
 800b420:	2f62      	cmp	r7, #98	; 0x62
 800b422:	d80a      	bhi.n	800b43a <_printf_i+0x32>
 800b424:	2f00      	cmp	r7, #0
 800b426:	f000 80d8 	beq.w	800b5da <_printf_i+0x1d2>
 800b42a:	2f58      	cmp	r7, #88	; 0x58
 800b42c:	f000 80a3 	beq.w	800b576 <_printf_i+0x16e>
 800b430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b438:	e03a      	b.n	800b4b0 <_printf_i+0xa8>
 800b43a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b43e:	2b15      	cmp	r3, #21
 800b440:	d8f6      	bhi.n	800b430 <_printf_i+0x28>
 800b442:	a101      	add	r1, pc, #4	; (adr r1, 800b448 <_printf_i+0x40>)
 800b444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4b5 	.word	0x0800b4b5
 800b450:	0800b431 	.word	0x0800b431
 800b454:	0800b431 	.word	0x0800b431
 800b458:	0800b431 	.word	0x0800b431
 800b45c:	0800b431 	.word	0x0800b431
 800b460:	0800b4b5 	.word	0x0800b4b5
 800b464:	0800b431 	.word	0x0800b431
 800b468:	0800b431 	.word	0x0800b431
 800b46c:	0800b431 	.word	0x0800b431
 800b470:	0800b431 	.word	0x0800b431
 800b474:	0800b5c1 	.word	0x0800b5c1
 800b478:	0800b4e5 	.word	0x0800b4e5
 800b47c:	0800b5a3 	.word	0x0800b5a3
 800b480:	0800b431 	.word	0x0800b431
 800b484:	0800b431 	.word	0x0800b431
 800b488:	0800b5e3 	.word	0x0800b5e3
 800b48c:	0800b431 	.word	0x0800b431
 800b490:	0800b4e5 	.word	0x0800b4e5
 800b494:	0800b431 	.word	0x0800b431
 800b498:	0800b431 	.word	0x0800b431
 800b49c:	0800b5ab 	.word	0x0800b5ab
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	602a      	str	r2, [r5, #0]
 800b4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0a3      	b.n	800b5fc <_printf_i+0x1f4>
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	6829      	ldr	r1, [r5, #0]
 800b4b8:	0606      	lsls	r6, r0, #24
 800b4ba:	f101 0304 	add.w	r3, r1, #4
 800b4be:	d50a      	bpl.n	800b4d6 <_printf_i+0xce>
 800b4c0:	680e      	ldr	r6, [r1, #0]
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	da03      	bge.n	800b4d0 <_printf_i+0xc8>
 800b4c8:	232d      	movs	r3, #45	; 0x2d
 800b4ca:	4276      	negs	r6, r6
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d0:	485e      	ldr	r0, [pc, #376]	; (800b64c <_printf_i+0x244>)
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e019      	b.n	800b50a <_printf_i+0x102>
 800b4d6:	680e      	ldr	r6, [r1, #0]
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4de:	bf18      	it	ne
 800b4e0:	b236      	sxthne	r6, r6
 800b4e2:	e7ef      	b.n	800b4c4 <_printf_i+0xbc>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	6820      	ldr	r0, [r4, #0]
 800b4e8:	1d19      	adds	r1, r3, #4
 800b4ea:	6029      	str	r1, [r5, #0]
 800b4ec:	0601      	lsls	r1, r0, #24
 800b4ee:	d501      	bpl.n	800b4f4 <_printf_i+0xec>
 800b4f0:	681e      	ldr	r6, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <_printf_i+0xf2>
 800b4f4:	0646      	lsls	r6, r0, #25
 800b4f6:	d5fb      	bpl.n	800b4f0 <_printf_i+0xe8>
 800b4f8:	881e      	ldrh	r6, [r3, #0]
 800b4fa:	4854      	ldr	r0, [pc, #336]	; (800b64c <_printf_i+0x244>)
 800b4fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b4fe:	bf0c      	ite	eq
 800b500:	2308      	moveq	r3, #8
 800b502:	230a      	movne	r3, #10
 800b504:	2100      	movs	r1, #0
 800b506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b50a:	6865      	ldr	r5, [r4, #4]
 800b50c:	60a5      	str	r5, [r4, #8]
 800b50e:	2d00      	cmp	r5, #0
 800b510:	bfa2      	ittt	ge
 800b512:	6821      	ldrge	r1, [r4, #0]
 800b514:	f021 0104 	bicge.w	r1, r1, #4
 800b518:	6021      	strge	r1, [r4, #0]
 800b51a:	b90e      	cbnz	r6, 800b520 <_printf_i+0x118>
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	d04d      	beq.n	800b5bc <_printf_i+0x1b4>
 800b520:	4615      	mov	r5, r2
 800b522:	fbb6 f1f3 	udiv	r1, r6, r3
 800b526:	fb03 6711 	mls	r7, r3, r1, r6
 800b52a:	5dc7      	ldrb	r7, [r0, r7]
 800b52c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b530:	4637      	mov	r7, r6
 800b532:	42bb      	cmp	r3, r7
 800b534:	460e      	mov	r6, r1
 800b536:	d9f4      	bls.n	800b522 <_printf_i+0x11a>
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d10b      	bne.n	800b554 <_printf_i+0x14c>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	07de      	lsls	r6, r3, #31
 800b540:	d508      	bpl.n	800b554 <_printf_i+0x14c>
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	4299      	cmp	r1, r3
 800b548:	bfde      	ittt	le
 800b54a:	2330      	movle	r3, #48	; 0x30
 800b54c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b550:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b554:	1b52      	subs	r2, r2, r5
 800b556:	6122      	str	r2, [r4, #16]
 800b558:	f8cd a000 	str.w	sl, [sp]
 800b55c:	464b      	mov	r3, r9
 800b55e:	aa03      	add	r2, sp, #12
 800b560:	4621      	mov	r1, r4
 800b562:	4640      	mov	r0, r8
 800b564:	f7ff fee2 	bl	800b32c <_printf_common>
 800b568:	3001      	adds	r0, #1
 800b56a:	d14c      	bne.n	800b606 <_printf_i+0x1fe>
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b570:	b004      	add	sp, #16
 800b572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b576:	4835      	ldr	r0, [pc, #212]	; (800b64c <_printf_i+0x244>)
 800b578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b57c:	6829      	ldr	r1, [r5, #0]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	f851 6b04 	ldr.w	r6, [r1], #4
 800b584:	6029      	str	r1, [r5, #0]
 800b586:	061d      	lsls	r5, r3, #24
 800b588:	d514      	bpl.n	800b5b4 <_printf_i+0x1ac>
 800b58a:	07df      	lsls	r7, r3, #31
 800b58c:	bf44      	itt	mi
 800b58e:	f043 0320 	orrmi.w	r3, r3, #32
 800b592:	6023      	strmi	r3, [r4, #0]
 800b594:	b91e      	cbnz	r6, 800b59e <_printf_i+0x196>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2310      	movs	r3, #16
 800b5a0:	e7b0      	b.n	800b504 <_printf_i+0xfc>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	f043 0320 	orr.w	r3, r3, #32
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	2378      	movs	r3, #120	; 0x78
 800b5ac:	4828      	ldr	r0, [pc, #160]	; (800b650 <_printf_i+0x248>)
 800b5ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5b2:	e7e3      	b.n	800b57c <_printf_i+0x174>
 800b5b4:	0659      	lsls	r1, r3, #25
 800b5b6:	bf48      	it	mi
 800b5b8:	b2b6      	uxthmi	r6, r6
 800b5ba:	e7e6      	b.n	800b58a <_printf_i+0x182>
 800b5bc:	4615      	mov	r5, r2
 800b5be:	e7bb      	b.n	800b538 <_printf_i+0x130>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	6826      	ldr	r6, [r4, #0]
 800b5c4:	6961      	ldr	r1, [r4, #20]
 800b5c6:	1d18      	adds	r0, r3, #4
 800b5c8:	6028      	str	r0, [r5, #0]
 800b5ca:	0635      	lsls	r5, r6, #24
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	d501      	bpl.n	800b5d4 <_printf_i+0x1cc>
 800b5d0:	6019      	str	r1, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <_printf_i+0x1d2>
 800b5d4:	0670      	lsls	r0, r6, #25
 800b5d6:	d5fb      	bpl.n	800b5d0 <_printf_i+0x1c8>
 800b5d8:	8019      	strh	r1, [r3, #0]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	4615      	mov	r5, r2
 800b5e0:	e7ba      	b.n	800b558 <_printf_i+0x150>
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	1d1a      	adds	r2, r3, #4
 800b5e6:	602a      	str	r2, [r5, #0]
 800b5e8:	681d      	ldr	r5, [r3, #0]
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7f4 fe7e 	bl	80002f0 <memchr>
 800b5f4:	b108      	cbz	r0, 800b5fa <_printf_i+0x1f2>
 800b5f6:	1b40      	subs	r0, r0, r5
 800b5f8:	6060      	str	r0, [r4, #4]
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	2300      	movs	r3, #0
 800b600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b604:	e7a8      	b.n	800b558 <_printf_i+0x150>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	462a      	mov	r2, r5
 800b60a:	4649      	mov	r1, r9
 800b60c:	4640      	mov	r0, r8
 800b60e:	47d0      	blx	sl
 800b610:	3001      	adds	r0, #1
 800b612:	d0ab      	beq.n	800b56c <_printf_i+0x164>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	d413      	bmi.n	800b642 <_printf_i+0x23a>
 800b61a:	68e0      	ldr	r0, [r4, #12]
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	4298      	cmp	r0, r3
 800b620:	bfb8      	it	lt
 800b622:	4618      	movlt	r0, r3
 800b624:	e7a4      	b.n	800b570 <_printf_i+0x168>
 800b626:	2301      	movs	r3, #1
 800b628:	4632      	mov	r2, r6
 800b62a:	4649      	mov	r1, r9
 800b62c:	4640      	mov	r0, r8
 800b62e:	47d0      	blx	sl
 800b630:	3001      	adds	r0, #1
 800b632:	d09b      	beq.n	800b56c <_printf_i+0x164>
 800b634:	3501      	adds	r5, #1
 800b636:	68e3      	ldr	r3, [r4, #12]
 800b638:	9903      	ldr	r1, [sp, #12]
 800b63a:	1a5b      	subs	r3, r3, r1
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	dcf2      	bgt.n	800b626 <_printf_i+0x21e>
 800b640:	e7eb      	b.n	800b61a <_printf_i+0x212>
 800b642:	2500      	movs	r5, #0
 800b644:	f104 0619 	add.w	r6, r4, #25
 800b648:	e7f5      	b.n	800b636 <_printf_i+0x22e>
 800b64a:	bf00      	nop
 800b64c:	0800fef4 	.word	0x0800fef4
 800b650:	0800ff05 	.word	0x0800ff05

0800b654 <_scanf_float>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	b087      	sub	sp, #28
 800b65a:	4617      	mov	r7, r2
 800b65c:	9303      	str	r3, [sp, #12]
 800b65e:	688b      	ldr	r3, [r1, #8]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b666:	bf83      	ittte	hi
 800b668:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b66c:	195b      	addhi	r3, r3, r5
 800b66e:	9302      	strhi	r3, [sp, #8]
 800b670:	2300      	movls	r3, #0
 800b672:	bf86      	itte	hi
 800b674:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b678:	608b      	strhi	r3, [r1, #8]
 800b67a:	9302      	strls	r3, [sp, #8]
 800b67c:	680b      	ldr	r3, [r1, #0]
 800b67e:	468b      	mov	fp, r1
 800b680:	2500      	movs	r5, #0
 800b682:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b686:	f84b 3b1c 	str.w	r3, [fp], #28
 800b68a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b68e:	4680      	mov	r8, r0
 800b690:	460c      	mov	r4, r1
 800b692:	465e      	mov	r6, fp
 800b694:	46aa      	mov	sl, r5
 800b696:	46a9      	mov	r9, r5
 800b698:	9501      	str	r5, [sp, #4]
 800b69a:	68a2      	ldr	r2, [r4, #8]
 800b69c:	b152      	cbz	r2, 800b6b4 <_scanf_float+0x60>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b4e      	cmp	r3, #78	; 0x4e
 800b6a4:	d864      	bhi.n	800b770 <_scanf_float+0x11c>
 800b6a6:	2b40      	cmp	r3, #64	; 0x40
 800b6a8:	d83c      	bhi.n	800b724 <_scanf_float+0xd0>
 800b6aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b6ae:	b2c8      	uxtb	r0, r1
 800b6b0:	280e      	cmp	r0, #14
 800b6b2:	d93a      	bls.n	800b72a <_scanf_float+0xd6>
 800b6b4:	f1b9 0f00 	cmp.w	r9, #0
 800b6b8:	d003      	beq.n	800b6c2 <_scanf_float+0x6e>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b6c6:	f1ba 0f01 	cmp.w	sl, #1
 800b6ca:	f200 8113 	bhi.w	800b8f4 <_scanf_float+0x2a0>
 800b6ce:	455e      	cmp	r6, fp
 800b6d0:	f200 8105 	bhi.w	800b8de <_scanf_float+0x28a>
 800b6d4:	2501      	movs	r5, #1
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	b007      	add	sp, #28
 800b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b6e2:	2a0d      	cmp	r2, #13
 800b6e4:	d8e6      	bhi.n	800b6b4 <_scanf_float+0x60>
 800b6e6:	a101      	add	r1, pc, #4	; (adr r1, 800b6ec <_scanf_float+0x98>)
 800b6e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6ec:	0800b82b 	.word	0x0800b82b
 800b6f0:	0800b6b5 	.word	0x0800b6b5
 800b6f4:	0800b6b5 	.word	0x0800b6b5
 800b6f8:	0800b6b5 	.word	0x0800b6b5
 800b6fc:	0800b88b 	.word	0x0800b88b
 800b700:	0800b863 	.word	0x0800b863
 800b704:	0800b6b5 	.word	0x0800b6b5
 800b708:	0800b6b5 	.word	0x0800b6b5
 800b70c:	0800b839 	.word	0x0800b839
 800b710:	0800b6b5 	.word	0x0800b6b5
 800b714:	0800b6b5 	.word	0x0800b6b5
 800b718:	0800b6b5 	.word	0x0800b6b5
 800b71c:	0800b6b5 	.word	0x0800b6b5
 800b720:	0800b7f1 	.word	0x0800b7f1
 800b724:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b728:	e7db      	b.n	800b6e2 <_scanf_float+0x8e>
 800b72a:	290e      	cmp	r1, #14
 800b72c:	d8c2      	bhi.n	800b6b4 <_scanf_float+0x60>
 800b72e:	a001      	add	r0, pc, #4	; (adr r0, 800b734 <_scanf_float+0xe0>)
 800b730:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b734:	0800b7e3 	.word	0x0800b7e3
 800b738:	0800b6b5 	.word	0x0800b6b5
 800b73c:	0800b7e3 	.word	0x0800b7e3
 800b740:	0800b877 	.word	0x0800b877
 800b744:	0800b6b5 	.word	0x0800b6b5
 800b748:	0800b791 	.word	0x0800b791
 800b74c:	0800b7cd 	.word	0x0800b7cd
 800b750:	0800b7cd 	.word	0x0800b7cd
 800b754:	0800b7cd 	.word	0x0800b7cd
 800b758:	0800b7cd 	.word	0x0800b7cd
 800b75c:	0800b7cd 	.word	0x0800b7cd
 800b760:	0800b7cd 	.word	0x0800b7cd
 800b764:	0800b7cd 	.word	0x0800b7cd
 800b768:	0800b7cd 	.word	0x0800b7cd
 800b76c:	0800b7cd 	.word	0x0800b7cd
 800b770:	2b6e      	cmp	r3, #110	; 0x6e
 800b772:	d809      	bhi.n	800b788 <_scanf_float+0x134>
 800b774:	2b60      	cmp	r3, #96	; 0x60
 800b776:	d8b2      	bhi.n	800b6de <_scanf_float+0x8a>
 800b778:	2b54      	cmp	r3, #84	; 0x54
 800b77a:	d077      	beq.n	800b86c <_scanf_float+0x218>
 800b77c:	2b59      	cmp	r3, #89	; 0x59
 800b77e:	d199      	bne.n	800b6b4 <_scanf_float+0x60>
 800b780:	2d07      	cmp	r5, #7
 800b782:	d197      	bne.n	800b6b4 <_scanf_float+0x60>
 800b784:	2508      	movs	r5, #8
 800b786:	e029      	b.n	800b7dc <_scanf_float+0x188>
 800b788:	2b74      	cmp	r3, #116	; 0x74
 800b78a:	d06f      	beq.n	800b86c <_scanf_float+0x218>
 800b78c:	2b79      	cmp	r3, #121	; 0x79
 800b78e:	e7f6      	b.n	800b77e <_scanf_float+0x12a>
 800b790:	6821      	ldr	r1, [r4, #0]
 800b792:	05c8      	lsls	r0, r1, #23
 800b794:	d51a      	bpl.n	800b7cc <_scanf_float+0x178>
 800b796:	9b02      	ldr	r3, [sp, #8]
 800b798:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b79c:	6021      	str	r1, [r4, #0]
 800b79e:	f109 0901 	add.w	r9, r9, #1
 800b7a2:	b11b      	cbz	r3, 800b7ac <_scanf_float+0x158>
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	3201      	adds	r2, #1
 800b7a8:	9302      	str	r3, [sp, #8]
 800b7aa:	60a2      	str	r2, [r4, #8]
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	f340 8084 	ble.w	800b8cc <_scanf_float+0x278>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	603b      	str	r3, [r7, #0]
 800b7ca:	e766      	b.n	800b69a <_scanf_float+0x46>
 800b7cc:	eb1a 0f05 	cmn.w	sl, r5
 800b7d0:	f47f af70 	bne.w	800b6b4 <_scanf_float+0x60>
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b7da:	6022      	str	r2, [r4, #0]
 800b7dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b7e0:	e7e4      	b.n	800b7ac <_scanf_float+0x158>
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	0610      	lsls	r0, r2, #24
 800b7e6:	f57f af65 	bpl.w	800b6b4 <_scanf_float+0x60>
 800b7ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7ee:	e7f4      	b.n	800b7da <_scanf_float+0x186>
 800b7f0:	f1ba 0f00 	cmp.w	sl, #0
 800b7f4:	d10e      	bne.n	800b814 <_scanf_float+0x1c0>
 800b7f6:	f1b9 0f00 	cmp.w	r9, #0
 800b7fa:	d10e      	bne.n	800b81a <_scanf_float+0x1c6>
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b802:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b806:	d108      	bne.n	800b81a <_scanf_float+0x1c6>
 800b808:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b80c:	6022      	str	r2, [r4, #0]
 800b80e:	f04f 0a01 	mov.w	sl, #1
 800b812:	e7e3      	b.n	800b7dc <_scanf_float+0x188>
 800b814:	f1ba 0f02 	cmp.w	sl, #2
 800b818:	d055      	beq.n	800b8c6 <_scanf_float+0x272>
 800b81a:	2d01      	cmp	r5, #1
 800b81c:	d002      	beq.n	800b824 <_scanf_float+0x1d0>
 800b81e:	2d04      	cmp	r5, #4
 800b820:	f47f af48 	bne.w	800b6b4 <_scanf_float+0x60>
 800b824:	3501      	adds	r5, #1
 800b826:	b2ed      	uxtb	r5, r5
 800b828:	e7d8      	b.n	800b7dc <_scanf_float+0x188>
 800b82a:	f1ba 0f01 	cmp.w	sl, #1
 800b82e:	f47f af41 	bne.w	800b6b4 <_scanf_float+0x60>
 800b832:	f04f 0a02 	mov.w	sl, #2
 800b836:	e7d1      	b.n	800b7dc <_scanf_float+0x188>
 800b838:	b97d      	cbnz	r5, 800b85a <_scanf_float+0x206>
 800b83a:	f1b9 0f00 	cmp.w	r9, #0
 800b83e:	f47f af3c 	bne.w	800b6ba <_scanf_float+0x66>
 800b842:	6822      	ldr	r2, [r4, #0]
 800b844:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b848:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b84c:	f47f af39 	bne.w	800b6c2 <_scanf_float+0x6e>
 800b850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b854:	6022      	str	r2, [r4, #0]
 800b856:	2501      	movs	r5, #1
 800b858:	e7c0      	b.n	800b7dc <_scanf_float+0x188>
 800b85a:	2d03      	cmp	r5, #3
 800b85c:	d0e2      	beq.n	800b824 <_scanf_float+0x1d0>
 800b85e:	2d05      	cmp	r5, #5
 800b860:	e7de      	b.n	800b820 <_scanf_float+0x1cc>
 800b862:	2d02      	cmp	r5, #2
 800b864:	f47f af26 	bne.w	800b6b4 <_scanf_float+0x60>
 800b868:	2503      	movs	r5, #3
 800b86a:	e7b7      	b.n	800b7dc <_scanf_float+0x188>
 800b86c:	2d06      	cmp	r5, #6
 800b86e:	f47f af21 	bne.w	800b6b4 <_scanf_float+0x60>
 800b872:	2507      	movs	r5, #7
 800b874:	e7b2      	b.n	800b7dc <_scanf_float+0x188>
 800b876:	6822      	ldr	r2, [r4, #0]
 800b878:	0591      	lsls	r1, r2, #22
 800b87a:	f57f af1b 	bpl.w	800b6b4 <_scanf_float+0x60>
 800b87e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	f8cd 9004 	str.w	r9, [sp, #4]
 800b888:	e7a8      	b.n	800b7dc <_scanf_float+0x188>
 800b88a:	6822      	ldr	r2, [r4, #0]
 800b88c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b890:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b894:	d006      	beq.n	800b8a4 <_scanf_float+0x250>
 800b896:	0550      	lsls	r0, r2, #21
 800b898:	f57f af0c 	bpl.w	800b6b4 <_scanf_float+0x60>
 800b89c:	f1b9 0f00 	cmp.w	r9, #0
 800b8a0:	f43f af0f 	beq.w	800b6c2 <_scanf_float+0x6e>
 800b8a4:	0591      	lsls	r1, r2, #22
 800b8a6:	bf58      	it	pl
 800b8a8:	9901      	ldrpl	r1, [sp, #4]
 800b8aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8ae:	bf58      	it	pl
 800b8b0:	eba9 0101 	subpl.w	r1, r9, r1
 800b8b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b8b8:	bf58      	it	pl
 800b8ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b8be:	6022      	str	r2, [r4, #0]
 800b8c0:	f04f 0900 	mov.w	r9, #0
 800b8c4:	e78a      	b.n	800b7dc <_scanf_float+0x188>
 800b8c6:	f04f 0a03 	mov.w	sl, #3
 800b8ca:	e787      	b.n	800b7dc <_scanf_float+0x188>
 800b8cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8d0:	4639      	mov	r1, r7
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4798      	blx	r3
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f43f aedf 	beq.w	800b69a <_scanf_float+0x46>
 800b8dc:	e6ea      	b.n	800b6b4 <_scanf_float+0x60>
 800b8de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8e6:	463a      	mov	r2, r7
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	4798      	blx	r3
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	e6ec      	b.n	800b6ce <_scanf_float+0x7a>
 800b8f4:	1e6b      	subs	r3, r5, #1
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	d825      	bhi.n	800b946 <_scanf_float+0x2f2>
 800b8fa:	2d02      	cmp	r5, #2
 800b8fc:	d836      	bhi.n	800b96c <_scanf_float+0x318>
 800b8fe:	455e      	cmp	r6, fp
 800b900:	f67f aee8 	bls.w	800b6d4 <_scanf_float+0x80>
 800b904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b908:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b90c:	463a      	mov	r2, r7
 800b90e:	4640      	mov	r0, r8
 800b910:	4798      	blx	r3
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	3b01      	subs	r3, #1
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	e7f1      	b.n	800b8fe <_scanf_float+0x2aa>
 800b91a:	9802      	ldr	r0, [sp, #8]
 800b91c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b920:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b924:	9002      	str	r0, [sp, #8]
 800b926:	463a      	mov	r2, r7
 800b928:	4640      	mov	r0, r8
 800b92a:	4798      	blx	r3
 800b92c:	6923      	ldr	r3, [r4, #16]
 800b92e:	3b01      	subs	r3, #1
 800b930:	6123      	str	r3, [r4, #16]
 800b932:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b936:	fa5f fa8a 	uxtb.w	sl, sl
 800b93a:	f1ba 0f02 	cmp.w	sl, #2
 800b93e:	d1ec      	bne.n	800b91a <_scanf_float+0x2c6>
 800b940:	3d03      	subs	r5, #3
 800b942:	b2ed      	uxtb	r5, r5
 800b944:	1b76      	subs	r6, r6, r5
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	05da      	lsls	r2, r3, #23
 800b94a:	d52f      	bpl.n	800b9ac <_scanf_float+0x358>
 800b94c:	055b      	lsls	r3, r3, #21
 800b94e:	d510      	bpl.n	800b972 <_scanf_float+0x31e>
 800b950:	455e      	cmp	r6, fp
 800b952:	f67f aebf 	bls.w	800b6d4 <_scanf_float+0x80>
 800b956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b95a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b95e:	463a      	mov	r2, r7
 800b960:	4640      	mov	r0, r8
 800b962:	4798      	blx	r3
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	3b01      	subs	r3, #1
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	e7f1      	b.n	800b950 <_scanf_float+0x2fc>
 800b96c:	46aa      	mov	sl, r5
 800b96e:	9602      	str	r6, [sp, #8]
 800b970:	e7df      	b.n	800b932 <_scanf_float+0x2de>
 800b972:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	2965      	cmp	r1, #101	; 0x65
 800b97a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b97e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b982:	6123      	str	r3, [r4, #16]
 800b984:	d00c      	beq.n	800b9a0 <_scanf_float+0x34c>
 800b986:	2945      	cmp	r1, #69	; 0x45
 800b988:	d00a      	beq.n	800b9a0 <_scanf_float+0x34c>
 800b98a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b98e:	463a      	mov	r2, r7
 800b990:	4640      	mov	r0, r8
 800b992:	4798      	blx	r3
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	1eb5      	subs	r5, r6, #2
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9a4:	463a      	mov	r2, r7
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4798      	blx	r3
 800b9aa:	462e      	mov	r6, r5
 800b9ac:	6825      	ldr	r5, [r4, #0]
 800b9ae:	f015 0510 	ands.w	r5, r5, #16
 800b9b2:	d14e      	bne.n	800ba52 <_scanf_float+0x3fe>
 800b9b4:	7035      	strb	r5, [r6, #0]
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c0:	d119      	bne.n	800b9f6 <_scanf_float+0x3a2>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	454b      	cmp	r3, r9
 800b9c6:	eba3 0209 	sub.w	r2, r3, r9
 800b9ca:	d121      	bne.n	800ba10 <_scanf_float+0x3bc>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f000 febf 	bl	800c754 <_strtod_r>
 800b9d6:	6822      	ldr	r2, [r4, #0]
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	f012 0f02 	tst.w	r2, #2
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	d021      	beq.n	800ba26 <_scanf_float+0x3d2>
 800b9e2:	9903      	ldr	r1, [sp, #12]
 800b9e4:	1d1a      	adds	r2, r3, #4
 800b9e6:	600a      	str	r2, [r1, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	ed83 0b00 	vstr	d0, [r3]
 800b9ee:	68e3      	ldr	r3, [r4, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60e3      	str	r3, [r4, #12]
 800b9f4:	e66f      	b.n	800b6d6 <_scanf_float+0x82>
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0e7      	beq.n	800b9cc <_scanf_float+0x378>
 800b9fc:	9905      	ldr	r1, [sp, #20]
 800b9fe:	230a      	movs	r3, #10
 800ba00:	462a      	mov	r2, r5
 800ba02:	3101      	adds	r1, #1
 800ba04:	4640      	mov	r0, r8
 800ba06:	f000 ff2d 	bl	800c864 <_strtol_r>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	9e05      	ldr	r6, [sp, #20]
 800ba0e:	1ac2      	subs	r2, r0, r3
 800ba10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ba14:	429e      	cmp	r6, r3
 800ba16:	bf28      	it	cs
 800ba18:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ba1c:	490e      	ldr	r1, [pc, #56]	; (800ba58 <_scanf_float+0x404>)
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f000 f834 	bl	800ba8c <siprintf>
 800ba24:	e7d2      	b.n	800b9cc <_scanf_float+0x378>
 800ba26:	9903      	ldr	r1, [sp, #12]
 800ba28:	f012 0f04 	tst.w	r2, #4
 800ba2c:	f103 0204 	add.w	r2, r3, #4
 800ba30:	600a      	str	r2, [r1, #0]
 800ba32:	d1d9      	bne.n	800b9e8 <_scanf_float+0x394>
 800ba34:	eeb4 0b40 	vcmp.f64	d0, d0
 800ba38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3c:	681e      	ldr	r6, [r3, #0]
 800ba3e:	d705      	bvc.n	800ba4c <_scanf_float+0x3f8>
 800ba40:	4806      	ldr	r0, [pc, #24]	; (800ba5c <_scanf_float+0x408>)
 800ba42:	f000 f81d 	bl	800ba80 <nanf>
 800ba46:	ed86 0a00 	vstr	s0, [r6]
 800ba4a:	e7d0      	b.n	800b9ee <_scanf_float+0x39a>
 800ba4c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ba50:	e7f9      	b.n	800ba46 <_scanf_float+0x3f2>
 800ba52:	2500      	movs	r5, #0
 800ba54:	e63f      	b.n	800b6d6 <_scanf_float+0x82>
 800ba56:	bf00      	nop
 800ba58:	0800ff16 	.word	0x0800ff16
 800ba5c:	0801033b 	.word	0x0801033b

0800ba60 <_sbrk_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4d06      	ldr	r5, [pc, #24]	; (800ba7c <_sbrk_r+0x1c>)
 800ba64:	2300      	movs	r3, #0
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	602b      	str	r3, [r5, #0]
 800ba6c:	f7f6 fd52 	bl	8002514 <_sbrk>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_sbrk_r+0x1a>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_sbrk_r+0x1a>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	240004b0 	.word	0x240004b0

0800ba80 <nanf>:
 800ba80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba88 <nanf+0x8>
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	7fc00000 	.word	0x7fc00000

0800ba8c <siprintf>:
 800ba8c:	b40e      	push	{r1, r2, r3}
 800ba8e:	b500      	push	{lr}
 800ba90:	b09c      	sub	sp, #112	; 0x70
 800ba92:	ab1d      	add	r3, sp, #116	; 0x74
 800ba94:	9002      	str	r0, [sp, #8]
 800ba96:	9006      	str	r0, [sp, #24]
 800ba98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba9c:	4809      	ldr	r0, [pc, #36]	; (800bac4 <siprintf+0x38>)
 800ba9e:	9107      	str	r1, [sp, #28]
 800baa0:	9104      	str	r1, [sp, #16]
 800baa2:	4909      	ldr	r1, [pc, #36]	; (800bac8 <siprintf+0x3c>)
 800baa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	a902      	add	r1, sp, #8
 800bab0:	f002 fdda 	bl	800e668 <_svfiprintf_r>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	b01c      	add	sp, #112	; 0x70
 800babc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac0:	b003      	add	sp, #12
 800bac2:	4770      	bx	lr
 800bac4:	24000010 	.word	0x24000010
 800bac8:	ffff0208 	.word	0xffff0208

0800bacc <siscanf>:
 800bacc:	b40e      	push	{r1, r2, r3}
 800bace:	b510      	push	{r4, lr}
 800bad0:	b09f      	sub	sp, #124	; 0x7c
 800bad2:	ac21      	add	r4, sp, #132	; 0x84
 800bad4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bad8:	f854 2b04 	ldr.w	r2, [r4], #4
 800badc:	9201      	str	r2, [sp, #4]
 800bade:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bae2:	9004      	str	r0, [sp, #16]
 800bae4:	9008      	str	r0, [sp, #32]
 800bae6:	f7f4 fbfb 	bl	80002e0 <strlen>
 800baea:	4b0c      	ldr	r3, [pc, #48]	; (800bb1c <siscanf+0x50>)
 800baec:	9005      	str	r0, [sp, #20]
 800baee:	9009      	str	r0, [sp, #36]	; 0x24
 800baf0:	930d      	str	r3, [sp, #52]	; 0x34
 800baf2:	480b      	ldr	r0, [pc, #44]	; (800bb20 <siscanf+0x54>)
 800baf4:	9a01      	ldr	r2, [sp, #4]
 800baf6:	6800      	ldr	r0, [r0, #0]
 800baf8:	9403      	str	r4, [sp, #12]
 800bafa:	2300      	movs	r3, #0
 800bafc:	9311      	str	r3, [sp, #68]	; 0x44
 800bafe:	9316      	str	r3, [sp, #88]	; 0x58
 800bb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb04:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4623      	mov	r3, r4
 800bb0c:	f002 ff06 	bl	800e91c <__ssvfiscanf_r>
 800bb10:	b01f      	add	sp, #124	; 0x7c
 800bb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb16:	b003      	add	sp, #12
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	0800bb47 	.word	0x0800bb47
 800bb20:	24000010 	.word	0x24000010

0800bb24 <__sread>:
 800bb24:	b510      	push	{r4, lr}
 800bb26:	460c      	mov	r4, r1
 800bb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb2c:	f003 f9c0 	bl	800eeb0 <_read_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	bfab      	itete	ge
 800bb34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb36:	89a3      	ldrhlt	r3, [r4, #12]
 800bb38:	181b      	addge	r3, r3, r0
 800bb3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb3e:	bfac      	ite	ge
 800bb40:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb42:	81a3      	strhlt	r3, [r4, #12]
 800bb44:	bd10      	pop	{r4, pc}

0800bb46 <__seofread>:
 800bb46:	2000      	movs	r0, #0
 800bb48:	4770      	bx	lr

0800bb4a <__swrite>:
 800bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4e:	461f      	mov	r7, r3
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	05db      	lsls	r3, r3, #23
 800bb54:	4605      	mov	r5, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4616      	mov	r6, r2
 800bb5a:	d505      	bpl.n	800bb68 <__swrite+0x1e>
 800bb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb60:	2302      	movs	r3, #2
 800bb62:	2200      	movs	r2, #0
 800bb64:	f002 f812 	bl	800db8c <_lseek_r>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	4632      	mov	r2, r6
 800bb76:	463b      	mov	r3, r7
 800bb78:	4628      	mov	r0, r5
 800bb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7e:	f000 be73 	b.w	800c868 <_write_r>

0800bb82 <__sseek>:
 800bb82:	b510      	push	{r4, lr}
 800bb84:	460c      	mov	r4, r1
 800bb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8a:	f001 ffff 	bl	800db8c <_lseek_r>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	bf15      	itete	ne
 800bb94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb9e:	81a3      	strheq	r3, [r4, #12]
 800bba0:	bf18      	it	ne
 800bba2:	81a3      	strhne	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__sclose>:
 800bba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbaa:	f000 be6f 	b.w	800c88c <_close_r>

0800bbae <sulp>:
 800bbae:	b570      	push	{r4, r5, r6, lr}
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	ec45 4b10 	vmov	d0, r4, r5
 800bbba:	f002 fb97 	bl	800e2ec <__ulp>
 800bbbe:	b17e      	cbz	r6, 800bbe0 <sulp+0x32>
 800bbc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bbc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd09      	ble.n	800bbe0 <sulp+0x32>
 800bbcc:	051b      	lsls	r3, r3, #20
 800bbce:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bbd8:	ec41 0b17 	vmov	d7, r0, r1
 800bbdc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	0000      	movs	r0, r0
 800bbe4:	0000      	movs	r0, r0
	...

0800bbe8 <_strtod_l>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	ed2d 8b0e 	vpush	{d8-d14}
 800bbf0:	b097      	sub	sp, #92	; 0x5c
 800bbf2:	461f      	mov	r7, r3
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9312      	str	r3, [sp, #72]	; 0x48
 800bbf8:	4ba1      	ldr	r3, [pc, #644]	; (800be80 <_strtod_l+0x298>)
 800bbfa:	920d      	str	r2, [sp, #52]	; 0x34
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	9307      	str	r3, [sp, #28]
 800bc00:	4604      	mov	r4, r0
 800bc02:	4618      	mov	r0, r3
 800bc04:	468b      	mov	fp, r1
 800bc06:	f7f4 fb6b 	bl	80002e0 <strlen>
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	4605      	mov	r5, r0
 800bc10:	f04f 0900 	mov.w	r9, #0
 800bc14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bc18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc1a:	7813      	ldrb	r3, [r2, #0]
 800bc1c:	2b2b      	cmp	r3, #43	; 0x2b
 800bc1e:	d04d      	beq.n	800bcbc <_strtod_l+0xd4>
 800bc20:	d83a      	bhi.n	800bc98 <_strtod_l+0xb0>
 800bc22:	2b0d      	cmp	r3, #13
 800bc24:	d833      	bhi.n	800bc8e <_strtod_l+0xa6>
 800bc26:	2b08      	cmp	r3, #8
 800bc28:	d833      	bhi.n	800bc92 <_strtod_l+0xaa>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d03d      	beq.n	800bcaa <_strtod_l+0xc2>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9308      	str	r3, [sp, #32]
 800bc32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bc34:	7833      	ldrb	r3, [r6, #0]
 800bc36:	2b30      	cmp	r3, #48	; 0x30
 800bc38:	f040 80b0 	bne.w	800bd9c <_strtod_l+0x1b4>
 800bc3c:	7873      	ldrb	r3, [r6, #1]
 800bc3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc42:	2b58      	cmp	r3, #88	; 0x58
 800bc44:	d167      	bne.n	800bd16 <_strtod_l+0x12e>
 800bc46:	9b08      	ldr	r3, [sp, #32]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	ab12      	add	r3, sp, #72	; 0x48
 800bc4c:	9702      	str	r7, [sp, #8]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4a8c      	ldr	r2, [pc, #560]	; (800be84 <_strtod_l+0x29c>)
 800bc52:	ab13      	add	r3, sp, #76	; 0x4c
 800bc54:	a911      	add	r1, sp, #68	; 0x44
 800bc56:	4620      	mov	r0, r4
 800bc58:	f001 fc8c 	bl	800d574 <__gethex>
 800bc5c:	f010 0507 	ands.w	r5, r0, #7
 800bc60:	4607      	mov	r7, r0
 800bc62:	d005      	beq.n	800bc70 <_strtod_l+0x88>
 800bc64:	2d06      	cmp	r5, #6
 800bc66:	d12b      	bne.n	800bcc0 <_strtod_l+0xd8>
 800bc68:	3601      	adds	r6, #1
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9611      	str	r6, [sp, #68]	; 0x44
 800bc6e:	9308      	str	r3, [sp, #32]
 800bc70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 854e 	bne.w	800c714 <_strtod_l+0xb2c>
 800bc78:	9b08      	ldr	r3, [sp, #32]
 800bc7a:	b1e3      	cbz	r3, 800bcb6 <_strtod_l+0xce>
 800bc7c:	ec49 8b17 	vmov	d7, r8, r9
 800bc80:	eeb1 0b47 	vneg.f64	d0, d7
 800bc84:	b017      	add	sp, #92	; 0x5c
 800bc86:	ecbd 8b0e 	vpop	{d8-d14}
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	2b20      	cmp	r3, #32
 800bc90:	d1cd      	bne.n	800bc2e <_strtod_l+0x46>
 800bc92:	3201      	adds	r2, #1
 800bc94:	9211      	str	r2, [sp, #68]	; 0x44
 800bc96:	e7bf      	b.n	800bc18 <_strtod_l+0x30>
 800bc98:	2b2d      	cmp	r3, #45	; 0x2d
 800bc9a:	d1c8      	bne.n	800bc2e <_strtod_l+0x46>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	9308      	str	r3, [sp, #32]
 800bca0:	1c53      	adds	r3, r2, #1
 800bca2:	9311      	str	r3, [sp, #68]	; 0x44
 800bca4:	7853      	ldrb	r3, [r2, #1]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1c3      	bne.n	800bc32 <_strtod_l+0x4a>
 800bcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f040 852d 	bne.w	800c710 <_strtod_l+0xb28>
 800bcb6:	ec49 8b10 	vmov	d0, r8, r9
 800bcba:	e7e3      	b.n	800bc84 <_strtod_l+0x9c>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e7ee      	b.n	800bc9e <_strtod_l+0xb6>
 800bcc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcc2:	b13a      	cbz	r2, 800bcd4 <_strtod_l+0xec>
 800bcc4:	2135      	movs	r1, #53	; 0x35
 800bcc6:	a814      	add	r0, sp, #80	; 0x50
 800bcc8:	f002 fc18 	bl	800e4fc <__copybits>
 800bccc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 ffda 	bl	800dc88 <_Bfree>
 800bcd4:	3d01      	subs	r5, #1
 800bcd6:	2d04      	cmp	r5, #4
 800bcd8:	d806      	bhi.n	800bce8 <_strtod_l+0x100>
 800bcda:	e8df f005 	tbb	[pc, r5]
 800bcde:	030a      	.short	0x030a
 800bce0:	1714      	.short	0x1714
 800bce2:	0a          	.byte	0x0a
 800bce3:	00          	.byte	0x00
 800bce4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800bce8:	073f      	lsls	r7, r7, #28
 800bcea:	d5c1      	bpl.n	800bc70 <_strtod_l+0x88>
 800bcec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bcf0:	e7be      	b.n	800bc70 <_strtod_l+0x88>
 800bcf2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800bcf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bcf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bcfc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bd04:	e7f0      	b.n	800bce8 <_strtod_l+0x100>
 800bd06:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800be88 <_strtod_l+0x2a0>
 800bd0a:	e7ed      	b.n	800bce8 <_strtod_l+0x100>
 800bd0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bd10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bd14:	e7e8      	b.n	800bce8 <_strtod_l+0x100>
 800bd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	9211      	str	r2, [sp, #68]	; 0x44
 800bd1c:	785b      	ldrb	r3, [r3, #1]
 800bd1e:	2b30      	cmp	r3, #48	; 0x30
 800bd20:	d0f9      	beq.n	800bd16 <_strtod_l+0x12e>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0a4      	beq.n	800bc70 <_strtod_l+0x88>
 800bd26:	2301      	movs	r3, #1
 800bd28:	f04f 0a00 	mov.w	sl, #0
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd30:	930a      	str	r3, [sp, #40]	; 0x28
 800bd32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bd36:	f8cd a018 	str.w	sl, [sp, #24]
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bd3e:	7807      	ldrb	r7, [r0, #0]
 800bd40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bd44:	b2d9      	uxtb	r1, r3
 800bd46:	2909      	cmp	r1, #9
 800bd48:	d92a      	bls.n	800bda0 <_strtod_l+0x1b8>
 800bd4a:	9907      	ldr	r1, [sp, #28]
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	f003 f8f9 	bl	800ef44 <strncmp>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d033      	beq.n	800bdbe <_strtod_l+0x1d6>
 800bd56:	2000      	movs	r0, #0
 800bd58:	9b06      	ldr	r3, [sp, #24]
 800bd5a:	463a      	mov	r2, r7
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	4607      	mov	r7, r0
 800bd60:	2a65      	cmp	r2, #101	; 0x65
 800bd62:	d001      	beq.n	800bd68 <_strtod_l+0x180>
 800bd64:	2a45      	cmp	r2, #69	; 0x45
 800bd66:	d117      	bne.n	800bd98 <_strtod_l+0x1b0>
 800bd68:	b91b      	cbnz	r3, 800bd72 <_strtod_l+0x18a>
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	4303      	orrs	r3, r0
 800bd6e:	d09c      	beq.n	800bcaa <_strtod_l+0xc2>
 800bd70:	2300      	movs	r3, #0
 800bd72:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bd76:	f10b 0201 	add.w	r2, fp, #1
 800bd7a:	9211      	str	r2, [sp, #68]	; 0x44
 800bd7c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bd80:	2a2b      	cmp	r2, #43	; 0x2b
 800bd82:	d071      	beq.n	800be68 <_strtod_l+0x280>
 800bd84:	2a2d      	cmp	r2, #45	; 0x2d
 800bd86:	d077      	beq.n	800be78 <_strtod_l+0x290>
 800bd88:	f04f 0e00 	mov.w	lr, #0
 800bd8c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bd90:	2d09      	cmp	r5, #9
 800bd92:	d97f      	bls.n	800be94 <_strtod_l+0x2ac>
 800bd94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bd98:	2500      	movs	r5, #0
 800bd9a:	e09b      	b.n	800bed4 <_strtod_l+0x2ec>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e7c3      	b.n	800bd28 <_strtod_l+0x140>
 800bda0:	9906      	ldr	r1, [sp, #24]
 800bda2:	2908      	cmp	r1, #8
 800bda4:	bfdd      	ittte	le
 800bda6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bda8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bdac:	9309      	strle	r3, [sp, #36]	; 0x24
 800bdae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bdb2:	9b06      	ldr	r3, [sp, #24]
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	9306      	str	r3, [sp, #24]
 800bdba:	9011      	str	r0, [sp, #68]	; 0x44
 800bdbc:	e7be      	b.n	800bd3c <_strtod_l+0x154>
 800bdbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdc0:	195a      	adds	r2, r3, r5
 800bdc2:	9211      	str	r2, [sp, #68]	; 0x44
 800bdc4:	5d5a      	ldrb	r2, [r3, r5]
 800bdc6:	9b06      	ldr	r3, [sp, #24]
 800bdc8:	b3a3      	cbz	r3, 800be34 <_strtod_l+0x24c>
 800bdca:	4607      	mov	r7, r0
 800bdcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bdd0:	2909      	cmp	r1, #9
 800bdd2:	d912      	bls.n	800bdfa <_strtod_l+0x212>
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	e7c3      	b.n	800bd60 <_strtod_l+0x178>
 800bdd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	9211      	str	r2, [sp, #68]	; 0x44
 800bdde:	785a      	ldrb	r2, [r3, #1]
 800bde0:	3001      	adds	r0, #1
 800bde2:	2a30      	cmp	r2, #48	; 0x30
 800bde4:	d0f8      	beq.n	800bdd8 <_strtod_l+0x1f0>
 800bde6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bdea:	2b08      	cmp	r3, #8
 800bdec:	f200 8497 	bhi.w	800c71e <_strtod_l+0xb36>
 800bdf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdf2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	3a30      	subs	r2, #48	; 0x30
 800bdfc:	f100 0101 	add.w	r1, r0, #1
 800be00:	d012      	beq.n	800be28 <_strtod_l+0x240>
 800be02:	440f      	add	r7, r1
 800be04:	eb00 0c03 	add.w	ip, r0, r3
 800be08:	4619      	mov	r1, r3
 800be0a:	250a      	movs	r5, #10
 800be0c:	4561      	cmp	r1, ip
 800be0e:	d113      	bne.n	800be38 <_strtod_l+0x250>
 800be10:	1819      	adds	r1, r3, r0
 800be12:	2908      	cmp	r1, #8
 800be14:	f103 0301 	add.w	r3, r3, #1
 800be18:	4403      	add	r3, r0
 800be1a:	dc1c      	bgt.n	800be56 <_strtod_l+0x26e>
 800be1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be1e:	210a      	movs	r1, #10
 800be20:	fb01 2200 	mla	r2, r1, r0, r2
 800be24:	9209      	str	r2, [sp, #36]	; 0x24
 800be26:	2100      	movs	r1, #0
 800be28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be2a:	1c50      	adds	r0, r2, #1
 800be2c:	9011      	str	r0, [sp, #68]	; 0x44
 800be2e:	7852      	ldrb	r2, [r2, #1]
 800be30:	4608      	mov	r0, r1
 800be32:	e7cb      	b.n	800bdcc <_strtod_l+0x1e4>
 800be34:	9806      	ldr	r0, [sp, #24]
 800be36:	e7d4      	b.n	800bde2 <_strtod_l+0x1fa>
 800be38:	2908      	cmp	r1, #8
 800be3a:	dc04      	bgt.n	800be46 <_strtod_l+0x25e>
 800be3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be3e:	436e      	muls	r6, r5
 800be40:	9609      	str	r6, [sp, #36]	; 0x24
 800be42:	3101      	adds	r1, #1
 800be44:	e7e2      	b.n	800be0c <_strtod_l+0x224>
 800be46:	f101 0e01 	add.w	lr, r1, #1
 800be4a:	f1be 0f10 	cmp.w	lr, #16
 800be4e:	bfd8      	it	le
 800be50:	fb05 fa0a 	mulle.w	sl, r5, sl
 800be54:	e7f5      	b.n	800be42 <_strtod_l+0x25a>
 800be56:	2b10      	cmp	r3, #16
 800be58:	bfdc      	itt	le
 800be5a:	210a      	movle	r1, #10
 800be5c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800be60:	e7e1      	b.n	800be26 <_strtod_l+0x23e>
 800be62:	2700      	movs	r7, #0
 800be64:	2101      	movs	r1, #1
 800be66:	e780      	b.n	800bd6a <_strtod_l+0x182>
 800be68:	f04f 0e00 	mov.w	lr, #0
 800be6c:	f10b 0202 	add.w	r2, fp, #2
 800be70:	9211      	str	r2, [sp, #68]	; 0x44
 800be72:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800be76:	e789      	b.n	800bd8c <_strtod_l+0x1a4>
 800be78:	f04f 0e01 	mov.w	lr, #1
 800be7c:	e7f6      	b.n	800be6c <_strtod_l+0x284>
 800be7e:	bf00      	nop
 800be80:	08010168 	.word	0x08010168
 800be84:	0800ff1c 	.word	0x0800ff1c
 800be88:	7ff00000 	.word	0x7ff00000
 800be8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be8e:	1c55      	adds	r5, r2, #1
 800be90:	9511      	str	r5, [sp, #68]	; 0x44
 800be92:	7852      	ldrb	r2, [r2, #1]
 800be94:	2a30      	cmp	r2, #48	; 0x30
 800be96:	d0f9      	beq.n	800be8c <_strtod_l+0x2a4>
 800be98:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800be9c:	2d08      	cmp	r5, #8
 800be9e:	f63f af7b 	bhi.w	800bd98 <_strtod_l+0x1b0>
 800bea2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bea8:	9207      	str	r2, [sp, #28]
 800beaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800beac:	1c55      	adds	r5, r2, #1
 800beae:	9511      	str	r5, [sp, #68]	; 0x44
 800beb0:	7852      	ldrb	r2, [r2, #1]
 800beb2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800beb6:	2e09      	cmp	r6, #9
 800beb8:	d937      	bls.n	800bf2a <_strtod_l+0x342>
 800beba:	9e07      	ldr	r6, [sp, #28]
 800bebc:	1bad      	subs	r5, r5, r6
 800bebe:	2d08      	cmp	r5, #8
 800bec0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bec4:	dc02      	bgt.n	800becc <_strtod_l+0x2e4>
 800bec6:	4565      	cmp	r5, ip
 800bec8:	bfa8      	it	ge
 800beca:	4665      	movge	r5, ip
 800becc:	f1be 0f00 	cmp.w	lr, #0
 800bed0:	d000      	beq.n	800bed4 <_strtod_l+0x2ec>
 800bed2:	426d      	negs	r5, r5
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d14d      	bne.n	800bf74 <_strtod_l+0x38c>
 800bed8:	9b04      	ldr	r3, [sp, #16]
 800beda:	4303      	orrs	r3, r0
 800bedc:	f47f aec8 	bne.w	800bc70 <_strtod_l+0x88>
 800bee0:	2900      	cmp	r1, #0
 800bee2:	f47f aee2 	bne.w	800bcaa <_strtod_l+0xc2>
 800bee6:	2a69      	cmp	r2, #105	; 0x69
 800bee8:	d027      	beq.n	800bf3a <_strtod_l+0x352>
 800beea:	dc24      	bgt.n	800bf36 <_strtod_l+0x34e>
 800beec:	2a49      	cmp	r2, #73	; 0x49
 800beee:	d024      	beq.n	800bf3a <_strtod_l+0x352>
 800bef0:	2a4e      	cmp	r2, #78	; 0x4e
 800bef2:	f47f aeda 	bne.w	800bcaa <_strtod_l+0xc2>
 800bef6:	4996      	ldr	r1, [pc, #600]	; (800c150 <_strtod_l+0x568>)
 800bef8:	a811      	add	r0, sp, #68	; 0x44
 800befa:	f001 fd93 	bl	800da24 <__match>
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f aed3 	beq.w	800bcaa <_strtod_l+0xc2>
 800bf04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b28      	cmp	r3, #40	; 0x28
 800bf0a:	d12d      	bne.n	800bf68 <_strtod_l+0x380>
 800bf0c:	4991      	ldr	r1, [pc, #580]	; (800c154 <_strtod_l+0x56c>)
 800bf0e:	aa14      	add	r2, sp, #80	; 0x50
 800bf10:	a811      	add	r0, sp, #68	; 0x44
 800bf12:	f001 fd9b 	bl	800da4c <__hexnan>
 800bf16:	2805      	cmp	r0, #5
 800bf18:	d126      	bne.n	800bf68 <_strtod_l+0x380>
 800bf1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf1c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bf20:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bf24:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bf28:	e6a2      	b.n	800bc70 <_strtod_l+0x88>
 800bf2a:	250a      	movs	r5, #10
 800bf2c:	fb05 250c 	mla	r5, r5, ip, r2
 800bf30:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800bf34:	e7b9      	b.n	800beaa <_strtod_l+0x2c2>
 800bf36:	2a6e      	cmp	r2, #110	; 0x6e
 800bf38:	e7db      	b.n	800bef2 <_strtod_l+0x30a>
 800bf3a:	4987      	ldr	r1, [pc, #540]	; (800c158 <_strtod_l+0x570>)
 800bf3c:	a811      	add	r0, sp, #68	; 0x44
 800bf3e:	f001 fd71 	bl	800da24 <__match>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f43f aeb1 	beq.w	800bcaa <_strtod_l+0xc2>
 800bf48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf4a:	4984      	ldr	r1, [pc, #528]	; (800c15c <_strtod_l+0x574>)
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	a811      	add	r0, sp, #68	; 0x44
 800bf50:	9311      	str	r3, [sp, #68]	; 0x44
 800bf52:	f001 fd67 	bl	800da24 <__match>
 800bf56:	b910      	cbnz	r0, 800bf5e <_strtod_l+0x376>
 800bf58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	9311      	str	r3, [sp, #68]	; 0x44
 800bf5e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800c170 <_strtod_l+0x588>
 800bf62:	f04f 0800 	mov.w	r8, #0
 800bf66:	e683      	b.n	800bc70 <_strtod_l+0x88>
 800bf68:	487d      	ldr	r0, [pc, #500]	; (800c160 <_strtod_l+0x578>)
 800bf6a:	f7fe fd85 	bl	800aa78 <nan>
 800bf6e:	ec59 8b10 	vmov	r8, r9, d0
 800bf72:	e67d      	b.n	800bc70 <_strtod_l+0x88>
 800bf74:	1bea      	subs	r2, r5, r7
 800bf76:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bf7a:	9207      	str	r2, [sp, #28]
 800bf7c:	9a06      	ldr	r2, [sp, #24]
 800bf7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	bf08      	it	eq
 800bf86:	461a      	moveq	r2, r3
 800bf88:	2b10      	cmp	r3, #16
 800bf8a:	9206      	str	r2, [sp, #24]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	bfa8      	it	ge
 800bf90:	2210      	movge	r2, #16
 800bf92:	2b09      	cmp	r3, #9
 800bf94:	ec59 8b17 	vmov	r8, r9, d7
 800bf98:	dd0c      	ble.n	800bfb4 <_strtod_l+0x3cc>
 800bf9a:	4972      	ldr	r1, [pc, #456]	; (800c164 <_strtod_l+0x57c>)
 800bf9c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bfa0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bfa4:	ee06 aa90 	vmov	s13, sl
 800bfa8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bfac:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bfb0:	ec59 8b16 	vmov	r8, r9, d6
 800bfb4:	2b0f      	cmp	r3, #15
 800bfb6:	dc36      	bgt.n	800c026 <_strtod_l+0x43e>
 800bfb8:	9907      	ldr	r1, [sp, #28]
 800bfba:	2900      	cmp	r1, #0
 800bfbc:	f43f ae58 	beq.w	800bc70 <_strtod_l+0x88>
 800bfc0:	dd23      	ble.n	800c00a <_strtod_l+0x422>
 800bfc2:	2916      	cmp	r1, #22
 800bfc4:	dc0b      	bgt.n	800bfde <_strtod_l+0x3f6>
 800bfc6:	4b67      	ldr	r3, [pc, #412]	; (800c164 <_strtod_l+0x57c>)
 800bfc8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bfcc:	ed93 7b00 	vldr	d7, [r3]
 800bfd0:	ec49 8b16 	vmov	d6, r8, r9
 800bfd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfd8:	ec59 8b17 	vmov	r8, r9, d7
 800bfdc:	e648      	b.n	800bc70 <_strtod_l+0x88>
 800bfde:	9807      	ldr	r0, [sp, #28]
 800bfe0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bfe4:	4281      	cmp	r1, r0
 800bfe6:	db1e      	blt.n	800c026 <_strtod_l+0x43e>
 800bfe8:	4a5e      	ldr	r2, [pc, #376]	; (800c164 <_strtod_l+0x57c>)
 800bfea:	f1c3 030f 	rsb	r3, r3, #15
 800bfee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bff2:	ed91 7b00 	vldr	d7, [r1]
 800bff6:	ec49 8b16 	vmov	d6, r8, r9
 800bffa:	1ac3      	subs	r3, r0, r3
 800bffc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c000:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c004:	ed92 6b00 	vldr	d6, [r2]
 800c008:	e7e4      	b.n	800bfd4 <_strtod_l+0x3ec>
 800c00a:	9907      	ldr	r1, [sp, #28]
 800c00c:	3116      	adds	r1, #22
 800c00e:	db0a      	blt.n	800c026 <_strtod_l+0x43e>
 800c010:	4b54      	ldr	r3, [pc, #336]	; (800c164 <_strtod_l+0x57c>)
 800c012:	1b7d      	subs	r5, r7, r5
 800c014:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c018:	ed95 7b00 	vldr	d7, [r5]
 800c01c:	ec49 8b16 	vmov	d6, r8, r9
 800c020:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c024:	e7d8      	b.n	800bfd8 <_strtod_l+0x3f0>
 800c026:	9907      	ldr	r1, [sp, #28]
 800c028:	1a9a      	subs	r2, r3, r2
 800c02a:	440a      	add	r2, r1
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	dd6f      	ble.n	800c110 <_strtod_l+0x528>
 800c030:	f012 000f 	ands.w	r0, r2, #15
 800c034:	d00a      	beq.n	800c04c <_strtod_l+0x464>
 800c036:	494b      	ldr	r1, [pc, #300]	; (800c164 <_strtod_l+0x57c>)
 800c038:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c03c:	ed91 7b00 	vldr	d7, [r1]
 800c040:	ec49 8b16 	vmov	d6, r8, r9
 800c044:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c048:	ec59 8b17 	vmov	r8, r9, d7
 800c04c:	f032 020f 	bics.w	r2, r2, #15
 800c050:	d04f      	beq.n	800c0f2 <_strtod_l+0x50a>
 800c052:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c056:	dd22      	ble.n	800c09e <_strtod_l+0x4b6>
 800c058:	2500      	movs	r5, #0
 800c05a:	462e      	mov	r6, r5
 800c05c:	9506      	str	r5, [sp, #24]
 800c05e:	462f      	mov	r7, r5
 800c060:	2322      	movs	r3, #34	; 0x22
 800c062:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800c170 <_strtod_l+0x588>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	f04f 0800 	mov.w	r8, #0
 800c06c:	9b06      	ldr	r3, [sp, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f43f adfe 	beq.w	800bc70 <_strtod_l+0x88>
 800c074:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c076:	4620      	mov	r0, r4
 800c078:	f001 fe06 	bl	800dc88 <_Bfree>
 800c07c:	4639      	mov	r1, r7
 800c07e:	4620      	mov	r0, r4
 800c080:	f001 fe02 	bl	800dc88 <_Bfree>
 800c084:	4631      	mov	r1, r6
 800c086:	4620      	mov	r0, r4
 800c088:	f001 fdfe 	bl	800dc88 <_Bfree>
 800c08c:	9906      	ldr	r1, [sp, #24]
 800c08e:	4620      	mov	r0, r4
 800c090:	f001 fdfa 	bl	800dc88 <_Bfree>
 800c094:	4629      	mov	r1, r5
 800c096:	4620      	mov	r0, r4
 800c098:	f001 fdf6 	bl	800dc88 <_Bfree>
 800c09c:	e5e8      	b.n	800bc70 <_strtod_l+0x88>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	ec49 8b17 	vmov	d7, r8, r9
 800c0a4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800c168 <_strtod_l+0x580>
 800c0a8:	1112      	asrs	r2, r2, #4
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	2a01      	cmp	r2, #1
 800c0ae:	dc23      	bgt.n	800c0f8 <_strtod_l+0x510>
 800c0b0:	b108      	cbz	r0, 800c0b6 <_strtod_l+0x4ce>
 800c0b2:	ec59 8b17 	vmov	r8, r9, d7
 800c0b6:	4a2c      	ldr	r2, [pc, #176]	; (800c168 <_strtod_l+0x580>)
 800c0b8:	482c      	ldr	r0, [pc, #176]	; (800c16c <_strtod_l+0x584>)
 800c0ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c0be:	ed92 7b00 	vldr	d7, [r2]
 800c0c2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c0c6:	ec49 8b16 	vmov	d6, r8, r9
 800c0ca:	4a29      	ldr	r2, [pc, #164]	; (800c170 <_strtod_l+0x588>)
 800c0cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0d0:	ee17 1a90 	vmov	r1, s15
 800c0d4:	400a      	ands	r2, r1
 800c0d6:	4282      	cmp	r2, r0
 800c0d8:	ec59 8b17 	vmov	r8, r9, d7
 800c0dc:	d8bc      	bhi.n	800c058 <_strtod_l+0x470>
 800c0de:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c0e2:	4282      	cmp	r2, r0
 800c0e4:	bf86      	itte	hi
 800c0e6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c174 <_strtod_l+0x58c>
 800c0ea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800c0ee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	9204      	str	r2, [sp, #16]
 800c0f6:	e078      	b.n	800c1ea <_strtod_l+0x602>
 800c0f8:	07d6      	lsls	r6, r2, #31
 800c0fa:	d504      	bpl.n	800c106 <_strtod_l+0x51e>
 800c0fc:	ed9c 6b00 	vldr	d6, [ip]
 800c100:	2001      	movs	r0, #1
 800c102:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c106:	3101      	adds	r1, #1
 800c108:	1052      	asrs	r2, r2, #1
 800c10a:	f10c 0c08 	add.w	ip, ip, #8
 800c10e:	e7cd      	b.n	800c0ac <_strtod_l+0x4c4>
 800c110:	d0ef      	beq.n	800c0f2 <_strtod_l+0x50a>
 800c112:	4252      	negs	r2, r2
 800c114:	f012 000f 	ands.w	r0, r2, #15
 800c118:	d00a      	beq.n	800c130 <_strtod_l+0x548>
 800c11a:	4912      	ldr	r1, [pc, #72]	; (800c164 <_strtod_l+0x57c>)
 800c11c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c120:	ed91 7b00 	vldr	d7, [r1]
 800c124:	ec49 8b16 	vmov	d6, r8, r9
 800c128:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c12c:	ec59 8b17 	vmov	r8, r9, d7
 800c130:	1112      	asrs	r2, r2, #4
 800c132:	d0de      	beq.n	800c0f2 <_strtod_l+0x50a>
 800c134:	2a1f      	cmp	r2, #31
 800c136:	dd1f      	ble.n	800c178 <_strtod_l+0x590>
 800c138:	2500      	movs	r5, #0
 800c13a:	462e      	mov	r6, r5
 800c13c:	9506      	str	r5, [sp, #24]
 800c13e:	462f      	mov	r7, r5
 800c140:	2322      	movs	r3, #34	; 0x22
 800c142:	f04f 0800 	mov.w	r8, #0
 800c146:	f04f 0900 	mov.w	r9, #0
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	e78e      	b.n	800c06c <_strtod_l+0x484>
 800c14e:	bf00      	nop
 800c150:	0800fef1 	.word	0x0800fef1
 800c154:	0800ff30 	.word	0x0800ff30
 800c158:	0800fee9 	.word	0x0800fee9
 800c15c:	08010074 	.word	0x08010074
 800c160:	0801033b 	.word	0x0801033b
 800c164:	08010200 	.word	0x08010200
 800c168:	080101d8 	.word	0x080101d8
 800c16c:	7ca00000 	.word	0x7ca00000
 800c170:	7ff00000 	.word	0x7ff00000
 800c174:	7fefffff 	.word	0x7fefffff
 800c178:	f012 0110 	ands.w	r1, r2, #16
 800c17c:	bf18      	it	ne
 800c17e:	216a      	movne	r1, #106	; 0x6a
 800c180:	9104      	str	r1, [sp, #16]
 800c182:	ec49 8b17 	vmov	d7, r8, r9
 800c186:	49be      	ldr	r1, [pc, #760]	; (800c480 <_strtod_l+0x898>)
 800c188:	2000      	movs	r0, #0
 800c18a:	07d6      	lsls	r6, r2, #31
 800c18c:	d504      	bpl.n	800c198 <_strtod_l+0x5b0>
 800c18e:	ed91 6b00 	vldr	d6, [r1]
 800c192:	2001      	movs	r0, #1
 800c194:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c198:	1052      	asrs	r2, r2, #1
 800c19a:	f101 0108 	add.w	r1, r1, #8
 800c19e:	d1f4      	bne.n	800c18a <_strtod_l+0x5a2>
 800c1a0:	b108      	cbz	r0, 800c1a6 <_strtod_l+0x5be>
 800c1a2:	ec59 8b17 	vmov	r8, r9, d7
 800c1a6:	9a04      	ldr	r2, [sp, #16]
 800c1a8:	b1c2      	cbz	r2, 800c1dc <_strtod_l+0x5f4>
 800c1aa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c1ae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	4648      	mov	r0, r9
 800c1b6:	dd11      	ble.n	800c1dc <_strtod_l+0x5f4>
 800c1b8:	2a1f      	cmp	r2, #31
 800c1ba:	f340 812e 	ble.w	800c41a <_strtod_l+0x832>
 800c1be:	2a34      	cmp	r2, #52	; 0x34
 800c1c0:	bfde      	ittt	le
 800c1c2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c1c6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800c1ca:	fa02 f101 	lslle.w	r1, r2, r1
 800c1ce:	f04f 0800 	mov.w	r8, #0
 800c1d2:	bfcc      	ite	gt
 800c1d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c1d8:	ea01 0900 	andle.w	r9, r1, r0
 800c1dc:	ec49 8b17 	vmov	d7, r8, r9
 800c1e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e8:	d0a6      	beq.n	800c138 <_strtod_l+0x550>
 800c1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1ec:	9200      	str	r2, [sp, #0]
 800c1ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f001 fdb0 	bl	800dd58 <__s2b>
 800c1f8:	9006      	str	r0, [sp, #24]
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	f43f af2c 	beq.w	800c058 <_strtod_l+0x470>
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	1b7d      	subs	r5, r7, r5
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfb4      	ite	lt
 800c208:	462b      	movlt	r3, r5
 800c20a:	2300      	movge	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	; 0x24
 800c20e:	9b07      	ldr	r3, [sp, #28]
 800c210:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c460 <_strtod_l+0x878>
 800c214:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c468 <_strtod_l+0x880>
 800c218:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c470 <_strtod_l+0x888>
 800c21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c220:	2500      	movs	r5, #0
 800c222:	930c      	str	r3, [sp, #48]	; 0x30
 800c224:	462e      	mov	r6, r5
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	4620      	mov	r0, r4
 800c22a:	6859      	ldr	r1, [r3, #4]
 800c22c:	f001 fcec 	bl	800dc08 <_Balloc>
 800c230:	4607      	mov	r7, r0
 800c232:	2800      	cmp	r0, #0
 800c234:	f43f af14 	beq.w	800c060 <_strtod_l+0x478>
 800c238:	9b06      	ldr	r3, [sp, #24]
 800c23a:	691a      	ldr	r2, [r3, #16]
 800c23c:	3202      	adds	r2, #2
 800c23e:	f103 010c 	add.w	r1, r3, #12
 800c242:	0092      	lsls	r2, r2, #2
 800c244:	300c      	adds	r0, #12
 800c246:	f001 fcc5 	bl	800dbd4 <memcpy>
 800c24a:	ec49 8b10 	vmov	d0, r8, r9
 800c24e:	aa14      	add	r2, sp, #80	; 0x50
 800c250:	a913      	add	r1, sp, #76	; 0x4c
 800c252:	4620      	mov	r0, r4
 800c254:	f002 f8c6 	bl	800e3e4 <__d2b>
 800c258:	ec49 8b18 	vmov	d8, r8, r9
 800c25c:	9012      	str	r0, [sp, #72]	; 0x48
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f aefe 	beq.w	800c060 <_strtod_l+0x478>
 800c264:	2101      	movs	r1, #1
 800c266:	4620      	mov	r0, r4
 800c268:	f001 fe10 	bl	800de8c <__i2b>
 800c26c:	4606      	mov	r6, r0
 800c26e:	2800      	cmp	r0, #0
 800c270:	f43f aef6 	beq.w	800c060 <_strtod_l+0x478>
 800c274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c276:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c278:	2b00      	cmp	r3, #0
 800c27a:	bfab      	itete	ge
 800c27c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c27e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c280:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c284:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c288:	bfac      	ite	ge
 800c28a:	eb03 0b02 	addge.w	fp, r3, r2
 800c28e:	eba2 0a03 	sublt.w	sl, r2, r3
 800c292:	9a04      	ldr	r2, [sp, #16]
 800c294:	1a9b      	subs	r3, r3, r2
 800c296:	440b      	add	r3, r1
 800c298:	4a7a      	ldr	r2, [pc, #488]	; (800c484 <_strtod_l+0x89c>)
 800c29a:	3b01      	subs	r3, #1
 800c29c:	4293      	cmp	r3, r2
 800c29e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c2a2:	f280 80cd 	bge.w	800c440 <_strtod_l+0x858>
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	2a1f      	cmp	r2, #31
 800c2aa:	eba1 0102 	sub.w	r1, r1, r2
 800c2ae:	f04f 0001 	mov.w	r0, #1
 800c2b2:	f300 80b9 	bgt.w	800c428 <_strtod_l+0x840>
 800c2b6:	fa00 f302 	lsl.w	r3, r0, r2
 800c2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2bc:	2300      	movs	r3, #0
 800c2be:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c0:	eb0b 0301 	add.w	r3, fp, r1
 800c2c4:	9a04      	ldr	r2, [sp, #16]
 800c2c6:	459b      	cmp	fp, r3
 800c2c8:	448a      	add	sl, r1
 800c2ca:	4492      	add	sl, r2
 800c2cc:	465a      	mov	r2, fp
 800c2ce:	bfa8      	it	ge
 800c2d0:	461a      	movge	r2, r3
 800c2d2:	4552      	cmp	r2, sl
 800c2d4:	bfa8      	it	ge
 800c2d6:	4652      	movge	r2, sl
 800c2d8:	2a00      	cmp	r2, #0
 800c2da:	bfc2      	ittt	gt
 800c2dc:	1a9b      	subgt	r3, r3, r2
 800c2de:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c2e2:	ebab 0b02 	subgt.w	fp, fp, r2
 800c2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	dd18      	ble.n	800c31e <_strtod_l+0x736>
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2f2:	f001 fe8b 	bl	800e00c <__pow5mult>
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	f43f aeb1 	beq.w	800c060 <_strtod_l+0x478>
 800c2fe:	4601      	mov	r1, r0
 800c300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c302:	4620      	mov	r0, r4
 800c304:	f001 fdd8 	bl	800deb8 <__multiply>
 800c308:	900e      	str	r0, [sp, #56]	; 0x38
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f43f aea8 	beq.w	800c060 <_strtod_l+0x478>
 800c310:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c312:	4620      	mov	r0, r4
 800c314:	f001 fcb8 	bl	800dc88 <_Bfree>
 800c318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31c:	9212      	str	r2, [sp, #72]	; 0x48
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f300 8093 	bgt.w	800c44a <_strtod_l+0x862>
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	2b00      	cmp	r3, #0
 800c328:	dd08      	ble.n	800c33c <_strtod_l+0x754>
 800c32a:	4639      	mov	r1, r7
 800c32c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c32e:	4620      	mov	r0, r4
 800c330:	f001 fe6c 	bl	800e00c <__pow5mult>
 800c334:	4607      	mov	r7, r0
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f ae92 	beq.w	800c060 <_strtod_l+0x478>
 800c33c:	f1ba 0f00 	cmp.w	sl, #0
 800c340:	dd08      	ble.n	800c354 <_strtod_l+0x76c>
 800c342:	4639      	mov	r1, r7
 800c344:	4652      	mov	r2, sl
 800c346:	4620      	mov	r0, r4
 800c348:	f001 feba 	bl	800e0c0 <__lshift>
 800c34c:	4607      	mov	r7, r0
 800c34e:	2800      	cmp	r0, #0
 800c350:	f43f ae86 	beq.w	800c060 <_strtod_l+0x478>
 800c354:	f1bb 0f00 	cmp.w	fp, #0
 800c358:	dd08      	ble.n	800c36c <_strtod_l+0x784>
 800c35a:	4631      	mov	r1, r6
 800c35c:	465a      	mov	r2, fp
 800c35e:	4620      	mov	r0, r4
 800c360:	f001 feae 	bl	800e0c0 <__lshift>
 800c364:	4606      	mov	r6, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	f43f ae7a 	beq.w	800c060 <_strtod_l+0x478>
 800c36c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c36e:	463a      	mov	r2, r7
 800c370:	4620      	mov	r0, r4
 800c372:	f001 ff31 	bl	800e1d8 <__mdiff>
 800c376:	4605      	mov	r5, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	f43f ae71 	beq.w	800c060 <_strtod_l+0x478>
 800c37e:	2300      	movs	r3, #0
 800c380:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c384:	60c3      	str	r3, [r0, #12]
 800c386:	4631      	mov	r1, r6
 800c388:	f001 ff0a 	bl	800e1a0 <__mcmp>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	da7d      	bge.n	800c48c <_strtod_l+0x8a4>
 800c390:	ea5a 0308 	orrs.w	r3, sl, r8
 800c394:	f040 80a3 	bne.w	800c4de <_strtod_l+0x8f6>
 800c398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f040 809e 	bne.w	800c4de <_strtod_l+0x8f6>
 800c3a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3a6:	0d1b      	lsrs	r3, r3, #20
 800c3a8:	051b      	lsls	r3, r3, #20
 800c3aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c3ae:	f240 8096 	bls.w	800c4de <_strtod_l+0x8f6>
 800c3b2:	696b      	ldr	r3, [r5, #20]
 800c3b4:	b91b      	cbnz	r3, 800c3be <_strtod_l+0x7d6>
 800c3b6:	692b      	ldr	r3, [r5, #16]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	f340 8090 	ble.w	800c4de <_strtod_l+0x8f6>
 800c3be:	4629      	mov	r1, r5
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f001 fe7c 	bl	800e0c0 <__lshift>
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	f001 fee8 	bl	800e1a0 <__mcmp>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f340 8084 	ble.w	800c4de <_strtod_l+0x8f6>
 800c3d6:	9904      	ldr	r1, [sp, #16]
 800c3d8:	4a2b      	ldr	r2, [pc, #172]	; (800c488 <_strtod_l+0x8a0>)
 800c3da:	464b      	mov	r3, r9
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	f000 809d 	beq.w	800c51c <_strtod_l+0x934>
 800c3e2:	ea02 0109 	and.w	r1, r2, r9
 800c3e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3ea:	f300 8097 	bgt.w	800c51c <_strtod_l+0x934>
 800c3ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3f2:	f77f aea5 	ble.w	800c140 <_strtod_l+0x558>
 800c3f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c478 <_strtod_l+0x890>
 800c3fa:	ec49 8b16 	vmov	d6, r8, r9
 800c3fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c402:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c406:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	bf08      	it	eq
 800c40e:	2322      	moveq	r3, #34	; 0x22
 800c410:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c414:	bf08      	it	eq
 800c416:	6023      	streq	r3, [r4, #0]
 800c418:	e62c      	b.n	800c074 <_strtod_l+0x48c>
 800c41a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c41e:	fa01 f202 	lsl.w	r2, r1, r2
 800c422:	ea02 0808 	and.w	r8, r2, r8
 800c426:	e6d9      	b.n	800c1dc <_strtod_l+0x5f4>
 800c428:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c42c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c430:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c434:	33e2      	adds	r3, #226	; 0xe2
 800c436:	fa00 f303 	lsl.w	r3, r0, r3
 800c43a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c43e:	e73f      	b.n	800c2c0 <_strtod_l+0x6d8>
 800c440:	2200      	movs	r2, #0
 800c442:	2301      	movs	r3, #1
 800c444:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c448:	e73a      	b.n	800c2c0 <_strtod_l+0x6d8>
 800c44a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c44c:	461a      	mov	r2, r3
 800c44e:	4620      	mov	r0, r4
 800c450:	f001 fe36 	bl	800e0c0 <__lshift>
 800c454:	9012      	str	r0, [sp, #72]	; 0x48
 800c456:	2800      	cmp	r0, #0
 800c458:	f47f af64 	bne.w	800c324 <_strtod_l+0x73c>
 800c45c:	e600      	b.n	800c060 <_strtod_l+0x478>
 800c45e:	bf00      	nop
 800c460:	94a03595 	.word	0x94a03595
 800c464:	3fcfffff 	.word	0x3fcfffff
 800c468:	94a03595 	.word	0x94a03595
 800c46c:	3fdfffff 	.word	0x3fdfffff
 800c470:	35afe535 	.word	0x35afe535
 800c474:	3fe00000 	.word	0x3fe00000
 800c478:	00000000 	.word	0x00000000
 800c47c:	39500000 	.word	0x39500000
 800c480:	0800ff48 	.word	0x0800ff48
 800c484:	fffffc02 	.word	0xfffffc02
 800c488:	7ff00000 	.word	0x7ff00000
 800c48c:	46cb      	mov	fp, r9
 800c48e:	d15f      	bne.n	800c550 <_strtod_l+0x968>
 800c490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c494:	f1ba 0f00 	cmp.w	sl, #0
 800c498:	d02a      	beq.n	800c4f0 <_strtod_l+0x908>
 800c49a:	4aa7      	ldr	r2, [pc, #668]	; (800c738 <_strtod_l+0xb50>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d12b      	bne.n	800c4f8 <_strtod_l+0x910>
 800c4a0:	9b04      	ldr	r3, [sp, #16]
 800c4a2:	4642      	mov	r2, r8
 800c4a4:	b1fb      	cbz	r3, 800c4e6 <_strtod_l+0x8fe>
 800c4a6:	4ba5      	ldr	r3, [pc, #660]	; (800c73c <_strtod_l+0xb54>)
 800c4a8:	ea09 0303 	and.w	r3, r9, r3
 800c4ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4b4:	d81a      	bhi.n	800c4ec <_strtod_l+0x904>
 800c4b6:	0d1b      	lsrs	r3, r3, #20
 800c4b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d119      	bne.n	800c4f8 <_strtod_l+0x910>
 800c4c4:	4b9e      	ldr	r3, [pc, #632]	; (800c740 <_strtod_l+0xb58>)
 800c4c6:	459b      	cmp	fp, r3
 800c4c8:	d102      	bne.n	800c4d0 <_strtod_l+0x8e8>
 800c4ca:	3201      	adds	r2, #1
 800c4cc:	f43f adc8 	beq.w	800c060 <_strtod_l+0x478>
 800c4d0:	4b9a      	ldr	r3, [pc, #616]	; (800c73c <_strtod_l+0xb54>)
 800c4d2:	ea0b 0303 	and.w	r3, fp, r3
 800c4d6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c4da:	f04f 0800 	mov.w	r8, #0
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d188      	bne.n	800c3f6 <_strtod_l+0x80e>
 800c4e4:	e5c6      	b.n	800c074 <_strtod_l+0x48c>
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ea:	e7e9      	b.n	800c4c0 <_strtod_l+0x8d8>
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	e7e7      	b.n	800c4c0 <_strtod_l+0x8d8>
 800c4f0:	ea53 0308 	orrs.w	r3, r3, r8
 800c4f4:	f43f af6f 	beq.w	800c3d6 <_strtod_l+0x7ee>
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fa:	b1cb      	cbz	r3, 800c530 <_strtod_l+0x948>
 800c4fc:	ea13 0f0b 	tst.w	r3, fp
 800c500:	d0ed      	beq.n	800c4de <_strtod_l+0x8f6>
 800c502:	9a04      	ldr	r2, [sp, #16]
 800c504:	4640      	mov	r0, r8
 800c506:	4649      	mov	r1, r9
 800c508:	f1ba 0f00 	cmp.w	sl, #0
 800c50c:	d014      	beq.n	800c538 <_strtod_l+0x950>
 800c50e:	f7ff fb4e 	bl	800bbae <sulp>
 800c512:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c516:	ec59 8b17 	vmov	r8, r9, d7
 800c51a:	e7e0      	b.n	800c4de <_strtod_l+0x8f6>
 800c51c:	4013      	ands	r3, r2
 800c51e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c522:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c526:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c52a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c52e:	e7d6      	b.n	800c4de <_strtod_l+0x8f6>
 800c530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c532:	ea13 0f08 	tst.w	r3, r8
 800c536:	e7e3      	b.n	800c500 <_strtod_l+0x918>
 800c538:	f7ff fb39 	bl	800bbae <sulp>
 800c53c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c540:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c548:	ec59 8b10 	vmov	r8, r9, d0
 800c54c:	d1c7      	bne.n	800c4de <_strtod_l+0x8f6>
 800c54e:	e5f7      	b.n	800c140 <_strtod_l+0x558>
 800c550:	4631      	mov	r1, r6
 800c552:	4628      	mov	r0, r5
 800c554:	f001 ffa2 	bl	800e49c <__ratio>
 800c558:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c55c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c564:	d865      	bhi.n	800c632 <_strtod_l+0xa4a>
 800c566:	f1ba 0f00 	cmp.w	sl, #0
 800c56a:	d042      	beq.n	800c5f2 <_strtod_l+0xa0a>
 800c56c:	4b75      	ldr	r3, [pc, #468]	; (800c744 <_strtod_l+0xb5c>)
 800c56e:	2200      	movs	r2, #0
 800c570:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c574:	4871      	ldr	r0, [pc, #452]	; (800c73c <_strtod_l+0xb54>)
 800c576:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c750 <_strtod_l+0xb68>
 800c57a:	ea0b 0100 	and.w	r1, fp, r0
 800c57e:	4561      	cmp	r1, ip
 800c580:	f040 808e 	bne.w	800c6a0 <_strtod_l+0xab8>
 800c584:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c588:	ec49 8b10 	vmov	d0, r8, r9
 800c58c:	ec43 2b1c 	vmov	d12, r2, r3
 800c590:	910a      	str	r1, [sp, #40]	; 0x28
 800c592:	f001 feab 	bl	800e2ec <__ulp>
 800c596:	ec49 8b1e 	vmov	d14, r8, r9
 800c59a:	4868      	ldr	r0, [pc, #416]	; (800c73c <_strtod_l+0xb54>)
 800c59c:	eeac eb00 	vfma.f64	d14, d12, d0
 800c5a0:	ee1e 3a90 	vmov	r3, s29
 800c5a4:	4a68      	ldr	r2, [pc, #416]	; (800c748 <_strtod_l+0xb60>)
 800c5a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5a8:	4018      	ands	r0, r3
 800c5aa:	4290      	cmp	r0, r2
 800c5ac:	ec59 8b1e 	vmov	r8, r9, d14
 800c5b0:	d94e      	bls.n	800c650 <_strtod_l+0xa68>
 800c5b2:	ee18 3a90 	vmov	r3, s17
 800c5b6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d104      	bne.n	800c5c8 <_strtod_l+0x9e0>
 800c5be:	ee18 3a10 	vmov	r3, s16
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	f43f ad4c 	beq.w	800c060 <_strtod_l+0x478>
 800c5c8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c740 <_strtod_l+0xb58>
 800c5cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c5d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f001 fb58 	bl	800dc88 <_Bfree>
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f001 fb54 	bl	800dc88 <_Bfree>
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f001 fb50 	bl	800dc88 <_Bfree>
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f001 fb4c 	bl	800dc88 <_Bfree>
 800c5f0:	e619      	b.n	800c226 <_strtod_l+0x63e>
 800c5f2:	f1b8 0f00 	cmp.w	r8, #0
 800c5f6:	d112      	bne.n	800c61e <_strtod_l+0xa36>
 800c5f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5fc:	b9b3      	cbnz	r3, 800c62c <_strtod_l+0xa44>
 800c5fe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c602:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c60e:	bf58      	it	pl
 800c610:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c614:	eeb1 7b4d 	vneg.f64	d7, d13
 800c618:	ec53 2b17 	vmov	r2, r3, d7
 800c61c:	e7aa      	b.n	800c574 <_strtod_l+0x98c>
 800c61e:	f1b8 0f01 	cmp.w	r8, #1
 800c622:	d103      	bne.n	800c62c <_strtod_l+0xa44>
 800c624:	f1b9 0f00 	cmp.w	r9, #0
 800c628:	f43f ad8a 	beq.w	800c140 <_strtod_l+0x558>
 800c62c:	4b47      	ldr	r3, [pc, #284]	; (800c74c <_strtod_l+0xb64>)
 800c62e:	2200      	movs	r2, #0
 800c630:	e79e      	b.n	800c570 <_strtod_l+0x988>
 800c632:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c636:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c63a:	f1ba 0f00 	cmp.w	sl, #0
 800c63e:	d104      	bne.n	800c64a <_strtod_l+0xa62>
 800c640:	eeb1 7b4d 	vneg.f64	d7, d13
 800c644:	ec53 2b17 	vmov	r2, r3, d7
 800c648:	e794      	b.n	800c574 <_strtod_l+0x98c>
 800c64a:	eeb0 7b4d 	vmov.f64	d7, d13
 800c64e:	e7f9      	b.n	800c644 <_strtod_l+0xa5c>
 800c650:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c654:	9b04      	ldr	r3, [sp, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1ba      	bne.n	800c5d0 <_strtod_l+0x9e8>
 800c65a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c65e:	0d1b      	lsrs	r3, r3, #20
 800c660:	051b      	lsls	r3, r3, #20
 800c662:	4299      	cmp	r1, r3
 800c664:	d1b4      	bne.n	800c5d0 <_strtod_l+0x9e8>
 800c666:	ec51 0b1d 	vmov	r0, r1, d13
 800c66a:	f7f4 f865 	bl	8000738 <__aeabi_d2lz>
 800c66e:	f7f4 f81d 	bl	80006ac <__aeabi_l2d>
 800c672:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c676:	ec41 0b17 	vmov	d7, r0, r1
 800c67a:	ea43 0308 	orr.w	r3, r3, r8
 800c67e:	ea53 030a 	orrs.w	r3, r3, sl
 800c682:	ee3d db47 	vsub.f64	d13, d13, d7
 800c686:	d03c      	beq.n	800c702 <_strtod_l+0xb1a>
 800c688:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c690:	f53f acf0 	bmi.w	800c074 <_strtod_l+0x48c>
 800c694:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69c:	dd98      	ble.n	800c5d0 <_strtod_l+0x9e8>
 800c69e:	e4e9      	b.n	800c074 <_strtod_l+0x48c>
 800c6a0:	9804      	ldr	r0, [sp, #16]
 800c6a2:	b1f0      	cbz	r0, 800c6e2 <_strtod_l+0xafa>
 800c6a4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c6a8:	d81b      	bhi.n	800c6e2 <_strtod_l+0xafa>
 800c6aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c730 <_strtod_l+0xb48>
 800c6ae:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b6:	d811      	bhi.n	800c6dc <_strtod_l+0xaf4>
 800c6b8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c6bc:	ee1d 3a10 	vmov	r3, s26
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	bf38      	it	cc
 800c6c4:	2301      	movcc	r3, #1
 800c6c6:	ee0d 3a10 	vmov	s26, r3
 800c6ca:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c6ce:	f1ba 0f00 	cmp.w	sl, #0
 800c6d2:	d113      	bne.n	800c6fc <_strtod_l+0xb14>
 800c6d4:	eeb1 7b4d 	vneg.f64	d7, d13
 800c6d8:	ec53 2b17 	vmov	r2, r3, d7
 800c6dc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c6e0:	1a43      	subs	r3, r0, r1
 800c6e2:	eeb0 0b48 	vmov.f64	d0, d8
 800c6e6:	ec43 2b1c 	vmov	d12, r2, r3
 800c6ea:	910a      	str	r1, [sp, #40]	; 0x28
 800c6ec:	f001 fdfe 	bl	800e2ec <__ulp>
 800c6f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6f2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c6f6:	ec59 8b18 	vmov	r8, r9, d8
 800c6fa:	e7ab      	b.n	800c654 <_strtod_l+0xa6c>
 800c6fc:	eeb0 7b4d 	vmov.f64	d7, d13
 800c700:	e7ea      	b.n	800c6d8 <_strtod_l+0xaf0>
 800c702:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70a:	f57f af61 	bpl.w	800c5d0 <_strtod_l+0x9e8>
 800c70e:	e4b1      	b.n	800c074 <_strtod_l+0x48c>
 800c710:	2300      	movs	r3, #0
 800c712:	9308      	str	r3, [sp, #32]
 800c714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c718:	6013      	str	r3, [r2, #0]
 800c71a:	f7ff baad 	b.w	800bc78 <_strtod_l+0x90>
 800c71e:	2a65      	cmp	r2, #101	; 0x65
 800c720:	f43f ab9f 	beq.w	800be62 <_strtod_l+0x27a>
 800c724:	2a45      	cmp	r2, #69	; 0x45
 800c726:	f43f ab9c 	beq.w	800be62 <_strtod_l+0x27a>
 800c72a:	2101      	movs	r1, #1
 800c72c:	f7ff bbd4 	b.w	800bed8 <_strtod_l+0x2f0>
 800c730:	ffc00000 	.word	0xffc00000
 800c734:	41dfffff 	.word	0x41dfffff
 800c738:	000fffff 	.word	0x000fffff
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	7fefffff 	.word	0x7fefffff
 800c744:	3ff00000 	.word	0x3ff00000
 800c748:	7c9fffff 	.word	0x7c9fffff
 800c74c:	bff00000 	.word	0xbff00000
 800c750:	7fe00000 	.word	0x7fe00000

0800c754 <_strtod_r>:
 800c754:	4b01      	ldr	r3, [pc, #4]	; (800c75c <_strtod_r+0x8>)
 800c756:	f7ff ba47 	b.w	800bbe8 <_strtod_l>
 800c75a:	bf00      	nop
 800c75c:	24000078 	.word	0x24000078

0800c760 <_strtol_l.constprop.0>:
 800c760:	2b01      	cmp	r3, #1
 800c762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c766:	d001      	beq.n	800c76c <_strtol_l.constprop.0+0xc>
 800c768:	2b24      	cmp	r3, #36	; 0x24
 800c76a:	d906      	bls.n	800c77a <_strtol_l.constprop.0+0x1a>
 800c76c:	f7fe fa16 	bl	800ab9c <__errno>
 800c770:	2316      	movs	r3, #22
 800c772:	6003      	str	r3, [r0, #0]
 800c774:	2000      	movs	r0, #0
 800c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c860 <_strtol_l.constprop.0+0x100>
 800c77e:	460d      	mov	r5, r1
 800c780:	462e      	mov	r6, r5
 800c782:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c786:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c78a:	f017 0708 	ands.w	r7, r7, #8
 800c78e:	d1f7      	bne.n	800c780 <_strtol_l.constprop.0+0x20>
 800c790:	2c2d      	cmp	r4, #45	; 0x2d
 800c792:	d132      	bne.n	800c7fa <_strtol_l.constprop.0+0x9a>
 800c794:	782c      	ldrb	r4, [r5, #0]
 800c796:	2701      	movs	r7, #1
 800c798:	1cb5      	adds	r5, r6, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d05b      	beq.n	800c856 <_strtol_l.constprop.0+0xf6>
 800c79e:	2b10      	cmp	r3, #16
 800c7a0:	d109      	bne.n	800c7b6 <_strtol_l.constprop.0+0x56>
 800c7a2:	2c30      	cmp	r4, #48	; 0x30
 800c7a4:	d107      	bne.n	800c7b6 <_strtol_l.constprop.0+0x56>
 800c7a6:	782c      	ldrb	r4, [r5, #0]
 800c7a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c7ac:	2c58      	cmp	r4, #88	; 0x58
 800c7ae:	d14d      	bne.n	800c84c <_strtol_l.constprop.0+0xec>
 800c7b0:	786c      	ldrb	r4, [r5, #1]
 800c7b2:	2310      	movs	r3, #16
 800c7b4:	3502      	adds	r5, #2
 800c7b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c7ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c7be:	f04f 0c00 	mov.w	ip, #0
 800c7c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c7c6:	4666      	mov	r6, ip
 800c7c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c7cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c7d0:	f1be 0f09 	cmp.w	lr, #9
 800c7d4:	d816      	bhi.n	800c804 <_strtol_l.constprop.0+0xa4>
 800c7d6:	4674      	mov	r4, lr
 800c7d8:	42a3      	cmp	r3, r4
 800c7da:	dd24      	ble.n	800c826 <_strtol_l.constprop.0+0xc6>
 800c7dc:	f1bc 0f00 	cmp.w	ip, #0
 800c7e0:	db1e      	blt.n	800c820 <_strtol_l.constprop.0+0xc0>
 800c7e2:	45b1      	cmp	r9, r6
 800c7e4:	d31c      	bcc.n	800c820 <_strtol_l.constprop.0+0xc0>
 800c7e6:	d101      	bne.n	800c7ec <_strtol_l.constprop.0+0x8c>
 800c7e8:	45a2      	cmp	sl, r4
 800c7ea:	db19      	blt.n	800c820 <_strtol_l.constprop.0+0xc0>
 800c7ec:	fb06 4603 	mla	r6, r6, r3, r4
 800c7f0:	f04f 0c01 	mov.w	ip, #1
 800c7f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7f8:	e7e8      	b.n	800c7cc <_strtol_l.constprop.0+0x6c>
 800c7fa:	2c2b      	cmp	r4, #43	; 0x2b
 800c7fc:	bf04      	itt	eq
 800c7fe:	782c      	ldrbeq	r4, [r5, #0]
 800c800:	1cb5      	addeq	r5, r6, #2
 800c802:	e7ca      	b.n	800c79a <_strtol_l.constprop.0+0x3a>
 800c804:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c808:	f1be 0f19 	cmp.w	lr, #25
 800c80c:	d801      	bhi.n	800c812 <_strtol_l.constprop.0+0xb2>
 800c80e:	3c37      	subs	r4, #55	; 0x37
 800c810:	e7e2      	b.n	800c7d8 <_strtol_l.constprop.0+0x78>
 800c812:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c816:	f1be 0f19 	cmp.w	lr, #25
 800c81a:	d804      	bhi.n	800c826 <_strtol_l.constprop.0+0xc6>
 800c81c:	3c57      	subs	r4, #87	; 0x57
 800c81e:	e7db      	b.n	800c7d8 <_strtol_l.constprop.0+0x78>
 800c820:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c824:	e7e6      	b.n	800c7f4 <_strtol_l.constprop.0+0x94>
 800c826:	f1bc 0f00 	cmp.w	ip, #0
 800c82a:	da05      	bge.n	800c838 <_strtol_l.constprop.0+0xd8>
 800c82c:	2322      	movs	r3, #34	; 0x22
 800c82e:	6003      	str	r3, [r0, #0]
 800c830:	4646      	mov	r6, r8
 800c832:	b942      	cbnz	r2, 800c846 <_strtol_l.constprop.0+0xe6>
 800c834:	4630      	mov	r0, r6
 800c836:	e79e      	b.n	800c776 <_strtol_l.constprop.0+0x16>
 800c838:	b107      	cbz	r7, 800c83c <_strtol_l.constprop.0+0xdc>
 800c83a:	4276      	negs	r6, r6
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	d0f9      	beq.n	800c834 <_strtol_l.constprop.0+0xd4>
 800c840:	f1bc 0f00 	cmp.w	ip, #0
 800c844:	d000      	beq.n	800c848 <_strtol_l.constprop.0+0xe8>
 800c846:	1e69      	subs	r1, r5, #1
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	e7f3      	b.n	800c834 <_strtol_l.constprop.0+0xd4>
 800c84c:	2430      	movs	r4, #48	; 0x30
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1b1      	bne.n	800c7b6 <_strtol_l.constprop.0+0x56>
 800c852:	2308      	movs	r3, #8
 800c854:	e7af      	b.n	800c7b6 <_strtol_l.constprop.0+0x56>
 800c856:	2c30      	cmp	r4, #48	; 0x30
 800c858:	d0a5      	beq.n	800c7a6 <_strtol_l.constprop.0+0x46>
 800c85a:	230a      	movs	r3, #10
 800c85c:	e7ab      	b.n	800c7b6 <_strtol_l.constprop.0+0x56>
 800c85e:	bf00      	nop
 800c860:	0800ff71 	.word	0x0800ff71

0800c864 <_strtol_r>:
 800c864:	f7ff bf7c 	b.w	800c760 <_strtol_l.constprop.0>

0800c868 <_write_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	; (800c888 <_write_r+0x20>)
 800c86c:	4604      	mov	r4, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	4611      	mov	r1, r2
 800c872:	2200      	movs	r2, #0
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	f7f5 fdfb 	bl	8002472 <_write>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_write_r+0x1e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_write_r+0x1e>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	240004b0 	.word	0x240004b0

0800c88c <_close_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d06      	ldr	r5, [pc, #24]	; (800c8a8 <_close_r+0x1c>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	f7f5 fe07 	bl	80024aa <_close>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_close_r+0x1a>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_close_r+0x1a>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	240004b0 	.word	0x240004b0

0800c8ac <quorem>:
 800c8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	6903      	ldr	r3, [r0, #16]
 800c8b2:	690c      	ldr	r4, [r1, #16]
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	f2c0 8081 	blt.w	800c9be <quorem+0x112>
 800c8bc:	3c01      	subs	r4, #1
 800c8be:	f101 0814 	add.w	r8, r1, #20
 800c8c2:	f100 0514 	add.w	r5, r0, #20
 800c8c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8e4:	d331      	bcc.n	800c94a <quorem+0x9e>
 800c8e6:	f04f 0e00 	mov.w	lr, #0
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	46ac      	mov	ip, r5
 800c8ee:	46f2      	mov	sl, lr
 800c8f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8f4:	b293      	uxth	r3, r2
 800c8f6:	fb06 e303 	mla	r3, r6, r3, lr
 800c8fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ebaa 0303 	sub.w	r3, sl, r3
 800c904:	f8dc a000 	ldr.w	sl, [ip]
 800c908:	0c12      	lsrs	r2, r2, #16
 800c90a:	fa13 f38a 	uxtah	r3, r3, sl
 800c90e:	fb06 e202 	mla	r2, r6, r2, lr
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	9b00      	ldr	r3, [sp, #0]
 800c916:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c91a:	b292      	uxth	r2, r2
 800c91c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c924:	f8bd 3000 	ldrh.w	r3, [sp]
 800c928:	4581      	cmp	r9, r0
 800c92a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c92e:	f84c 3b04 	str.w	r3, [ip], #4
 800c932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c936:	d2db      	bcs.n	800c8f0 <quorem+0x44>
 800c938:	f855 300b 	ldr.w	r3, [r5, fp]
 800c93c:	b92b      	cbnz	r3, 800c94a <quorem+0x9e>
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	3b04      	subs	r3, #4
 800c942:	429d      	cmp	r5, r3
 800c944:	461a      	mov	r2, r3
 800c946:	d32e      	bcc.n	800c9a6 <quorem+0xfa>
 800c948:	613c      	str	r4, [r7, #16]
 800c94a:	4638      	mov	r0, r7
 800c94c:	f001 fc28 	bl	800e1a0 <__mcmp>
 800c950:	2800      	cmp	r0, #0
 800c952:	db24      	blt.n	800c99e <quorem+0xf2>
 800c954:	3601      	adds	r6, #1
 800c956:	4628      	mov	r0, r5
 800c958:	f04f 0c00 	mov.w	ip, #0
 800c95c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c960:	f8d0 e000 	ldr.w	lr, [r0]
 800c964:	b293      	uxth	r3, r2
 800c966:	ebac 0303 	sub.w	r3, ip, r3
 800c96a:	0c12      	lsrs	r2, r2, #16
 800c96c:	fa13 f38e 	uxtah	r3, r3, lr
 800c970:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c978:	b29b      	uxth	r3, r3
 800c97a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c97e:	45c1      	cmp	r9, r8
 800c980:	f840 3b04 	str.w	r3, [r0], #4
 800c984:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c988:	d2e8      	bcs.n	800c95c <quorem+0xb0>
 800c98a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c98e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c992:	b922      	cbnz	r2, 800c99e <quorem+0xf2>
 800c994:	3b04      	subs	r3, #4
 800c996:	429d      	cmp	r5, r3
 800c998:	461a      	mov	r2, r3
 800c99a:	d30a      	bcc.n	800c9b2 <quorem+0x106>
 800c99c:	613c      	str	r4, [r7, #16]
 800c99e:	4630      	mov	r0, r6
 800c9a0:	b003      	add	sp, #12
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	6812      	ldr	r2, [r2, #0]
 800c9a8:	3b04      	subs	r3, #4
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	d1cc      	bne.n	800c948 <quorem+0x9c>
 800c9ae:	3c01      	subs	r4, #1
 800c9b0:	e7c7      	b.n	800c942 <quorem+0x96>
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	d1f0      	bne.n	800c99c <quorem+0xf0>
 800c9ba:	3c01      	subs	r4, #1
 800c9bc:	e7eb      	b.n	800c996 <quorem+0xea>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	e7ee      	b.n	800c9a0 <quorem+0xf4>
 800c9c2:	0000      	movs	r0, r0
 800c9c4:	0000      	movs	r0, r0
	...

0800c9c8 <_dtoa_r>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	ed2d 8b02 	vpush	{d8}
 800c9d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9d2:	b091      	sub	sp, #68	; 0x44
 800c9d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9d8:	ec59 8b10 	vmov	r8, r9, d0
 800c9dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c9de:	9106      	str	r1, [sp, #24]
 800c9e0:	4606      	mov	r6, r0
 800c9e2:	9208      	str	r2, [sp, #32]
 800c9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9e6:	b975      	cbnz	r5, 800ca06 <_dtoa_r+0x3e>
 800c9e8:	2010      	movs	r0, #16
 800c9ea:	f7fe f901 	bl	800abf0 <malloc>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9f2:	b920      	cbnz	r0, 800c9fe <_dtoa_r+0x36>
 800c9f4:	4baa      	ldr	r3, [pc, #680]	; (800cca0 <_dtoa_r+0x2d8>)
 800c9f6:	21ea      	movs	r1, #234	; 0xea
 800c9f8:	48aa      	ldr	r0, [pc, #680]	; (800cca4 <_dtoa_r+0x2dc>)
 800c9fa:	f002 fb73 	bl	800f0e4 <__assert_func>
 800c9fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca02:	6005      	str	r5, [r0, #0]
 800ca04:	60c5      	str	r5, [r0, #12]
 800ca06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca08:	6819      	ldr	r1, [r3, #0]
 800ca0a:	b151      	cbz	r1, 800ca22 <_dtoa_r+0x5a>
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	604a      	str	r2, [r1, #4]
 800ca10:	2301      	movs	r3, #1
 800ca12:	4093      	lsls	r3, r2
 800ca14:	608b      	str	r3, [r1, #8]
 800ca16:	4630      	mov	r0, r6
 800ca18:	f001 f936 	bl	800dc88 <_Bfree>
 800ca1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	f1b9 0300 	subs.w	r3, r9, #0
 800ca26:	bfbb      	ittet	lt
 800ca28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca2c:	9303      	strlt	r3, [sp, #12]
 800ca2e:	2300      	movge	r3, #0
 800ca30:	2201      	movlt	r2, #1
 800ca32:	bfac      	ite	ge
 800ca34:	6023      	strge	r3, [r4, #0]
 800ca36:	6022      	strlt	r2, [r4, #0]
 800ca38:	4b9b      	ldr	r3, [pc, #620]	; (800cca8 <_dtoa_r+0x2e0>)
 800ca3a:	9c03      	ldr	r4, [sp, #12]
 800ca3c:	43a3      	bics	r3, r4
 800ca3e:	d11c      	bne.n	800ca7a <_dtoa_r+0xb2>
 800ca40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca42:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca46:	6013      	str	r3, [r2, #0]
 800ca48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ca4c:	ea53 0308 	orrs.w	r3, r3, r8
 800ca50:	f000 84fd 	beq.w	800d44e <_dtoa_r+0xa86>
 800ca54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca56:	b963      	cbnz	r3, 800ca72 <_dtoa_r+0xaa>
 800ca58:	4b94      	ldr	r3, [pc, #592]	; (800ccac <_dtoa_r+0x2e4>)
 800ca5a:	e01f      	b.n	800ca9c <_dtoa_r+0xd4>
 800ca5c:	4b94      	ldr	r3, [pc, #592]	; (800ccb0 <_dtoa_r+0x2e8>)
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	3308      	adds	r3, #8
 800ca62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	9801      	ldr	r0, [sp, #4]
 800ca68:	b011      	add	sp, #68	; 0x44
 800ca6a:	ecbd 8b02 	vpop	{d8}
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca72:	4b8e      	ldr	r3, [pc, #568]	; (800ccac <_dtoa_r+0x2e4>)
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	3303      	adds	r3, #3
 800ca78:	e7f3      	b.n	800ca62 <_dtoa_r+0x9a>
 800ca7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ca7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca86:	d10b      	bne.n	800caa0 <_dtoa_r+0xd8>
 800ca88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f000 84d9 	beq.w	800d448 <_dtoa_r+0xa80>
 800ca96:	4887      	ldr	r0, [pc, #540]	; (800ccb4 <_dtoa_r+0x2ec>)
 800ca98:	6018      	str	r0, [r3, #0]
 800ca9a:	1e43      	subs	r3, r0, #1
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	e7e2      	b.n	800ca66 <_dtoa_r+0x9e>
 800caa0:	a90f      	add	r1, sp, #60	; 0x3c
 800caa2:	aa0e      	add	r2, sp, #56	; 0x38
 800caa4:	4630      	mov	r0, r6
 800caa6:	eeb0 0b48 	vmov.f64	d0, d8
 800caaa:	f001 fc9b 	bl	800e3e4 <__d2b>
 800caae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cab2:	4605      	mov	r5, r0
 800cab4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d046      	beq.n	800cb48 <_dtoa_r+0x180>
 800caba:	ee18 4a90 	vmov	r4, s17
 800cabe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cac2:	ec53 2b18 	vmov	r2, r3, d8
 800cac6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800caca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cace:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cad2:	2400      	movs	r4, #0
 800cad4:	ec43 2b16 	vmov	d6, r2, r3
 800cad8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cadc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc88 <_dtoa_r+0x2c0>
 800cae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cae4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800cc90 <_dtoa_r+0x2c8>
 800cae8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800caec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc98 <_dtoa_r+0x2d0>
 800caf0:	ee07 1a90 	vmov	s15, r1
 800caf4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800caf8:	eeb0 7b46 	vmov.f64	d7, d6
 800cafc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cb00:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cb04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0c:	ee16 ba90 	vmov	fp, s13
 800cb10:	940a      	str	r4, [sp, #40]	; 0x28
 800cb12:	d508      	bpl.n	800cb26 <_dtoa_r+0x15e>
 800cb14:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cb18:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb20:	bf18      	it	ne
 800cb22:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800cb26:	f1bb 0f16 	cmp.w	fp, #22
 800cb2a:	d82f      	bhi.n	800cb8c <_dtoa_r+0x1c4>
 800cb2c:	4b62      	ldr	r3, [pc, #392]	; (800ccb8 <_dtoa_r+0x2f0>)
 800cb2e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb32:	ed93 7b00 	vldr	d7, [r3]
 800cb36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3e:	d501      	bpl.n	800cb44 <_dtoa_r+0x17c>
 800cb40:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cb44:	2300      	movs	r3, #0
 800cb46:	e022      	b.n	800cb8e <_dtoa_r+0x1c6>
 800cb48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb4a:	4401      	add	r1, r0
 800cb4c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cb50:	2b20      	cmp	r3, #32
 800cb52:	bfc1      	itttt	gt
 800cb54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb58:	fa04 f303 	lslgt.w	r3, r4, r3
 800cb5c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cb60:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cb64:	bfd6      	itet	le
 800cb66:	f1c3 0320 	rsble	r3, r3, #32
 800cb6a:	ea43 0808 	orrgt.w	r8, r3, r8
 800cb6e:	fa08 f803 	lslle.w	r8, r8, r3
 800cb72:	ee07 8a90 	vmov	s15, r8
 800cb76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb7a:	3901      	subs	r1, #1
 800cb7c:	ee17 4a90 	vmov	r4, s15
 800cb80:	ec53 2b17 	vmov	r2, r3, d7
 800cb84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cb88:	2401      	movs	r4, #1
 800cb8a:	e7a3      	b.n	800cad4 <_dtoa_r+0x10c>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb90:	1a43      	subs	r3, r0, r1
 800cb92:	1e5a      	subs	r2, r3, #1
 800cb94:	bf45      	ittet	mi
 800cb96:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb9a:	9304      	strmi	r3, [sp, #16]
 800cb9c:	2300      	movpl	r3, #0
 800cb9e:	2300      	movmi	r3, #0
 800cba0:	9205      	str	r2, [sp, #20]
 800cba2:	bf54      	ite	pl
 800cba4:	9304      	strpl	r3, [sp, #16]
 800cba6:	9305      	strmi	r3, [sp, #20]
 800cba8:	f1bb 0f00 	cmp.w	fp, #0
 800cbac:	db18      	blt.n	800cbe0 <_dtoa_r+0x218>
 800cbae:	9b05      	ldr	r3, [sp, #20]
 800cbb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cbb4:	445b      	add	r3, fp
 800cbb6:	9305      	str	r3, [sp, #20]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	9a06      	ldr	r2, [sp, #24]
 800cbbc:	2a09      	cmp	r2, #9
 800cbbe:	d849      	bhi.n	800cc54 <_dtoa_r+0x28c>
 800cbc0:	2a05      	cmp	r2, #5
 800cbc2:	bfc4      	itt	gt
 800cbc4:	3a04      	subgt	r2, #4
 800cbc6:	9206      	strgt	r2, [sp, #24]
 800cbc8:	9a06      	ldr	r2, [sp, #24]
 800cbca:	f1a2 0202 	sub.w	r2, r2, #2
 800cbce:	bfcc      	ite	gt
 800cbd0:	2400      	movgt	r4, #0
 800cbd2:	2401      	movle	r4, #1
 800cbd4:	2a03      	cmp	r2, #3
 800cbd6:	d848      	bhi.n	800cc6a <_dtoa_r+0x2a2>
 800cbd8:	e8df f002 	tbb	[pc, r2]
 800cbdc:	3a2c2e0b 	.word	0x3a2c2e0b
 800cbe0:	9b04      	ldr	r3, [sp, #16]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	eba3 030b 	sub.w	r3, r3, fp
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	9209      	str	r2, [sp, #36]	; 0x24
 800cbec:	f1cb 0300 	rsb	r3, fp, #0
 800cbf0:	e7e3      	b.n	800cbba <_dtoa_r+0x1f2>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	9207      	str	r2, [sp, #28]
 800cbf6:	9a08      	ldr	r2, [sp, #32]
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	dc39      	bgt.n	800cc70 <_dtoa_r+0x2a8>
 800cbfc:	f04f 0a01 	mov.w	sl, #1
 800cc00:	46d1      	mov	r9, sl
 800cc02:	4652      	mov	r2, sl
 800cc04:	f8cd a020 	str.w	sl, [sp, #32]
 800cc08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	6079      	str	r1, [r7, #4]
 800cc0e:	2004      	movs	r0, #4
 800cc10:	f100 0c14 	add.w	ip, r0, #20
 800cc14:	4594      	cmp	ip, r2
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	d92f      	bls.n	800cc7a <_dtoa_r+0x2b2>
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	930d      	str	r3, [sp, #52]	; 0x34
 800cc1e:	f000 fff3 	bl	800dc08 <_Balloc>
 800cc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc24:	9001      	str	r0, [sp, #4]
 800cc26:	4602      	mov	r2, r0
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d149      	bne.n	800ccc0 <_dtoa_r+0x2f8>
 800cc2c:	4b23      	ldr	r3, [pc, #140]	; (800ccbc <_dtoa_r+0x2f4>)
 800cc2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc32:	e6e1      	b.n	800c9f8 <_dtoa_r+0x30>
 800cc34:	2201      	movs	r2, #1
 800cc36:	e7dd      	b.n	800cbf4 <_dtoa_r+0x22c>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	9207      	str	r2, [sp, #28]
 800cc3c:	9a08      	ldr	r2, [sp, #32]
 800cc3e:	eb0b 0a02 	add.w	sl, fp, r2
 800cc42:	f10a 0901 	add.w	r9, sl, #1
 800cc46:	464a      	mov	r2, r9
 800cc48:	2a01      	cmp	r2, #1
 800cc4a:	bfb8      	it	lt
 800cc4c:	2201      	movlt	r2, #1
 800cc4e:	e7db      	b.n	800cc08 <_dtoa_r+0x240>
 800cc50:	2201      	movs	r2, #1
 800cc52:	e7f2      	b.n	800cc3a <_dtoa_r+0x272>
 800cc54:	2401      	movs	r4, #1
 800cc56:	2200      	movs	r2, #0
 800cc58:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800cc5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cc60:	2100      	movs	r1, #0
 800cc62:	46d1      	mov	r9, sl
 800cc64:	2212      	movs	r2, #18
 800cc66:	9108      	str	r1, [sp, #32]
 800cc68:	e7ce      	b.n	800cc08 <_dtoa_r+0x240>
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	9207      	str	r2, [sp, #28]
 800cc6e:	e7f5      	b.n	800cc5c <_dtoa_r+0x294>
 800cc70:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc74:	46d1      	mov	r9, sl
 800cc76:	4652      	mov	r2, sl
 800cc78:	e7c6      	b.n	800cc08 <_dtoa_r+0x240>
 800cc7a:	3101      	adds	r1, #1
 800cc7c:	6079      	str	r1, [r7, #4]
 800cc7e:	0040      	lsls	r0, r0, #1
 800cc80:	e7c6      	b.n	800cc10 <_dtoa_r+0x248>
 800cc82:	bf00      	nop
 800cc84:	f3af 8000 	nop.w
 800cc88:	636f4361 	.word	0x636f4361
 800cc8c:	3fd287a7 	.word	0x3fd287a7
 800cc90:	8b60c8b3 	.word	0x8b60c8b3
 800cc94:	3fc68a28 	.word	0x3fc68a28
 800cc98:	509f79fb 	.word	0x509f79fb
 800cc9c:	3fd34413 	.word	0x3fd34413
 800cca0:	0801007e 	.word	0x0801007e
 800cca4:	08010095 	.word	0x08010095
 800cca8:	7ff00000 	.word	0x7ff00000
 800ccac:	0801007a 	.word	0x0801007a
 800ccb0:	08010071 	.word	0x08010071
 800ccb4:	080102ea 	.word	0x080102ea
 800ccb8:	08010200 	.word	0x08010200
 800ccbc:	080100f0 	.word	0x080100f0
 800ccc0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ccc2:	9901      	ldr	r1, [sp, #4]
 800ccc4:	6011      	str	r1, [r2, #0]
 800ccc6:	f1b9 0f0e 	cmp.w	r9, #14
 800ccca:	d86c      	bhi.n	800cda6 <_dtoa_r+0x3de>
 800cccc:	2c00      	cmp	r4, #0
 800ccce:	d06a      	beq.n	800cda6 <_dtoa_r+0x3de>
 800ccd0:	f1bb 0f00 	cmp.w	fp, #0
 800ccd4:	f340 80a0 	ble.w	800ce18 <_dtoa_r+0x450>
 800ccd8:	49c1      	ldr	r1, [pc, #772]	; (800cfe0 <_dtoa_r+0x618>)
 800ccda:	f00b 020f 	and.w	r2, fp, #15
 800ccde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cce2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cce6:	ed92 7b00 	vldr	d7, [r2]
 800ccea:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ccee:	f000 8087 	beq.w	800ce00 <_dtoa_r+0x438>
 800ccf2:	4abc      	ldr	r2, [pc, #752]	; (800cfe4 <_dtoa_r+0x61c>)
 800ccf4:	ed92 6b08 	vldr	d6, [r2, #32]
 800ccf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ccfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cd00:	f001 010f 	and.w	r1, r1, #15
 800cd04:	2203      	movs	r2, #3
 800cd06:	48b7      	ldr	r0, [pc, #732]	; (800cfe4 <_dtoa_r+0x61c>)
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	d17b      	bne.n	800ce04 <_dtoa_r+0x43c>
 800cd0c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cd14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd1a:	2900      	cmp	r1, #0
 800cd1c:	f000 80a2 	beq.w	800ce64 <_dtoa_r+0x49c>
 800cd20:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cd24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd30:	f140 8098 	bpl.w	800ce64 <_dtoa_r+0x49c>
 800cd34:	f1b9 0f00 	cmp.w	r9, #0
 800cd38:	f000 8094 	beq.w	800ce64 <_dtoa_r+0x49c>
 800cd3c:	f1ba 0f00 	cmp.w	sl, #0
 800cd40:	dd2f      	ble.n	800cda2 <_dtoa_r+0x3da>
 800cd42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cd46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd4e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800cd52:	3201      	adds	r2, #1
 800cd54:	4650      	mov	r0, sl
 800cd56:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd5a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cd5e:	ee07 2a90 	vmov	s15, r2
 800cd62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd66:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cd6a:	ee15 4a90 	vmov	r4, s11
 800cd6e:	ec52 1b15 	vmov	r1, r2, d5
 800cd72:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d177      	bne.n	800ce6a <_dtoa_r+0x4a2>
 800cd7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cd82:	ec42 1b17 	vmov	d7, r1, r2
 800cd86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8e:	f300 8263 	bgt.w	800d258 <_dtoa_r+0x890>
 800cd92:	eeb1 7b47 	vneg.f64	d7, d7
 800cd96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9e:	f100 8258 	bmi.w	800d252 <_dtoa_r+0x88a>
 800cda2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cda6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	f2c0 811d 	blt.w	800cfe8 <_dtoa_r+0x620>
 800cdae:	f1bb 0f0e 	cmp.w	fp, #14
 800cdb2:	f300 8119 	bgt.w	800cfe8 <_dtoa_r+0x620>
 800cdb6:	4b8a      	ldr	r3, [pc, #552]	; (800cfe0 <_dtoa_r+0x618>)
 800cdb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cdbc:	ed93 6b00 	vldr	d6, [r3]
 800cdc0:	9b08      	ldr	r3, [sp, #32]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f280 80b7 	bge.w	800cf36 <_dtoa_r+0x56e>
 800cdc8:	f1b9 0f00 	cmp.w	r9, #0
 800cdcc:	f300 80b3 	bgt.w	800cf36 <_dtoa_r+0x56e>
 800cdd0:	f040 823f 	bne.w	800d252 <_dtoa_r+0x88a>
 800cdd4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cdd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cde0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde8:	464c      	mov	r4, r9
 800cdea:	464f      	mov	r7, r9
 800cdec:	f280 8215 	bge.w	800d21a <_dtoa_r+0x852>
 800cdf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdf4:	2331      	movs	r3, #49	; 0x31
 800cdf6:	f808 3b01 	strb.w	r3, [r8], #1
 800cdfa:	f10b 0b01 	add.w	fp, fp, #1
 800cdfe:	e211      	b.n	800d224 <_dtoa_r+0x85c>
 800ce00:	2202      	movs	r2, #2
 800ce02:	e780      	b.n	800cd06 <_dtoa_r+0x33e>
 800ce04:	07cc      	lsls	r4, r1, #31
 800ce06:	d504      	bpl.n	800ce12 <_dtoa_r+0x44a>
 800ce08:	ed90 6b00 	vldr	d6, [r0]
 800ce0c:	3201      	adds	r2, #1
 800ce0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce12:	1049      	asrs	r1, r1, #1
 800ce14:	3008      	adds	r0, #8
 800ce16:	e777      	b.n	800cd08 <_dtoa_r+0x340>
 800ce18:	d022      	beq.n	800ce60 <_dtoa_r+0x498>
 800ce1a:	f1cb 0100 	rsb	r1, fp, #0
 800ce1e:	4a70      	ldr	r2, [pc, #448]	; (800cfe0 <_dtoa_r+0x618>)
 800ce20:	f001 000f 	and.w	r0, r1, #15
 800ce24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce28:	ed92 7b00 	vldr	d7, [r2]
 800ce2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ce30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce34:	486b      	ldr	r0, [pc, #428]	; (800cfe4 <_dtoa_r+0x61c>)
 800ce36:	1109      	asrs	r1, r1, #4
 800ce38:	2400      	movs	r4, #0
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	b929      	cbnz	r1, 800ce4a <_dtoa_r+0x482>
 800ce3e:	2c00      	cmp	r4, #0
 800ce40:	f43f af6a 	beq.w	800cd18 <_dtoa_r+0x350>
 800ce44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce48:	e766      	b.n	800cd18 <_dtoa_r+0x350>
 800ce4a:	07cf      	lsls	r7, r1, #31
 800ce4c:	d505      	bpl.n	800ce5a <_dtoa_r+0x492>
 800ce4e:	ed90 6b00 	vldr	d6, [r0]
 800ce52:	3201      	adds	r2, #1
 800ce54:	2401      	movs	r4, #1
 800ce56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce5a:	1049      	asrs	r1, r1, #1
 800ce5c:	3008      	adds	r0, #8
 800ce5e:	e7ed      	b.n	800ce3c <_dtoa_r+0x474>
 800ce60:	2202      	movs	r2, #2
 800ce62:	e759      	b.n	800cd18 <_dtoa_r+0x350>
 800ce64:	465f      	mov	r7, fp
 800ce66:	4648      	mov	r0, r9
 800ce68:	e775      	b.n	800cd56 <_dtoa_r+0x38e>
 800ce6a:	ec42 1b17 	vmov	d7, r1, r2
 800ce6e:	4a5c      	ldr	r2, [pc, #368]	; (800cfe0 <_dtoa_r+0x618>)
 800ce70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce74:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ce78:	9a01      	ldr	r2, [sp, #4]
 800ce7a:	1814      	adds	r4, r2, r0
 800ce7c:	9a07      	ldr	r2, [sp, #28]
 800ce7e:	b352      	cbz	r2, 800ced6 <_dtoa_r+0x50e>
 800ce80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ce84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ce88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ce90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce94:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce9c:	ee14 2a90 	vmov	r2, s9
 800cea0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cea4:	3230      	adds	r2, #48	; 0x30
 800cea6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ceaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb2:	f808 2b01 	strb.w	r2, [r8], #1
 800ceb6:	d439      	bmi.n	800cf2c <_dtoa_r+0x564>
 800ceb8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cebc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec4:	d472      	bmi.n	800cfac <_dtoa_r+0x5e4>
 800cec6:	45a0      	cmp	r8, r4
 800cec8:	f43f af6b 	beq.w	800cda2 <_dtoa_r+0x3da>
 800cecc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ced0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ced4:	e7e0      	b.n	800ce98 <_dtoa_r+0x4d0>
 800ced6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ceda:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cede:	4621      	mov	r1, r4
 800cee0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cee4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cee8:	ee14 2a90 	vmov	r2, s9
 800ceec:	3230      	adds	r2, #48	; 0x30
 800ceee:	f808 2b01 	strb.w	r2, [r8], #1
 800cef2:	45a0      	cmp	r8, r4
 800cef4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cef8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cefc:	d118      	bne.n	800cf30 <_dtoa_r+0x568>
 800cefe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cf02:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cf06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	dc4d      	bgt.n	800cfac <_dtoa_r+0x5e4>
 800cf10:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1c:	f57f af41 	bpl.w	800cda2 <_dtoa_r+0x3da>
 800cf20:	4688      	mov	r8, r1
 800cf22:	3901      	subs	r1, #1
 800cf24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cf28:	2b30      	cmp	r3, #48	; 0x30
 800cf2a:	d0f9      	beq.n	800cf20 <_dtoa_r+0x558>
 800cf2c:	46bb      	mov	fp, r7
 800cf2e:	e02a      	b.n	800cf86 <_dtoa_r+0x5be>
 800cf30:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf34:	e7d6      	b.n	800cee4 <_dtoa_r+0x51c>
 800cf36:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cf3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cf46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cf4a:	ee15 3a10 	vmov	r3, s10
 800cf4e:	3330      	adds	r3, #48	; 0x30
 800cf50:	f808 3b01 	strb.w	r3, [r8], #1
 800cf54:	9b01      	ldr	r3, [sp, #4]
 800cf56:	eba8 0303 	sub.w	r3, r8, r3
 800cf5a:	4599      	cmp	r9, r3
 800cf5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cf60:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cf64:	d133      	bne.n	800cfce <_dtoa_r+0x606>
 800cf66:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf72:	dc1a      	bgt.n	800cfaa <_dtoa_r+0x5e2>
 800cf74:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7c:	d103      	bne.n	800cf86 <_dtoa_r+0x5be>
 800cf7e:	ee15 3a10 	vmov	r3, s10
 800cf82:	07d9      	lsls	r1, r3, #31
 800cf84:	d411      	bmi.n	800cfaa <_dtoa_r+0x5e2>
 800cf86:	4629      	mov	r1, r5
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f000 fe7d 	bl	800dc88 <_Bfree>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf92:	f888 3000 	strb.w	r3, [r8]
 800cf96:	f10b 0301 	add.w	r3, fp, #1
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f43f ad61 	beq.w	800ca66 <_dtoa_r+0x9e>
 800cfa4:	f8c3 8000 	str.w	r8, [r3]
 800cfa8:	e55d      	b.n	800ca66 <_dtoa_r+0x9e>
 800cfaa:	465f      	mov	r7, fp
 800cfac:	4643      	mov	r3, r8
 800cfae:	4698      	mov	r8, r3
 800cfb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfb4:	2a39      	cmp	r2, #57	; 0x39
 800cfb6:	d106      	bne.n	800cfc6 <_dtoa_r+0x5fe>
 800cfb8:	9a01      	ldr	r2, [sp, #4]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d1f7      	bne.n	800cfae <_dtoa_r+0x5e6>
 800cfbe:	9901      	ldr	r1, [sp, #4]
 800cfc0:	2230      	movs	r2, #48	; 0x30
 800cfc2:	3701      	adds	r7, #1
 800cfc4:	700a      	strb	r2, [r1, #0]
 800cfc6:	781a      	ldrb	r2, [r3, #0]
 800cfc8:	3201      	adds	r2, #1
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	e7ae      	b.n	800cf2c <_dtoa_r+0x564>
 800cfce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfda:	d1b2      	bne.n	800cf42 <_dtoa_r+0x57a>
 800cfdc:	e7d3      	b.n	800cf86 <_dtoa_r+0x5be>
 800cfde:	bf00      	nop
 800cfe0:	08010200 	.word	0x08010200
 800cfe4:	080101d8 	.word	0x080101d8
 800cfe8:	9907      	ldr	r1, [sp, #28]
 800cfea:	2900      	cmp	r1, #0
 800cfec:	f000 80d0 	beq.w	800d190 <_dtoa_r+0x7c8>
 800cff0:	9906      	ldr	r1, [sp, #24]
 800cff2:	2901      	cmp	r1, #1
 800cff4:	f300 80b4 	bgt.w	800d160 <_dtoa_r+0x798>
 800cff8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cffa:	2900      	cmp	r1, #0
 800cffc:	f000 80ac 	beq.w	800d158 <_dtoa_r+0x790>
 800d000:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d004:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d008:	461c      	mov	r4, r3
 800d00a:	930a      	str	r3, [sp, #40]	; 0x28
 800d00c:	9b04      	ldr	r3, [sp, #16]
 800d00e:	4413      	add	r3, r2
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	9b05      	ldr	r3, [sp, #20]
 800d014:	2101      	movs	r1, #1
 800d016:	4413      	add	r3, r2
 800d018:	4630      	mov	r0, r6
 800d01a:	9305      	str	r3, [sp, #20]
 800d01c:	f000 ff36 	bl	800de8c <__i2b>
 800d020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d022:	4607      	mov	r7, r0
 800d024:	f1b8 0f00 	cmp.w	r8, #0
 800d028:	dd0d      	ble.n	800d046 <_dtoa_r+0x67e>
 800d02a:	9a05      	ldr	r2, [sp, #20]
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	dd0a      	ble.n	800d046 <_dtoa_r+0x67e>
 800d030:	4542      	cmp	r2, r8
 800d032:	9904      	ldr	r1, [sp, #16]
 800d034:	bfa8      	it	ge
 800d036:	4642      	movge	r2, r8
 800d038:	1a89      	subs	r1, r1, r2
 800d03a:	9104      	str	r1, [sp, #16]
 800d03c:	9905      	ldr	r1, [sp, #20]
 800d03e:	eba8 0802 	sub.w	r8, r8, r2
 800d042:	1a8a      	subs	r2, r1, r2
 800d044:	9205      	str	r2, [sp, #20]
 800d046:	b303      	cbz	r3, 800d08a <_dtoa_r+0x6c2>
 800d048:	9a07      	ldr	r2, [sp, #28]
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	f000 80a5 	beq.w	800d19a <_dtoa_r+0x7d2>
 800d050:	2c00      	cmp	r4, #0
 800d052:	dd13      	ble.n	800d07c <_dtoa_r+0x6b4>
 800d054:	4639      	mov	r1, r7
 800d056:	4622      	mov	r2, r4
 800d058:	4630      	mov	r0, r6
 800d05a:	930d      	str	r3, [sp, #52]	; 0x34
 800d05c:	f000 ffd6 	bl	800e00c <__pow5mult>
 800d060:	462a      	mov	r2, r5
 800d062:	4601      	mov	r1, r0
 800d064:	4607      	mov	r7, r0
 800d066:	4630      	mov	r0, r6
 800d068:	f000 ff26 	bl	800deb8 <__multiply>
 800d06c:	4629      	mov	r1, r5
 800d06e:	900a      	str	r0, [sp, #40]	; 0x28
 800d070:	4630      	mov	r0, r6
 800d072:	f000 fe09 	bl	800dc88 <_Bfree>
 800d076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d07a:	4615      	mov	r5, r2
 800d07c:	1b1a      	subs	r2, r3, r4
 800d07e:	d004      	beq.n	800d08a <_dtoa_r+0x6c2>
 800d080:	4629      	mov	r1, r5
 800d082:	4630      	mov	r0, r6
 800d084:	f000 ffc2 	bl	800e00c <__pow5mult>
 800d088:	4605      	mov	r5, r0
 800d08a:	2101      	movs	r1, #1
 800d08c:	4630      	mov	r0, r6
 800d08e:	f000 fefd 	bl	800de8c <__i2b>
 800d092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	f340 8081 	ble.w	800d19e <_dtoa_r+0x7d6>
 800d09c:	461a      	mov	r2, r3
 800d09e:	4601      	mov	r1, r0
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f000 ffb3 	bl	800e00c <__pow5mult>
 800d0a6:	9b06      	ldr	r3, [sp, #24]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	dd7a      	ble.n	800d1a4 <_dtoa_r+0x7dc>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800d0b2:	6922      	ldr	r2, [r4, #16]
 800d0b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d0b8:	6910      	ldr	r0, [r2, #16]
 800d0ba:	f000 fe97 	bl	800ddec <__hi0bits>
 800d0be:	f1c0 0020 	rsb	r0, r0, #32
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	4418      	add	r0, r3
 800d0c6:	f010 001f 	ands.w	r0, r0, #31
 800d0ca:	f000 808c 	beq.w	800d1e6 <_dtoa_r+0x81e>
 800d0ce:	f1c0 0220 	rsb	r2, r0, #32
 800d0d2:	2a04      	cmp	r2, #4
 800d0d4:	f340 8085 	ble.w	800d1e2 <_dtoa_r+0x81a>
 800d0d8:	f1c0 001c 	rsb	r0, r0, #28
 800d0dc:	9b04      	ldr	r3, [sp, #16]
 800d0de:	4403      	add	r3, r0
 800d0e0:	9304      	str	r3, [sp, #16]
 800d0e2:	9b05      	ldr	r3, [sp, #20]
 800d0e4:	4403      	add	r3, r0
 800d0e6:	4480      	add	r8, r0
 800d0e8:	9305      	str	r3, [sp, #20]
 800d0ea:	9b04      	ldr	r3, [sp, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dd05      	ble.n	800d0fc <_dtoa_r+0x734>
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f000 ffe3 	bl	800e0c0 <__lshift>
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	9b05      	ldr	r3, [sp, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	dd05      	ble.n	800d10e <_dtoa_r+0x746>
 800d102:	4621      	mov	r1, r4
 800d104:	461a      	mov	r2, r3
 800d106:	4630      	mov	r0, r6
 800d108:	f000 ffda 	bl	800e0c0 <__lshift>
 800d10c:	4604      	mov	r4, r0
 800d10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d06a      	beq.n	800d1ea <_dtoa_r+0x822>
 800d114:	4621      	mov	r1, r4
 800d116:	4628      	mov	r0, r5
 800d118:	f001 f842 	bl	800e1a0 <__mcmp>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	da64      	bge.n	800d1ea <_dtoa_r+0x822>
 800d120:	2300      	movs	r3, #0
 800d122:	4629      	mov	r1, r5
 800d124:	220a      	movs	r2, #10
 800d126:	4630      	mov	r0, r6
 800d128:	f000 fdd0 	bl	800dccc <__multadd>
 800d12c:	9b07      	ldr	r3, [sp, #28]
 800d12e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d132:	4605      	mov	r5, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8191 	beq.w	800d45c <_dtoa_r+0xa94>
 800d13a:	4639      	mov	r1, r7
 800d13c:	2300      	movs	r3, #0
 800d13e:	220a      	movs	r2, #10
 800d140:	4630      	mov	r0, r6
 800d142:	f000 fdc3 	bl	800dccc <__multadd>
 800d146:	f1ba 0f00 	cmp.w	sl, #0
 800d14a:	4607      	mov	r7, r0
 800d14c:	f300 808d 	bgt.w	800d26a <_dtoa_r+0x8a2>
 800d150:	9b06      	ldr	r3, [sp, #24]
 800d152:	2b02      	cmp	r3, #2
 800d154:	dc50      	bgt.n	800d1f8 <_dtoa_r+0x830>
 800d156:	e088      	b.n	800d26a <_dtoa_r+0x8a2>
 800d158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d15a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d15e:	e751      	b.n	800d004 <_dtoa_r+0x63c>
 800d160:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800d164:	42a3      	cmp	r3, r4
 800d166:	bfbf      	itttt	lt
 800d168:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800d16a:	1ae3      	sublt	r3, r4, r3
 800d16c:	18d2      	addlt	r2, r2, r3
 800d16e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800d170:	bfb6      	itet	lt
 800d172:	4623      	movlt	r3, r4
 800d174:	1b1c      	subge	r4, r3, r4
 800d176:	2400      	movlt	r4, #0
 800d178:	f1b9 0f00 	cmp.w	r9, #0
 800d17c:	bfb5      	itete	lt
 800d17e:	9a04      	ldrlt	r2, [sp, #16]
 800d180:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d184:	eba2 0809 	sublt.w	r8, r2, r9
 800d188:	464a      	movge	r2, r9
 800d18a:	bfb8      	it	lt
 800d18c:	2200      	movlt	r2, #0
 800d18e:	e73c      	b.n	800d00a <_dtoa_r+0x642>
 800d190:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d194:	9f07      	ldr	r7, [sp, #28]
 800d196:	461c      	mov	r4, r3
 800d198:	e744      	b.n	800d024 <_dtoa_r+0x65c>
 800d19a:	461a      	mov	r2, r3
 800d19c:	e770      	b.n	800d080 <_dtoa_r+0x6b8>
 800d19e:	9b06      	ldr	r3, [sp, #24]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	dc18      	bgt.n	800d1d6 <_dtoa_r+0x80e>
 800d1a4:	9b02      	ldr	r3, [sp, #8]
 800d1a6:	b9b3      	cbnz	r3, 800d1d6 <_dtoa_r+0x80e>
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d1ae:	b9a2      	cbnz	r2, 800d1da <_dtoa_r+0x812>
 800d1b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d1b4:	0d12      	lsrs	r2, r2, #20
 800d1b6:	0512      	lsls	r2, r2, #20
 800d1b8:	b18a      	cbz	r2, 800d1de <_dtoa_r+0x816>
 800d1ba:	9b04      	ldr	r3, [sp, #16]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	9304      	str	r3, [sp, #16]
 800d1c0:	9b05      	ldr	r3, [sp, #20]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	9305      	str	r3, [sp, #20]
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f47f af70 	bne.w	800d0b2 <_dtoa_r+0x6ea>
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	e775      	b.n	800d0c2 <_dtoa_r+0x6fa>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	e7f6      	b.n	800d1c8 <_dtoa_r+0x800>
 800d1da:	9b02      	ldr	r3, [sp, #8]
 800d1dc:	e7f4      	b.n	800d1c8 <_dtoa_r+0x800>
 800d1de:	920a      	str	r2, [sp, #40]	; 0x28
 800d1e0:	e7f3      	b.n	800d1ca <_dtoa_r+0x802>
 800d1e2:	d082      	beq.n	800d0ea <_dtoa_r+0x722>
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	301c      	adds	r0, #28
 800d1e8:	e778      	b.n	800d0dc <_dtoa_r+0x714>
 800d1ea:	f1b9 0f00 	cmp.w	r9, #0
 800d1ee:	dc37      	bgt.n	800d260 <_dtoa_r+0x898>
 800d1f0:	9b06      	ldr	r3, [sp, #24]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	dd34      	ble.n	800d260 <_dtoa_r+0x898>
 800d1f6:	46ca      	mov	sl, r9
 800d1f8:	f1ba 0f00 	cmp.w	sl, #0
 800d1fc:	d10d      	bne.n	800d21a <_dtoa_r+0x852>
 800d1fe:	4621      	mov	r1, r4
 800d200:	4653      	mov	r3, sl
 800d202:	2205      	movs	r2, #5
 800d204:	4630      	mov	r0, r6
 800d206:	f000 fd61 	bl	800dccc <__multadd>
 800d20a:	4601      	mov	r1, r0
 800d20c:	4604      	mov	r4, r0
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 ffc6 	bl	800e1a0 <__mcmp>
 800d214:	2800      	cmp	r0, #0
 800d216:	f73f adeb 	bgt.w	800cdf0 <_dtoa_r+0x428>
 800d21a:	9b08      	ldr	r3, [sp, #32]
 800d21c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d220:	ea6f 0b03 	mvn.w	fp, r3
 800d224:	f04f 0900 	mov.w	r9, #0
 800d228:	4621      	mov	r1, r4
 800d22a:	4630      	mov	r0, r6
 800d22c:	f000 fd2c 	bl	800dc88 <_Bfree>
 800d230:	2f00      	cmp	r7, #0
 800d232:	f43f aea8 	beq.w	800cf86 <_dtoa_r+0x5be>
 800d236:	f1b9 0f00 	cmp.w	r9, #0
 800d23a:	d005      	beq.n	800d248 <_dtoa_r+0x880>
 800d23c:	45b9      	cmp	r9, r7
 800d23e:	d003      	beq.n	800d248 <_dtoa_r+0x880>
 800d240:	4649      	mov	r1, r9
 800d242:	4630      	mov	r0, r6
 800d244:	f000 fd20 	bl	800dc88 <_Bfree>
 800d248:	4639      	mov	r1, r7
 800d24a:	4630      	mov	r0, r6
 800d24c:	f000 fd1c 	bl	800dc88 <_Bfree>
 800d250:	e699      	b.n	800cf86 <_dtoa_r+0x5be>
 800d252:	2400      	movs	r4, #0
 800d254:	4627      	mov	r7, r4
 800d256:	e7e0      	b.n	800d21a <_dtoa_r+0x852>
 800d258:	46bb      	mov	fp, r7
 800d25a:	4604      	mov	r4, r0
 800d25c:	4607      	mov	r7, r0
 800d25e:	e5c7      	b.n	800cdf0 <_dtoa_r+0x428>
 800d260:	9b07      	ldr	r3, [sp, #28]
 800d262:	46ca      	mov	sl, r9
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 8100 	beq.w	800d46a <_dtoa_r+0xaa2>
 800d26a:	f1b8 0f00 	cmp.w	r8, #0
 800d26e:	dd05      	ble.n	800d27c <_dtoa_r+0x8b4>
 800d270:	4639      	mov	r1, r7
 800d272:	4642      	mov	r2, r8
 800d274:	4630      	mov	r0, r6
 800d276:	f000 ff23 	bl	800e0c0 <__lshift>
 800d27a:	4607      	mov	r7, r0
 800d27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d05d      	beq.n	800d33e <_dtoa_r+0x976>
 800d282:	6879      	ldr	r1, [r7, #4]
 800d284:	4630      	mov	r0, r6
 800d286:	f000 fcbf 	bl	800dc08 <_Balloc>
 800d28a:	4680      	mov	r8, r0
 800d28c:	b928      	cbnz	r0, 800d29a <_dtoa_r+0x8d2>
 800d28e:	4b82      	ldr	r3, [pc, #520]	; (800d498 <_dtoa_r+0xad0>)
 800d290:	4602      	mov	r2, r0
 800d292:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d296:	f7ff bbaf 	b.w	800c9f8 <_dtoa_r+0x30>
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	3202      	adds	r2, #2
 800d29e:	0092      	lsls	r2, r2, #2
 800d2a0:	f107 010c 	add.w	r1, r7, #12
 800d2a4:	300c      	adds	r0, #12
 800d2a6:	f000 fc95 	bl	800dbd4 <memcpy>
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	4641      	mov	r1, r8
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f000 ff06 	bl	800e0c0 <__lshift>
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	9b01      	ldr	r3, [sp, #4]
 800d2bc:	4453      	add	r3, sl
 800d2be:	9308      	str	r3, [sp, #32]
 800d2c0:	9b02      	ldr	r3, [sp, #8]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	46b9      	mov	r9, r7
 800d2c8:	9307      	str	r3, [sp, #28]
 800d2ca:	4607      	mov	r7, r0
 800d2cc:	9b04      	ldr	r3, [sp, #16]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	9302      	str	r3, [sp, #8]
 800d2d6:	f7ff fae9 	bl	800c8ac <quorem>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	3330      	adds	r3, #48	; 0x30
 800d2de:	9005      	str	r0, [sp, #20]
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e6:	f000 ff5b 	bl	800e1a0 <__mcmp>
 800d2ea:	463a      	mov	r2, r7
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f000 ff71 	bl	800e1d8 <__mdiff>
 800d2f6:	68c2      	ldr	r2, [r0, #12]
 800d2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2fa:	4680      	mov	r8, r0
 800d2fc:	bb0a      	cbnz	r2, 800d342 <_dtoa_r+0x97a>
 800d2fe:	4601      	mov	r1, r0
 800d300:	4628      	mov	r0, r5
 800d302:	f000 ff4d 	bl	800e1a0 <__mcmp>
 800d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d308:	4602      	mov	r2, r0
 800d30a:	4641      	mov	r1, r8
 800d30c:	4630      	mov	r0, r6
 800d30e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d312:	f000 fcb9 	bl	800dc88 <_Bfree>
 800d316:	9b06      	ldr	r3, [sp, #24]
 800d318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d31a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d31e:	ea43 0102 	orr.w	r1, r3, r2
 800d322:	9b07      	ldr	r3, [sp, #28]
 800d324:	430b      	orrs	r3, r1
 800d326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d328:	d10d      	bne.n	800d346 <_dtoa_r+0x97e>
 800d32a:	2b39      	cmp	r3, #57	; 0x39
 800d32c:	d029      	beq.n	800d382 <_dtoa_r+0x9ba>
 800d32e:	f1ba 0f00 	cmp.w	sl, #0
 800d332:	dd01      	ble.n	800d338 <_dtoa_r+0x970>
 800d334:	9b05      	ldr	r3, [sp, #20]
 800d336:	3331      	adds	r3, #49	; 0x31
 800d338:	9a02      	ldr	r2, [sp, #8]
 800d33a:	7013      	strb	r3, [r2, #0]
 800d33c:	e774      	b.n	800d228 <_dtoa_r+0x860>
 800d33e:	4638      	mov	r0, r7
 800d340:	e7b8      	b.n	800d2b4 <_dtoa_r+0x8ec>
 800d342:	2201      	movs	r2, #1
 800d344:	e7e1      	b.n	800d30a <_dtoa_r+0x942>
 800d346:	f1ba 0f00 	cmp.w	sl, #0
 800d34a:	db06      	blt.n	800d35a <_dtoa_r+0x992>
 800d34c:	9906      	ldr	r1, [sp, #24]
 800d34e:	ea41 0a0a 	orr.w	sl, r1, sl
 800d352:	9907      	ldr	r1, [sp, #28]
 800d354:	ea5a 0101 	orrs.w	r1, sl, r1
 800d358:	d120      	bne.n	800d39c <_dtoa_r+0x9d4>
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	ddec      	ble.n	800d338 <_dtoa_r+0x970>
 800d35e:	4629      	mov	r1, r5
 800d360:	2201      	movs	r2, #1
 800d362:	4630      	mov	r0, r6
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	f000 feab 	bl	800e0c0 <__lshift>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4605      	mov	r5, r0
 800d36e:	f000 ff17 	bl	800e1a0 <__mcmp>
 800d372:	2800      	cmp	r0, #0
 800d374:	9b04      	ldr	r3, [sp, #16]
 800d376:	dc02      	bgt.n	800d37e <_dtoa_r+0x9b6>
 800d378:	d1de      	bne.n	800d338 <_dtoa_r+0x970>
 800d37a:	07da      	lsls	r2, r3, #31
 800d37c:	d5dc      	bpl.n	800d338 <_dtoa_r+0x970>
 800d37e:	2b39      	cmp	r3, #57	; 0x39
 800d380:	d1d8      	bne.n	800d334 <_dtoa_r+0x96c>
 800d382:	9a02      	ldr	r2, [sp, #8]
 800d384:	2339      	movs	r3, #57	; 0x39
 800d386:	7013      	strb	r3, [r2, #0]
 800d388:	4643      	mov	r3, r8
 800d38a:	4698      	mov	r8, r3
 800d38c:	3b01      	subs	r3, #1
 800d38e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d392:	2a39      	cmp	r2, #57	; 0x39
 800d394:	d051      	beq.n	800d43a <_dtoa_r+0xa72>
 800d396:	3201      	adds	r2, #1
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	e745      	b.n	800d228 <_dtoa_r+0x860>
 800d39c:	2a00      	cmp	r2, #0
 800d39e:	dd03      	ble.n	800d3a8 <_dtoa_r+0x9e0>
 800d3a0:	2b39      	cmp	r3, #57	; 0x39
 800d3a2:	d0ee      	beq.n	800d382 <_dtoa_r+0x9ba>
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	e7c7      	b.n	800d338 <_dtoa_r+0x970>
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	9908      	ldr	r1, [sp, #32]
 800d3ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d3b0:	428a      	cmp	r2, r1
 800d3b2:	d02b      	beq.n	800d40c <_dtoa_r+0xa44>
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	220a      	movs	r2, #10
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f000 fc86 	bl	800dccc <__multadd>
 800d3c0:	45b9      	cmp	r9, r7
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	f04f 0300 	mov.w	r3, #0
 800d3c8:	f04f 020a 	mov.w	r2, #10
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	d107      	bne.n	800d3e2 <_dtoa_r+0xa1a>
 800d3d2:	f000 fc7b 	bl	800dccc <__multadd>
 800d3d6:	4681      	mov	r9, r0
 800d3d8:	4607      	mov	r7, r0
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	9304      	str	r3, [sp, #16]
 800d3e0:	e774      	b.n	800d2cc <_dtoa_r+0x904>
 800d3e2:	f000 fc73 	bl	800dccc <__multadd>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4681      	mov	r9, r0
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	220a      	movs	r2, #10
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 fc6c 	bl	800dccc <__multadd>
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	e7f0      	b.n	800d3da <_dtoa_r+0xa12>
 800d3f8:	f1ba 0f00 	cmp.w	sl, #0
 800d3fc:	9a01      	ldr	r2, [sp, #4]
 800d3fe:	bfcc      	ite	gt
 800d400:	46d0      	movgt	r8, sl
 800d402:	f04f 0801 	movle.w	r8, #1
 800d406:	4490      	add	r8, r2
 800d408:	f04f 0900 	mov.w	r9, #0
 800d40c:	4629      	mov	r1, r5
 800d40e:	2201      	movs	r2, #1
 800d410:	4630      	mov	r0, r6
 800d412:	9302      	str	r3, [sp, #8]
 800d414:	f000 fe54 	bl	800e0c0 <__lshift>
 800d418:	4621      	mov	r1, r4
 800d41a:	4605      	mov	r5, r0
 800d41c:	f000 fec0 	bl	800e1a0 <__mcmp>
 800d420:	2800      	cmp	r0, #0
 800d422:	dcb1      	bgt.n	800d388 <_dtoa_r+0x9c0>
 800d424:	d102      	bne.n	800d42c <_dtoa_r+0xa64>
 800d426:	9b02      	ldr	r3, [sp, #8]
 800d428:	07db      	lsls	r3, r3, #31
 800d42a:	d4ad      	bmi.n	800d388 <_dtoa_r+0x9c0>
 800d42c:	4643      	mov	r3, r8
 800d42e:	4698      	mov	r8, r3
 800d430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d434:	2a30      	cmp	r2, #48	; 0x30
 800d436:	d0fa      	beq.n	800d42e <_dtoa_r+0xa66>
 800d438:	e6f6      	b.n	800d228 <_dtoa_r+0x860>
 800d43a:	9a01      	ldr	r2, [sp, #4]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d1a4      	bne.n	800d38a <_dtoa_r+0x9c2>
 800d440:	f10b 0b01 	add.w	fp, fp, #1
 800d444:	2331      	movs	r3, #49	; 0x31
 800d446:	e778      	b.n	800d33a <_dtoa_r+0x972>
 800d448:	4b14      	ldr	r3, [pc, #80]	; (800d49c <_dtoa_r+0xad4>)
 800d44a:	f7ff bb27 	b.w	800ca9c <_dtoa_r+0xd4>
 800d44e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f ab03 	bne.w	800ca5c <_dtoa_r+0x94>
 800d456:	4b12      	ldr	r3, [pc, #72]	; (800d4a0 <_dtoa_r+0xad8>)
 800d458:	f7ff bb20 	b.w	800ca9c <_dtoa_r+0xd4>
 800d45c:	f1ba 0f00 	cmp.w	sl, #0
 800d460:	dc03      	bgt.n	800d46a <_dtoa_r+0xaa2>
 800d462:	9b06      	ldr	r3, [sp, #24]
 800d464:	2b02      	cmp	r3, #2
 800d466:	f73f aec7 	bgt.w	800d1f8 <_dtoa_r+0x830>
 800d46a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	f7ff fa1b 	bl	800c8ac <quorem>
 800d476:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d47a:	f808 3b01 	strb.w	r3, [r8], #1
 800d47e:	9a01      	ldr	r2, [sp, #4]
 800d480:	eba8 0202 	sub.w	r2, r8, r2
 800d484:	4592      	cmp	sl, r2
 800d486:	ddb7      	ble.n	800d3f8 <_dtoa_r+0xa30>
 800d488:	4629      	mov	r1, r5
 800d48a:	2300      	movs	r3, #0
 800d48c:	220a      	movs	r2, #10
 800d48e:	4630      	mov	r0, r6
 800d490:	f000 fc1c 	bl	800dccc <__multadd>
 800d494:	4605      	mov	r5, r0
 800d496:	e7ea      	b.n	800d46e <_dtoa_r+0xaa6>
 800d498:	080100f0 	.word	0x080100f0
 800d49c:	080102e9 	.word	0x080102e9
 800d4a0:	08010071 	.word	0x08010071

0800d4a4 <rshift>:
 800d4a4:	6903      	ldr	r3, [r0, #16]
 800d4a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4b2:	f100 0414 	add.w	r4, r0, #20
 800d4b6:	dd45      	ble.n	800d544 <rshift+0xa0>
 800d4b8:	f011 011f 	ands.w	r1, r1, #31
 800d4bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4c4:	d10c      	bne.n	800d4e0 <rshift+0x3c>
 800d4c6:	f100 0710 	add.w	r7, r0, #16
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	42b1      	cmp	r1, r6
 800d4ce:	d334      	bcc.n	800d53a <rshift+0x96>
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	1eea      	subs	r2, r5, #3
 800d4d6:	4296      	cmp	r6, r2
 800d4d8:	bf38      	it	cc
 800d4da:	2300      	movcc	r3, #0
 800d4dc:	4423      	add	r3, r4
 800d4de:	e015      	b.n	800d50c <rshift+0x68>
 800d4e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4e4:	f1c1 0820 	rsb	r8, r1, #32
 800d4e8:	40cf      	lsrs	r7, r1
 800d4ea:	f105 0e04 	add.w	lr, r5, #4
 800d4ee:	46a1      	mov	r9, r4
 800d4f0:	4576      	cmp	r6, lr
 800d4f2:	46f4      	mov	ip, lr
 800d4f4:	d815      	bhi.n	800d522 <rshift+0x7e>
 800d4f6:	1a9a      	subs	r2, r3, r2
 800d4f8:	0092      	lsls	r2, r2, #2
 800d4fa:	3a04      	subs	r2, #4
 800d4fc:	3501      	adds	r5, #1
 800d4fe:	42ae      	cmp	r6, r5
 800d500:	bf38      	it	cc
 800d502:	2200      	movcc	r2, #0
 800d504:	18a3      	adds	r3, r4, r2
 800d506:	50a7      	str	r7, [r4, r2]
 800d508:	b107      	cbz	r7, 800d50c <rshift+0x68>
 800d50a:	3304      	adds	r3, #4
 800d50c:	1b1a      	subs	r2, r3, r4
 800d50e:	42a3      	cmp	r3, r4
 800d510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d514:	bf08      	it	eq
 800d516:	2300      	moveq	r3, #0
 800d518:	6102      	str	r2, [r0, #16]
 800d51a:	bf08      	it	eq
 800d51c:	6143      	streq	r3, [r0, #20]
 800d51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d522:	f8dc c000 	ldr.w	ip, [ip]
 800d526:	fa0c fc08 	lsl.w	ip, ip, r8
 800d52a:	ea4c 0707 	orr.w	r7, ip, r7
 800d52e:	f849 7b04 	str.w	r7, [r9], #4
 800d532:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d536:	40cf      	lsrs	r7, r1
 800d538:	e7da      	b.n	800d4f0 <rshift+0x4c>
 800d53a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d53e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d542:	e7c3      	b.n	800d4cc <rshift+0x28>
 800d544:	4623      	mov	r3, r4
 800d546:	e7e1      	b.n	800d50c <rshift+0x68>

0800d548 <__hexdig_fun>:
 800d548:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d54c:	2b09      	cmp	r3, #9
 800d54e:	d802      	bhi.n	800d556 <__hexdig_fun+0xe>
 800d550:	3820      	subs	r0, #32
 800d552:	b2c0      	uxtb	r0, r0
 800d554:	4770      	bx	lr
 800d556:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d801      	bhi.n	800d562 <__hexdig_fun+0x1a>
 800d55e:	3847      	subs	r0, #71	; 0x47
 800d560:	e7f7      	b.n	800d552 <__hexdig_fun+0xa>
 800d562:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d566:	2b05      	cmp	r3, #5
 800d568:	d801      	bhi.n	800d56e <__hexdig_fun+0x26>
 800d56a:	3827      	subs	r0, #39	; 0x27
 800d56c:	e7f1      	b.n	800d552 <__hexdig_fun+0xa>
 800d56e:	2000      	movs	r0, #0
 800d570:	4770      	bx	lr
	...

0800d574 <__gethex>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	ed2d 8b02 	vpush	{d8}
 800d57c:	b089      	sub	sp, #36	; 0x24
 800d57e:	ee08 0a10 	vmov	s16, r0
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	4bb4      	ldr	r3, [pc, #720]	; (800d858 <__gethex+0x2e4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	468b      	mov	fp, r1
 800d58e:	4690      	mov	r8, r2
 800d590:	f7f2 fea6 	bl	80002e0 <strlen>
 800d594:	9b01      	ldr	r3, [sp, #4]
 800d596:	f8db 2000 	ldr.w	r2, [fp]
 800d59a:	4403      	add	r3, r0
 800d59c:	4682      	mov	sl, r0
 800d59e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d5a2:	9305      	str	r3, [sp, #20]
 800d5a4:	1c93      	adds	r3, r2, #2
 800d5a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d5aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5ae:	32fe      	adds	r2, #254	; 0xfe
 800d5b0:	18d1      	adds	r1, r2, r3
 800d5b2:	461f      	mov	r7, r3
 800d5b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d5b8:	9100      	str	r1, [sp, #0]
 800d5ba:	2830      	cmp	r0, #48	; 0x30
 800d5bc:	d0f8      	beq.n	800d5b0 <__gethex+0x3c>
 800d5be:	f7ff ffc3 	bl	800d548 <__hexdig_fun>
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d13a      	bne.n	800d63e <__gethex+0xca>
 800d5c8:	9901      	ldr	r1, [sp, #4]
 800d5ca:	4652      	mov	r2, sl
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f001 fcb9 	bl	800ef44 <strncmp>
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d168      	bne.n	800d6aa <__gethex+0x136>
 800d5d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d5dc:	eb07 060a 	add.w	r6, r7, sl
 800d5e0:	f7ff ffb2 	bl	800d548 <__hexdig_fun>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d062      	beq.n	800d6ae <__gethex+0x13a>
 800d5e8:	4633      	mov	r3, r6
 800d5ea:	7818      	ldrb	r0, [r3, #0]
 800d5ec:	2830      	cmp	r0, #48	; 0x30
 800d5ee:	461f      	mov	r7, r3
 800d5f0:	f103 0301 	add.w	r3, r3, #1
 800d5f4:	d0f9      	beq.n	800d5ea <__gethex+0x76>
 800d5f6:	f7ff ffa7 	bl	800d548 <__hexdig_fun>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	fab0 f480 	clz	r4, r0
 800d600:	0964      	lsrs	r4, r4, #5
 800d602:	4635      	mov	r5, r6
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	463a      	mov	r2, r7
 800d608:	4616      	mov	r6, r2
 800d60a:	3201      	adds	r2, #1
 800d60c:	7830      	ldrb	r0, [r6, #0]
 800d60e:	f7ff ff9b 	bl	800d548 <__hexdig_fun>
 800d612:	2800      	cmp	r0, #0
 800d614:	d1f8      	bne.n	800d608 <__gethex+0x94>
 800d616:	9901      	ldr	r1, [sp, #4]
 800d618:	4652      	mov	r2, sl
 800d61a:	4630      	mov	r0, r6
 800d61c:	f001 fc92 	bl	800ef44 <strncmp>
 800d620:	b980      	cbnz	r0, 800d644 <__gethex+0xd0>
 800d622:	b94d      	cbnz	r5, 800d638 <__gethex+0xc4>
 800d624:	eb06 050a 	add.w	r5, r6, sl
 800d628:	462a      	mov	r2, r5
 800d62a:	4616      	mov	r6, r2
 800d62c:	3201      	adds	r2, #1
 800d62e:	7830      	ldrb	r0, [r6, #0]
 800d630:	f7ff ff8a 	bl	800d548 <__hexdig_fun>
 800d634:	2800      	cmp	r0, #0
 800d636:	d1f8      	bne.n	800d62a <__gethex+0xb6>
 800d638:	1bad      	subs	r5, r5, r6
 800d63a:	00ad      	lsls	r5, r5, #2
 800d63c:	e004      	b.n	800d648 <__gethex+0xd4>
 800d63e:	2400      	movs	r4, #0
 800d640:	4625      	mov	r5, r4
 800d642:	e7e0      	b.n	800d606 <__gethex+0x92>
 800d644:	2d00      	cmp	r5, #0
 800d646:	d1f7      	bne.n	800d638 <__gethex+0xc4>
 800d648:	7833      	ldrb	r3, [r6, #0]
 800d64a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d64e:	2b50      	cmp	r3, #80	; 0x50
 800d650:	d13b      	bne.n	800d6ca <__gethex+0x156>
 800d652:	7873      	ldrb	r3, [r6, #1]
 800d654:	2b2b      	cmp	r3, #43	; 0x2b
 800d656:	d02c      	beq.n	800d6b2 <__gethex+0x13e>
 800d658:	2b2d      	cmp	r3, #45	; 0x2d
 800d65a:	d02e      	beq.n	800d6ba <__gethex+0x146>
 800d65c:	1c71      	adds	r1, r6, #1
 800d65e:	f04f 0900 	mov.w	r9, #0
 800d662:	7808      	ldrb	r0, [r1, #0]
 800d664:	f7ff ff70 	bl	800d548 <__hexdig_fun>
 800d668:	1e43      	subs	r3, r0, #1
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b18      	cmp	r3, #24
 800d66e:	d82c      	bhi.n	800d6ca <__gethex+0x156>
 800d670:	f1a0 0210 	sub.w	r2, r0, #16
 800d674:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d678:	f7ff ff66 	bl	800d548 <__hexdig_fun>
 800d67c:	1e43      	subs	r3, r0, #1
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b18      	cmp	r3, #24
 800d682:	d91d      	bls.n	800d6c0 <__gethex+0x14c>
 800d684:	f1b9 0f00 	cmp.w	r9, #0
 800d688:	d000      	beq.n	800d68c <__gethex+0x118>
 800d68a:	4252      	negs	r2, r2
 800d68c:	4415      	add	r5, r2
 800d68e:	f8cb 1000 	str.w	r1, [fp]
 800d692:	b1e4      	cbz	r4, 800d6ce <__gethex+0x15a>
 800d694:	9b00      	ldr	r3, [sp, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	bf14      	ite	ne
 800d69a:	2700      	movne	r7, #0
 800d69c:	2706      	moveq	r7, #6
 800d69e:	4638      	mov	r0, r7
 800d6a0:	b009      	add	sp, #36	; 0x24
 800d6a2:	ecbd 8b02 	vpop	{d8}
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	463e      	mov	r6, r7
 800d6ac:	4625      	mov	r5, r4
 800d6ae:	2401      	movs	r4, #1
 800d6b0:	e7ca      	b.n	800d648 <__gethex+0xd4>
 800d6b2:	f04f 0900 	mov.w	r9, #0
 800d6b6:	1cb1      	adds	r1, r6, #2
 800d6b8:	e7d3      	b.n	800d662 <__gethex+0xee>
 800d6ba:	f04f 0901 	mov.w	r9, #1
 800d6be:	e7fa      	b.n	800d6b6 <__gethex+0x142>
 800d6c0:	230a      	movs	r3, #10
 800d6c2:	fb03 0202 	mla	r2, r3, r2, r0
 800d6c6:	3a10      	subs	r2, #16
 800d6c8:	e7d4      	b.n	800d674 <__gethex+0x100>
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	e7df      	b.n	800d68e <__gethex+0x11a>
 800d6ce:	1bf3      	subs	r3, r6, r7
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	2b07      	cmp	r3, #7
 800d6d6:	dc0b      	bgt.n	800d6f0 <__gethex+0x17c>
 800d6d8:	ee18 0a10 	vmov	r0, s16
 800d6dc:	f000 fa94 	bl	800dc08 <_Balloc>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	b940      	cbnz	r0, 800d6f6 <__gethex+0x182>
 800d6e4:	4b5d      	ldr	r3, [pc, #372]	; (800d85c <__gethex+0x2e8>)
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	21de      	movs	r1, #222	; 0xde
 800d6ea:	485d      	ldr	r0, [pc, #372]	; (800d860 <__gethex+0x2ec>)
 800d6ec:	f001 fcfa 	bl	800f0e4 <__assert_func>
 800d6f0:	3101      	adds	r1, #1
 800d6f2:	105b      	asrs	r3, r3, #1
 800d6f4:	e7ee      	b.n	800d6d4 <__gethex+0x160>
 800d6f6:	f100 0914 	add.w	r9, r0, #20
 800d6fa:	f04f 0b00 	mov.w	fp, #0
 800d6fe:	f1ca 0301 	rsb	r3, sl, #1
 800d702:	f8cd 9008 	str.w	r9, [sp, #8]
 800d706:	f8cd b000 	str.w	fp, [sp]
 800d70a:	9306      	str	r3, [sp, #24]
 800d70c:	42b7      	cmp	r7, r6
 800d70e:	d340      	bcc.n	800d792 <__gethex+0x21e>
 800d710:	9802      	ldr	r0, [sp, #8]
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	f840 3b04 	str.w	r3, [r0], #4
 800d718:	eba0 0009 	sub.w	r0, r0, r9
 800d71c:	1080      	asrs	r0, r0, #2
 800d71e:	0146      	lsls	r6, r0, #5
 800d720:	6120      	str	r0, [r4, #16]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fb62 	bl	800ddec <__hi0bits>
 800d728:	1a30      	subs	r0, r6, r0
 800d72a:	f8d8 6000 	ldr.w	r6, [r8]
 800d72e:	42b0      	cmp	r0, r6
 800d730:	dd63      	ble.n	800d7fa <__gethex+0x286>
 800d732:	1b87      	subs	r7, r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	4620      	mov	r0, r4
 800d738:	f000 ff03 	bl	800e542 <__any_on>
 800d73c:	4682      	mov	sl, r0
 800d73e:	b1a8      	cbz	r0, 800d76c <__gethex+0x1f8>
 800d740:	1e7b      	subs	r3, r7, #1
 800d742:	1159      	asrs	r1, r3, #5
 800d744:	f003 021f 	and.w	r2, r3, #31
 800d748:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d74c:	f04f 0a01 	mov.w	sl, #1
 800d750:	fa0a f202 	lsl.w	r2, sl, r2
 800d754:	420a      	tst	r2, r1
 800d756:	d009      	beq.n	800d76c <__gethex+0x1f8>
 800d758:	4553      	cmp	r3, sl
 800d75a:	dd05      	ble.n	800d768 <__gethex+0x1f4>
 800d75c:	1eb9      	subs	r1, r7, #2
 800d75e:	4620      	mov	r0, r4
 800d760:	f000 feef 	bl	800e542 <__any_on>
 800d764:	2800      	cmp	r0, #0
 800d766:	d145      	bne.n	800d7f4 <__gethex+0x280>
 800d768:	f04f 0a02 	mov.w	sl, #2
 800d76c:	4639      	mov	r1, r7
 800d76e:	4620      	mov	r0, r4
 800d770:	f7ff fe98 	bl	800d4a4 <rshift>
 800d774:	443d      	add	r5, r7
 800d776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d77a:	42ab      	cmp	r3, r5
 800d77c:	da4c      	bge.n	800d818 <__gethex+0x2a4>
 800d77e:	ee18 0a10 	vmov	r0, s16
 800d782:	4621      	mov	r1, r4
 800d784:	f000 fa80 	bl	800dc88 <_Bfree>
 800d788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d78a:	2300      	movs	r3, #0
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	27a3      	movs	r7, #163	; 0xa3
 800d790:	e785      	b.n	800d69e <__gethex+0x12a>
 800d792:	1e73      	subs	r3, r6, #1
 800d794:	9a05      	ldr	r2, [sp, #20]
 800d796:	9303      	str	r3, [sp, #12]
 800d798:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d019      	beq.n	800d7d4 <__gethex+0x260>
 800d7a0:	f1bb 0f20 	cmp.w	fp, #32
 800d7a4:	d107      	bne.n	800d7b6 <__gethex+0x242>
 800d7a6:	9b02      	ldr	r3, [sp, #8]
 800d7a8:	9a00      	ldr	r2, [sp, #0]
 800d7aa:	f843 2b04 	str.w	r2, [r3], #4
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	469b      	mov	fp, r3
 800d7b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d7ba:	f7ff fec5 	bl	800d548 <__hexdig_fun>
 800d7be:	9b00      	ldr	r3, [sp, #0]
 800d7c0:	f000 000f 	and.w	r0, r0, #15
 800d7c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d7c8:	4303      	orrs	r3, r0
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	f10b 0b04 	add.w	fp, fp, #4
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	e00d      	b.n	800d7f0 <__gethex+0x27c>
 800d7d4:	9b03      	ldr	r3, [sp, #12]
 800d7d6:	9a06      	ldr	r2, [sp, #24]
 800d7d8:	4413      	add	r3, r2
 800d7da:	42bb      	cmp	r3, r7
 800d7dc:	d3e0      	bcc.n	800d7a0 <__gethex+0x22c>
 800d7de:	4618      	mov	r0, r3
 800d7e0:	9901      	ldr	r1, [sp, #4]
 800d7e2:	9307      	str	r3, [sp, #28]
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	f001 fbad 	bl	800ef44 <strncmp>
 800d7ea:	9b07      	ldr	r3, [sp, #28]
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d1d7      	bne.n	800d7a0 <__gethex+0x22c>
 800d7f0:	461e      	mov	r6, r3
 800d7f2:	e78b      	b.n	800d70c <__gethex+0x198>
 800d7f4:	f04f 0a03 	mov.w	sl, #3
 800d7f8:	e7b8      	b.n	800d76c <__gethex+0x1f8>
 800d7fa:	da0a      	bge.n	800d812 <__gethex+0x29e>
 800d7fc:	1a37      	subs	r7, r6, r0
 800d7fe:	4621      	mov	r1, r4
 800d800:	ee18 0a10 	vmov	r0, s16
 800d804:	463a      	mov	r2, r7
 800d806:	f000 fc5b 	bl	800e0c0 <__lshift>
 800d80a:	1bed      	subs	r5, r5, r7
 800d80c:	4604      	mov	r4, r0
 800d80e:	f100 0914 	add.w	r9, r0, #20
 800d812:	f04f 0a00 	mov.w	sl, #0
 800d816:	e7ae      	b.n	800d776 <__gethex+0x202>
 800d818:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d81c:	42a8      	cmp	r0, r5
 800d81e:	dd72      	ble.n	800d906 <__gethex+0x392>
 800d820:	1b45      	subs	r5, r0, r5
 800d822:	42ae      	cmp	r6, r5
 800d824:	dc36      	bgt.n	800d894 <__gethex+0x320>
 800d826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d02a      	beq.n	800d884 <__gethex+0x310>
 800d82e:	2b03      	cmp	r3, #3
 800d830:	d02c      	beq.n	800d88c <__gethex+0x318>
 800d832:	2b01      	cmp	r3, #1
 800d834:	d11c      	bne.n	800d870 <__gethex+0x2fc>
 800d836:	42ae      	cmp	r6, r5
 800d838:	d11a      	bne.n	800d870 <__gethex+0x2fc>
 800d83a:	2e01      	cmp	r6, #1
 800d83c:	d112      	bne.n	800d864 <__gethex+0x2f0>
 800d83e:	9a04      	ldr	r2, [sp, #16]
 800d840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	2301      	movs	r3, #1
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	f8c9 3000 	str.w	r3, [r9]
 800d84e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d850:	2762      	movs	r7, #98	; 0x62
 800d852:	601c      	str	r4, [r3, #0]
 800d854:	e723      	b.n	800d69e <__gethex+0x12a>
 800d856:	bf00      	nop
 800d858:	08010168 	.word	0x08010168
 800d85c:	080100f0 	.word	0x080100f0
 800d860:	08010101 	.word	0x08010101
 800d864:	1e71      	subs	r1, r6, #1
 800d866:	4620      	mov	r0, r4
 800d868:	f000 fe6b 	bl	800e542 <__any_on>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d1e6      	bne.n	800d83e <__gethex+0x2ca>
 800d870:	ee18 0a10 	vmov	r0, s16
 800d874:	4621      	mov	r1, r4
 800d876:	f000 fa07 	bl	800dc88 <_Bfree>
 800d87a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d87c:	2300      	movs	r3, #0
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	2750      	movs	r7, #80	; 0x50
 800d882:	e70c      	b.n	800d69e <__gethex+0x12a>
 800d884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1f2      	bne.n	800d870 <__gethex+0x2fc>
 800d88a:	e7d8      	b.n	800d83e <__gethex+0x2ca>
 800d88c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1d5      	bne.n	800d83e <__gethex+0x2ca>
 800d892:	e7ed      	b.n	800d870 <__gethex+0x2fc>
 800d894:	1e6f      	subs	r7, r5, #1
 800d896:	f1ba 0f00 	cmp.w	sl, #0
 800d89a:	d131      	bne.n	800d900 <__gethex+0x38c>
 800d89c:	b127      	cbz	r7, 800d8a8 <__gethex+0x334>
 800d89e:	4639      	mov	r1, r7
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 fe4e 	bl	800e542 <__any_on>
 800d8a6:	4682      	mov	sl, r0
 800d8a8:	117b      	asrs	r3, r7, #5
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d8b0:	f007 071f 	and.w	r7, r7, #31
 800d8b4:	fa01 f707 	lsl.w	r7, r1, r7
 800d8b8:	421f      	tst	r7, r3
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4620      	mov	r0, r4
 800d8be:	bf18      	it	ne
 800d8c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800d8c4:	1b76      	subs	r6, r6, r5
 800d8c6:	f7ff fded 	bl	800d4a4 <rshift>
 800d8ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d8ce:	2702      	movs	r7, #2
 800d8d0:	f1ba 0f00 	cmp.w	sl, #0
 800d8d4:	d048      	beq.n	800d968 <__gethex+0x3f4>
 800d8d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d015      	beq.n	800d90a <__gethex+0x396>
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d017      	beq.n	800d912 <__gethex+0x39e>
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d109      	bne.n	800d8fa <__gethex+0x386>
 800d8e6:	f01a 0f02 	tst.w	sl, #2
 800d8ea:	d006      	beq.n	800d8fa <__gethex+0x386>
 800d8ec:	f8d9 0000 	ldr.w	r0, [r9]
 800d8f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d8f4:	f01a 0f01 	tst.w	sl, #1
 800d8f8:	d10e      	bne.n	800d918 <__gethex+0x3a4>
 800d8fa:	f047 0710 	orr.w	r7, r7, #16
 800d8fe:	e033      	b.n	800d968 <__gethex+0x3f4>
 800d900:	f04f 0a01 	mov.w	sl, #1
 800d904:	e7d0      	b.n	800d8a8 <__gethex+0x334>
 800d906:	2701      	movs	r7, #1
 800d908:	e7e2      	b.n	800d8d0 <__gethex+0x35c>
 800d90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d90c:	f1c3 0301 	rsb	r3, r3, #1
 800d910:	9315      	str	r3, [sp, #84]	; 0x54
 800d912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d914:	2b00      	cmp	r3, #0
 800d916:	d0f0      	beq.n	800d8fa <__gethex+0x386>
 800d918:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d91c:	f104 0314 	add.w	r3, r4, #20
 800d920:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d924:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d928:	f04f 0c00 	mov.w	ip, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d932:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d936:	d01c      	beq.n	800d972 <__gethex+0x3fe>
 800d938:	3201      	adds	r2, #1
 800d93a:	6002      	str	r2, [r0, #0]
 800d93c:	2f02      	cmp	r7, #2
 800d93e:	f104 0314 	add.w	r3, r4, #20
 800d942:	d13f      	bne.n	800d9c4 <__gethex+0x450>
 800d944:	f8d8 2000 	ldr.w	r2, [r8]
 800d948:	3a01      	subs	r2, #1
 800d94a:	42b2      	cmp	r2, r6
 800d94c:	d10a      	bne.n	800d964 <__gethex+0x3f0>
 800d94e:	1171      	asrs	r1, r6, #5
 800d950:	2201      	movs	r2, #1
 800d952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d956:	f006 061f 	and.w	r6, r6, #31
 800d95a:	fa02 f606 	lsl.w	r6, r2, r6
 800d95e:	421e      	tst	r6, r3
 800d960:	bf18      	it	ne
 800d962:	4617      	movne	r7, r2
 800d964:	f047 0720 	orr.w	r7, r7, #32
 800d968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d96a:	601c      	str	r4, [r3, #0]
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	601d      	str	r5, [r3, #0]
 800d970:	e695      	b.n	800d69e <__gethex+0x12a>
 800d972:	4299      	cmp	r1, r3
 800d974:	f843 cc04 	str.w	ip, [r3, #-4]
 800d978:	d8d8      	bhi.n	800d92c <__gethex+0x3b8>
 800d97a:	68a3      	ldr	r3, [r4, #8]
 800d97c:	459b      	cmp	fp, r3
 800d97e:	db19      	blt.n	800d9b4 <__gethex+0x440>
 800d980:	6861      	ldr	r1, [r4, #4]
 800d982:	ee18 0a10 	vmov	r0, s16
 800d986:	3101      	adds	r1, #1
 800d988:	f000 f93e 	bl	800dc08 <_Balloc>
 800d98c:	4681      	mov	r9, r0
 800d98e:	b918      	cbnz	r0, 800d998 <__gethex+0x424>
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <__gethex+0x488>)
 800d992:	4602      	mov	r2, r0
 800d994:	2184      	movs	r1, #132	; 0x84
 800d996:	e6a8      	b.n	800d6ea <__gethex+0x176>
 800d998:	6922      	ldr	r2, [r4, #16]
 800d99a:	3202      	adds	r2, #2
 800d99c:	f104 010c 	add.w	r1, r4, #12
 800d9a0:	0092      	lsls	r2, r2, #2
 800d9a2:	300c      	adds	r0, #12
 800d9a4:	f000 f916 	bl	800dbd4 <memcpy>
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	ee18 0a10 	vmov	r0, s16
 800d9ae:	f000 f96b 	bl	800dc88 <_Bfree>
 800d9b2:	464c      	mov	r4, r9
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	1c5a      	adds	r2, r3, #1
 800d9b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9bc:	6122      	str	r2, [r4, #16]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	615a      	str	r2, [r3, #20]
 800d9c2:	e7bb      	b.n	800d93c <__gethex+0x3c8>
 800d9c4:	6922      	ldr	r2, [r4, #16]
 800d9c6:	455a      	cmp	r2, fp
 800d9c8:	dd0b      	ble.n	800d9e2 <__gethex+0x46e>
 800d9ca:	2101      	movs	r1, #1
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f7ff fd69 	bl	800d4a4 <rshift>
 800d9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9d6:	3501      	adds	r5, #1
 800d9d8:	42ab      	cmp	r3, r5
 800d9da:	f6ff aed0 	blt.w	800d77e <__gethex+0x20a>
 800d9de:	2701      	movs	r7, #1
 800d9e0:	e7c0      	b.n	800d964 <__gethex+0x3f0>
 800d9e2:	f016 061f 	ands.w	r6, r6, #31
 800d9e6:	d0fa      	beq.n	800d9de <__gethex+0x46a>
 800d9e8:	4453      	add	r3, sl
 800d9ea:	f1c6 0620 	rsb	r6, r6, #32
 800d9ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9f2:	f000 f9fb 	bl	800ddec <__hi0bits>
 800d9f6:	42b0      	cmp	r0, r6
 800d9f8:	dbe7      	blt.n	800d9ca <__gethex+0x456>
 800d9fa:	e7f0      	b.n	800d9de <__gethex+0x46a>
 800d9fc:	080100f0 	.word	0x080100f0

0800da00 <L_shift>:
 800da00:	f1c2 0208 	rsb	r2, r2, #8
 800da04:	0092      	lsls	r2, r2, #2
 800da06:	b570      	push	{r4, r5, r6, lr}
 800da08:	f1c2 0620 	rsb	r6, r2, #32
 800da0c:	6843      	ldr	r3, [r0, #4]
 800da0e:	6804      	ldr	r4, [r0, #0]
 800da10:	fa03 f506 	lsl.w	r5, r3, r6
 800da14:	432c      	orrs	r4, r5
 800da16:	40d3      	lsrs	r3, r2
 800da18:	6004      	str	r4, [r0, #0]
 800da1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800da1e:	4288      	cmp	r0, r1
 800da20:	d3f4      	bcc.n	800da0c <L_shift+0xc>
 800da22:	bd70      	pop	{r4, r5, r6, pc}

0800da24 <__match>:
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	6803      	ldr	r3, [r0, #0]
 800da28:	3301      	adds	r3, #1
 800da2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da2e:	b914      	cbnz	r4, 800da36 <__match+0x12>
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	2001      	movs	r0, #1
 800da34:	bd30      	pop	{r4, r5, pc}
 800da36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da3e:	2d19      	cmp	r5, #25
 800da40:	bf98      	it	ls
 800da42:	3220      	addls	r2, #32
 800da44:	42a2      	cmp	r2, r4
 800da46:	d0f0      	beq.n	800da2a <__match+0x6>
 800da48:	2000      	movs	r0, #0
 800da4a:	e7f3      	b.n	800da34 <__match+0x10>

0800da4c <__hexnan>:
 800da4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	680b      	ldr	r3, [r1, #0]
 800da52:	115e      	asrs	r6, r3, #5
 800da54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da58:	f013 031f 	ands.w	r3, r3, #31
 800da5c:	b087      	sub	sp, #28
 800da5e:	bf18      	it	ne
 800da60:	3604      	addne	r6, #4
 800da62:	2500      	movs	r5, #0
 800da64:	1f37      	subs	r7, r6, #4
 800da66:	4690      	mov	r8, r2
 800da68:	6802      	ldr	r2, [r0, #0]
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	4682      	mov	sl, r0
 800da6e:	f846 5c04 	str.w	r5, [r6, #-4]
 800da72:	46b9      	mov	r9, r7
 800da74:	463c      	mov	r4, r7
 800da76:	9502      	str	r5, [sp, #8]
 800da78:	46ab      	mov	fp, r5
 800da7a:	7851      	ldrb	r1, [r2, #1]
 800da7c:	1c53      	adds	r3, r2, #1
 800da7e:	9303      	str	r3, [sp, #12]
 800da80:	b341      	cbz	r1, 800dad4 <__hexnan+0x88>
 800da82:	4608      	mov	r0, r1
 800da84:	9205      	str	r2, [sp, #20]
 800da86:	9104      	str	r1, [sp, #16]
 800da88:	f7ff fd5e 	bl	800d548 <__hexdig_fun>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d14f      	bne.n	800db30 <__hexnan+0xe4>
 800da90:	9904      	ldr	r1, [sp, #16]
 800da92:	9a05      	ldr	r2, [sp, #20]
 800da94:	2920      	cmp	r1, #32
 800da96:	d818      	bhi.n	800daca <__hexnan+0x7e>
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	459b      	cmp	fp, r3
 800da9c:	dd13      	ble.n	800dac6 <__hexnan+0x7a>
 800da9e:	454c      	cmp	r4, r9
 800daa0:	d206      	bcs.n	800dab0 <__hexnan+0x64>
 800daa2:	2d07      	cmp	r5, #7
 800daa4:	dc04      	bgt.n	800dab0 <__hexnan+0x64>
 800daa6:	462a      	mov	r2, r5
 800daa8:	4649      	mov	r1, r9
 800daaa:	4620      	mov	r0, r4
 800daac:	f7ff ffa8 	bl	800da00 <L_shift>
 800dab0:	4544      	cmp	r4, r8
 800dab2:	d950      	bls.n	800db56 <__hexnan+0x10a>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f1a4 0904 	sub.w	r9, r4, #4
 800daba:	f844 3c04 	str.w	r3, [r4, #-4]
 800dabe:	f8cd b008 	str.w	fp, [sp, #8]
 800dac2:	464c      	mov	r4, r9
 800dac4:	461d      	mov	r5, r3
 800dac6:	9a03      	ldr	r2, [sp, #12]
 800dac8:	e7d7      	b.n	800da7a <__hexnan+0x2e>
 800daca:	2929      	cmp	r1, #41	; 0x29
 800dacc:	d156      	bne.n	800db7c <__hexnan+0x130>
 800dace:	3202      	adds	r2, #2
 800dad0:	f8ca 2000 	str.w	r2, [sl]
 800dad4:	f1bb 0f00 	cmp.w	fp, #0
 800dad8:	d050      	beq.n	800db7c <__hexnan+0x130>
 800dada:	454c      	cmp	r4, r9
 800dadc:	d206      	bcs.n	800daec <__hexnan+0xa0>
 800dade:	2d07      	cmp	r5, #7
 800dae0:	dc04      	bgt.n	800daec <__hexnan+0xa0>
 800dae2:	462a      	mov	r2, r5
 800dae4:	4649      	mov	r1, r9
 800dae6:	4620      	mov	r0, r4
 800dae8:	f7ff ff8a 	bl	800da00 <L_shift>
 800daec:	4544      	cmp	r4, r8
 800daee:	d934      	bls.n	800db5a <__hexnan+0x10e>
 800daf0:	f1a8 0204 	sub.w	r2, r8, #4
 800daf4:	4623      	mov	r3, r4
 800daf6:	f853 1b04 	ldr.w	r1, [r3], #4
 800dafa:	f842 1f04 	str.w	r1, [r2, #4]!
 800dafe:	429f      	cmp	r7, r3
 800db00:	d2f9      	bcs.n	800daf6 <__hexnan+0xaa>
 800db02:	1b3b      	subs	r3, r7, r4
 800db04:	f023 0303 	bic.w	r3, r3, #3
 800db08:	3304      	adds	r3, #4
 800db0a:	3401      	adds	r4, #1
 800db0c:	3e03      	subs	r6, #3
 800db0e:	42b4      	cmp	r4, r6
 800db10:	bf88      	it	hi
 800db12:	2304      	movhi	r3, #4
 800db14:	4443      	add	r3, r8
 800db16:	2200      	movs	r2, #0
 800db18:	f843 2b04 	str.w	r2, [r3], #4
 800db1c:	429f      	cmp	r7, r3
 800db1e:	d2fb      	bcs.n	800db18 <__hexnan+0xcc>
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	b91b      	cbnz	r3, 800db2c <__hexnan+0xe0>
 800db24:	4547      	cmp	r7, r8
 800db26:	d127      	bne.n	800db78 <__hexnan+0x12c>
 800db28:	2301      	movs	r3, #1
 800db2a:	603b      	str	r3, [r7, #0]
 800db2c:	2005      	movs	r0, #5
 800db2e:	e026      	b.n	800db7e <__hexnan+0x132>
 800db30:	3501      	adds	r5, #1
 800db32:	2d08      	cmp	r5, #8
 800db34:	f10b 0b01 	add.w	fp, fp, #1
 800db38:	dd06      	ble.n	800db48 <__hexnan+0xfc>
 800db3a:	4544      	cmp	r4, r8
 800db3c:	d9c3      	bls.n	800dac6 <__hexnan+0x7a>
 800db3e:	2300      	movs	r3, #0
 800db40:	f844 3c04 	str.w	r3, [r4, #-4]
 800db44:	2501      	movs	r5, #1
 800db46:	3c04      	subs	r4, #4
 800db48:	6822      	ldr	r2, [r4, #0]
 800db4a:	f000 000f 	and.w	r0, r0, #15
 800db4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	e7b7      	b.n	800dac6 <__hexnan+0x7a>
 800db56:	2508      	movs	r5, #8
 800db58:	e7b5      	b.n	800dac6 <__hexnan+0x7a>
 800db5a:	9b01      	ldr	r3, [sp, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0df      	beq.n	800db20 <__hexnan+0xd4>
 800db60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db64:	f1c3 0320 	rsb	r3, r3, #32
 800db68:	fa22 f303 	lsr.w	r3, r2, r3
 800db6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800db70:	401a      	ands	r2, r3
 800db72:	f846 2c04 	str.w	r2, [r6, #-4]
 800db76:	e7d3      	b.n	800db20 <__hexnan+0xd4>
 800db78:	3f04      	subs	r7, #4
 800db7a:	e7d1      	b.n	800db20 <__hexnan+0xd4>
 800db7c:	2004      	movs	r0, #4
 800db7e:	b007      	add	sp, #28
 800db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db84 <_localeconv_r>:
 800db84:	4800      	ldr	r0, [pc, #0]	; (800db88 <_localeconv_r+0x4>)
 800db86:	4770      	bx	lr
 800db88:	24000168 	.word	0x24000168

0800db8c <_lseek_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	; (800dbac <_lseek_r+0x20>)
 800db90:	4604      	mov	r4, r0
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	2200      	movs	r2, #0
 800db98:	602a      	str	r2, [r5, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f7f4 fcac 	bl	80024f8 <_lseek>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_lseek_r+0x1e>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_lseek_r+0x1e>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	240004b0 	.word	0x240004b0

0800dbb0 <__ascii_mbtowc>:
 800dbb0:	b082      	sub	sp, #8
 800dbb2:	b901      	cbnz	r1, 800dbb6 <__ascii_mbtowc+0x6>
 800dbb4:	a901      	add	r1, sp, #4
 800dbb6:	b142      	cbz	r2, 800dbca <__ascii_mbtowc+0x1a>
 800dbb8:	b14b      	cbz	r3, 800dbce <__ascii_mbtowc+0x1e>
 800dbba:	7813      	ldrb	r3, [r2, #0]
 800dbbc:	600b      	str	r3, [r1, #0]
 800dbbe:	7812      	ldrb	r2, [r2, #0]
 800dbc0:	1e10      	subs	r0, r2, #0
 800dbc2:	bf18      	it	ne
 800dbc4:	2001      	movne	r0, #1
 800dbc6:	b002      	add	sp, #8
 800dbc8:	4770      	bx	lr
 800dbca:	4610      	mov	r0, r2
 800dbcc:	e7fb      	b.n	800dbc6 <__ascii_mbtowc+0x16>
 800dbce:	f06f 0001 	mvn.w	r0, #1
 800dbd2:	e7f8      	b.n	800dbc6 <__ascii_mbtowc+0x16>

0800dbd4 <memcpy>:
 800dbd4:	440a      	add	r2, r1
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dbdc:	d100      	bne.n	800dbe0 <memcpy+0xc>
 800dbde:	4770      	bx	lr
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbea:	4291      	cmp	r1, r2
 800dbec:	d1f9      	bne.n	800dbe2 <memcpy+0xe>
 800dbee:	bd10      	pop	{r4, pc}

0800dbf0 <__malloc_lock>:
 800dbf0:	4801      	ldr	r0, [pc, #4]	; (800dbf8 <__malloc_lock+0x8>)
 800dbf2:	f7f4 bd8a 	b.w	800270a <__retarget_lock_acquire_recursive>
 800dbf6:	bf00      	nop
 800dbf8:	240004a0 	.word	0x240004a0

0800dbfc <__malloc_unlock>:
 800dbfc:	4801      	ldr	r0, [pc, #4]	; (800dc04 <__malloc_unlock+0x8>)
 800dbfe:	f7f4 bd98 	b.w	8002732 <__retarget_lock_release_recursive>
 800dc02:	bf00      	nop
 800dc04:	240004a0 	.word	0x240004a0

0800dc08 <_Balloc>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	460d      	mov	r5, r1
 800dc10:	b976      	cbnz	r6, 800dc30 <_Balloc+0x28>
 800dc12:	2010      	movs	r0, #16
 800dc14:	f7fc ffec 	bl	800abf0 <malloc>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	6260      	str	r0, [r4, #36]	; 0x24
 800dc1c:	b920      	cbnz	r0, 800dc28 <_Balloc+0x20>
 800dc1e:	4b18      	ldr	r3, [pc, #96]	; (800dc80 <_Balloc+0x78>)
 800dc20:	4818      	ldr	r0, [pc, #96]	; (800dc84 <_Balloc+0x7c>)
 800dc22:	2166      	movs	r1, #102	; 0x66
 800dc24:	f001 fa5e 	bl	800f0e4 <__assert_func>
 800dc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc2c:	6006      	str	r6, [r0, #0]
 800dc2e:	60c6      	str	r6, [r0, #12]
 800dc30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dc32:	68f3      	ldr	r3, [r6, #12]
 800dc34:	b183      	cbz	r3, 800dc58 <_Balloc+0x50>
 800dc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc3e:	b9b8      	cbnz	r0, 800dc70 <_Balloc+0x68>
 800dc40:	2101      	movs	r1, #1
 800dc42:	fa01 f605 	lsl.w	r6, r1, r5
 800dc46:	1d72      	adds	r2, r6, #5
 800dc48:	0092      	lsls	r2, r2, #2
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 fc9a 	bl	800e584 <_calloc_r>
 800dc50:	b160      	cbz	r0, 800dc6c <_Balloc+0x64>
 800dc52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc56:	e00e      	b.n	800dc76 <_Balloc+0x6e>
 800dc58:	2221      	movs	r2, #33	; 0x21
 800dc5a:	2104      	movs	r1, #4
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f000 fc91 	bl	800e584 <_calloc_r>
 800dc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc64:	60f0      	str	r0, [r6, #12]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1e4      	bne.n	800dc36 <_Balloc+0x2e>
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
 800dc70:	6802      	ldr	r2, [r0, #0]
 800dc72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc76:	2300      	movs	r3, #0
 800dc78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc7c:	e7f7      	b.n	800dc6e <_Balloc+0x66>
 800dc7e:	bf00      	nop
 800dc80:	0801007e 	.word	0x0801007e
 800dc84:	0801017c 	.word	0x0801017c

0800dc88 <_Bfree>:
 800dc88:	b570      	push	{r4, r5, r6, lr}
 800dc8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	460c      	mov	r4, r1
 800dc90:	b976      	cbnz	r6, 800dcb0 <_Bfree+0x28>
 800dc92:	2010      	movs	r0, #16
 800dc94:	f7fc ffac 	bl	800abf0 <malloc>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	6268      	str	r0, [r5, #36]	; 0x24
 800dc9c:	b920      	cbnz	r0, 800dca8 <_Bfree+0x20>
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <_Bfree+0x3c>)
 800dca0:	4809      	ldr	r0, [pc, #36]	; (800dcc8 <_Bfree+0x40>)
 800dca2:	218a      	movs	r1, #138	; 0x8a
 800dca4:	f001 fa1e 	bl	800f0e4 <__assert_func>
 800dca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcac:	6006      	str	r6, [r0, #0]
 800dcae:	60c6      	str	r6, [r0, #12]
 800dcb0:	b13c      	cbz	r4, 800dcc2 <_Bfree+0x3a>
 800dcb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dcb4:	6862      	ldr	r2, [r4, #4]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcbc:	6021      	str	r1, [r4, #0]
 800dcbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	0801007e 	.word	0x0801007e
 800dcc8:	0801017c 	.word	0x0801017c

0800dccc <__multadd>:
 800dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	690d      	ldr	r5, [r1, #16]
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	461e      	mov	r6, r3
 800dcd8:	f101 0c14 	add.w	ip, r1, #20
 800dcdc:	2000      	movs	r0, #0
 800dcde:	f8dc 3000 	ldr.w	r3, [ip]
 800dce2:	b299      	uxth	r1, r3
 800dce4:	fb02 6101 	mla	r1, r2, r1, r6
 800dce8:	0c1e      	lsrs	r6, r3, #16
 800dcea:	0c0b      	lsrs	r3, r1, #16
 800dcec:	fb02 3306 	mla	r3, r2, r6, r3
 800dcf0:	b289      	uxth	r1, r1
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcf8:	4285      	cmp	r5, r0
 800dcfa:	f84c 1b04 	str.w	r1, [ip], #4
 800dcfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd02:	dcec      	bgt.n	800dcde <__multadd+0x12>
 800dd04:	b30e      	cbz	r6, 800dd4a <__multadd+0x7e>
 800dd06:	68a3      	ldr	r3, [r4, #8]
 800dd08:	42ab      	cmp	r3, r5
 800dd0a:	dc19      	bgt.n	800dd40 <__multadd+0x74>
 800dd0c:	6861      	ldr	r1, [r4, #4]
 800dd0e:	4638      	mov	r0, r7
 800dd10:	3101      	adds	r1, #1
 800dd12:	f7ff ff79 	bl	800dc08 <_Balloc>
 800dd16:	4680      	mov	r8, r0
 800dd18:	b928      	cbnz	r0, 800dd26 <__multadd+0x5a>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	4b0c      	ldr	r3, [pc, #48]	; (800dd50 <__multadd+0x84>)
 800dd1e:	480d      	ldr	r0, [pc, #52]	; (800dd54 <__multadd+0x88>)
 800dd20:	21b5      	movs	r1, #181	; 0xb5
 800dd22:	f001 f9df 	bl	800f0e4 <__assert_func>
 800dd26:	6922      	ldr	r2, [r4, #16]
 800dd28:	3202      	adds	r2, #2
 800dd2a:	f104 010c 	add.w	r1, r4, #12
 800dd2e:	0092      	lsls	r2, r2, #2
 800dd30:	300c      	adds	r0, #12
 800dd32:	f7ff ff4f 	bl	800dbd4 <memcpy>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4638      	mov	r0, r7
 800dd3a:	f7ff ffa5 	bl	800dc88 <_Bfree>
 800dd3e:	4644      	mov	r4, r8
 800dd40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd44:	3501      	adds	r5, #1
 800dd46:	615e      	str	r6, [r3, #20]
 800dd48:	6125      	str	r5, [r4, #16]
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd50:	080100f0 	.word	0x080100f0
 800dd54:	0801017c 	.word	0x0801017c

0800dd58 <__s2b>:
 800dd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	4615      	mov	r5, r2
 800dd60:	461f      	mov	r7, r3
 800dd62:	2209      	movs	r2, #9
 800dd64:	3308      	adds	r3, #8
 800dd66:	4606      	mov	r6, r0
 800dd68:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	2201      	movs	r2, #1
 800dd70:	429a      	cmp	r2, r3
 800dd72:	db09      	blt.n	800dd88 <__s2b+0x30>
 800dd74:	4630      	mov	r0, r6
 800dd76:	f7ff ff47 	bl	800dc08 <_Balloc>
 800dd7a:	b940      	cbnz	r0, 800dd8e <__s2b+0x36>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	4b19      	ldr	r3, [pc, #100]	; (800dde4 <__s2b+0x8c>)
 800dd80:	4819      	ldr	r0, [pc, #100]	; (800dde8 <__s2b+0x90>)
 800dd82:	21ce      	movs	r1, #206	; 0xce
 800dd84:	f001 f9ae 	bl	800f0e4 <__assert_func>
 800dd88:	0052      	lsls	r2, r2, #1
 800dd8a:	3101      	adds	r1, #1
 800dd8c:	e7f0      	b.n	800dd70 <__s2b+0x18>
 800dd8e:	9b08      	ldr	r3, [sp, #32]
 800dd90:	6143      	str	r3, [r0, #20]
 800dd92:	2d09      	cmp	r5, #9
 800dd94:	f04f 0301 	mov.w	r3, #1
 800dd98:	6103      	str	r3, [r0, #16]
 800dd9a:	dd16      	ble.n	800ddca <__s2b+0x72>
 800dd9c:	f104 0909 	add.w	r9, r4, #9
 800dda0:	46c8      	mov	r8, r9
 800dda2:	442c      	add	r4, r5
 800dda4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dda8:	4601      	mov	r1, r0
 800ddaa:	3b30      	subs	r3, #48	; 0x30
 800ddac:	220a      	movs	r2, #10
 800ddae:	4630      	mov	r0, r6
 800ddb0:	f7ff ff8c 	bl	800dccc <__multadd>
 800ddb4:	45a0      	cmp	r8, r4
 800ddb6:	d1f5      	bne.n	800dda4 <__s2b+0x4c>
 800ddb8:	f1a5 0408 	sub.w	r4, r5, #8
 800ddbc:	444c      	add	r4, r9
 800ddbe:	1b2d      	subs	r5, r5, r4
 800ddc0:	1963      	adds	r3, r4, r5
 800ddc2:	42bb      	cmp	r3, r7
 800ddc4:	db04      	blt.n	800ddd0 <__s2b+0x78>
 800ddc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddca:	340a      	adds	r4, #10
 800ddcc:	2509      	movs	r5, #9
 800ddce:	e7f6      	b.n	800ddbe <__s2b+0x66>
 800ddd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	3b30      	subs	r3, #48	; 0x30
 800ddd8:	220a      	movs	r2, #10
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff ff76 	bl	800dccc <__multadd>
 800dde0:	e7ee      	b.n	800ddc0 <__s2b+0x68>
 800dde2:	bf00      	nop
 800dde4:	080100f0 	.word	0x080100f0
 800dde8:	0801017c 	.word	0x0801017c

0800ddec <__hi0bits>:
 800ddec:	0c03      	lsrs	r3, r0, #16
 800ddee:	041b      	lsls	r3, r3, #16
 800ddf0:	b9d3      	cbnz	r3, 800de28 <__hi0bits+0x3c>
 800ddf2:	0400      	lsls	r0, r0, #16
 800ddf4:	2310      	movs	r3, #16
 800ddf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddfa:	bf04      	itt	eq
 800ddfc:	0200      	lsleq	r0, r0, #8
 800ddfe:	3308      	addeq	r3, #8
 800de00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de04:	bf04      	itt	eq
 800de06:	0100      	lsleq	r0, r0, #4
 800de08:	3304      	addeq	r3, #4
 800de0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de0e:	bf04      	itt	eq
 800de10:	0080      	lsleq	r0, r0, #2
 800de12:	3302      	addeq	r3, #2
 800de14:	2800      	cmp	r0, #0
 800de16:	db05      	blt.n	800de24 <__hi0bits+0x38>
 800de18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800de1c:	f103 0301 	add.w	r3, r3, #1
 800de20:	bf08      	it	eq
 800de22:	2320      	moveq	r3, #32
 800de24:	4618      	mov	r0, r3
 800de26:	4770      	bx	lr
 800de28:	2300      	movs	r3, #0
 800de2a:	e7e4      	b.n	800ddf6 <__hi0bits+0xa>

0800de2c <__lo0bits>:
 800de2c:	6803      	ldr	r3, [r0, #0]
 800de2e:	f013 0207 	ands.w	r2, r3, #7
 800de32:	4601      	mov	r1, r0
 800de34:	d00b      	beq.n	800de4e <__lo0bits+0x22>
 800de36:	07da      	lsls	r2, r3, #31
 800de38:	d423      	bmi.n	800de82 <__lo0bits+0x56>
 800de3a:	0798      	lsls	r0, r3, #30
 800de3c:	bf49      	itett	mi
 800de3e:	085b      	lsrmi	r3, r3, #1
 800de40:	089b      	lsrpl	r3, r3, #2
 800de42:	2001      	movmi	r0, #1
 800de44:	600b      	strmi	r3, [r1, #0]
 800de46:	bf5c      	itt	pl
 800de48:	600b      	strpl	r3, [r1, #0]
 800de4a:	2002      	movpl	r0, #2
 800de4c:	4770      	bx	lr
 800de4e:	b298      	uxth	r0, r3
 800de50:	b9a8      	cbnz	r0, 800de7e <__lo0bits+0x52>
 800de52:	0c1b      	lsrs	r3, r3, #16
 800de54:	2010      	movs	r0, #16
 800de56:	b2da      	uxtb	r2, r3
 800de58:	b90a      	cbnz	r2, 800de5e <__lo0bits+0x32>
 800de5a:	3008      	adds	r0, #8
 800de5c:	0a1b      	lsrs	r3, r3, #8
 800de5e:	071a      	lsls	r2, r3, #28
 800de60:	bf04      	itt	eq
 800de62:	091b      	lsreq	r3, r3, #4
 800de64:	3004      	addeq	r0, #4
 800de66:	079a      	lsls	r2, r3, #30
 800de68:	bf04      	itt	eq
 800de6a:	089b      	lsreq	r3, r3, #2
 800de6c:	3002      	addeq	r0, #2
 800de6e:	07da      	lsls	r2, r3, #31
 800de70:	d403      	bmi.n	800de7a <__lo0bits+0x4e>
 800de72:	085b      	lsrs	r3, r3, #1
 800de74:	f100 0001 	add.w	r0, r0, #1
 800de78:	d005      	beq.n	800de86 <__lo0bits+0x5a>
 800de7a:	600b      	str	r3, [r1, #0]
 800de7c:	4770      	bx	lr
 800de7e:	4610      	mov	r0, r2
 800de80:	e7e9      	b.n	800de56 <__lo0bits+0x2a>
 800de82:	2000      	movs	r0, #0
 800de84:	4770      	bx	lr
 800de86:	2020      	movs	r0, #32
 800de88:	4770      	bx	lr
	...

0800de8c <__i2b>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	460c      	mov	r4, r1
 800de90:	2101      	movs	r1, #1
 800de92:	f7ff feb9 	bl	800dc08 <_Balloc>
 800de96:	4602      	mov	r2, r0
 800de98:	b928      	cbnz	r0, 800dea6 <__i2b+0x1a>
 800de9a:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <__i2b+0x24>)
 800de9c:	4805      	ldr	r0, [pc, #20]	; (800deb4 <__i2b+0x28>)
 800de9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dea2:	f001 f91f 	bl	800f0e4 <__assert_func>
 800dea6:	2301      	movs	r3, #1
 800dea8:	6144      	str	r4, [r0, #20]
 800deaa:	6103      	str	r3, [r0, #16]
 800deac:	bd10      	pop	{r4, pc}
 800deae:	bf00      	nop
 800deb0:	080100f0 	.word	0x080100f0
 800deb4:	0801017c 	.word	0x0801017c

0800deb8 <__multiply>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	4691      	mov	r9, r2
 800debe:	690a      	ldr	r2, [r1, #16]
 800dec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	bfb8      	it	lt
 800dec8:	460b      	movlt	r3, r1
 800deca:	460c      	mov	r4, r1
 800decc:	bfbc      	itt	lt
 800dece:	464c      	movlt	r4, r9
 800ded0:	4699      	movlt	r9, r3
 800ded2:	6927      	ldr	r7, [r4, #16]
 800ded4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ded8:	68a3      	ldr	r3, [r4, #8]
 800deda:	6861      	ldr	r1, [r4, #4]
 800dedc:	eb07 060a 	add.w	r6, r7, sl
 800dee0:	42b3      	cmp	r3, r6
 800dee2:	b085      	sub	sp, #20
 800dee4:	bfb8      	it	lt
 800dee6:	3101      	addlt	r1, #1
 800dee8:	f7ff fe8e 	bl	800dc08 <_Balloc>
 800deec:	b930      	cbnz	r0, 800defc <__multiply+0x44>
 800deee:	4602      	mov	r2, r0
 800def0:	4b44      	ldr	r3, [pc, #272]	; (800e004 <__multiply+0x14c>)
 800def2:	4845      	ldr	r0, [pc, #276]	; (800e008 <__multiply+0x150>)
 800def4:	f240 115d 	movw	r1, #349	; 0x15d
 800def8:	f001 f8f4 	bl	800f0e4 <__assert_func>
 800defc:	f100 0514 	add.w	r5, r0, #20
 800df00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df04:	462b      	mov	r3, r5
 800df06:	2200      	movs	r2, #0
 800df08:	4543      	cmp	r3, r8
 800df0a:	d321      	bcc.n	800df50 <__multiply+0x98>
 800df0c:	f104 0314 	add.w	r3, r4, #20
 800df10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df14:	f109 0314 	add.w	r3, r9, #20
 800df18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800df1c:	9202      	str	r2, [sp, #8]
 800df1e:	1b3a      	subs	r2, r7, r4
 800df20:	3a15      	subs	r2, #21
 800df22:	f022 0203 	bic.w	r2, r2, #3
 800df26:	3204      	adds	r2, #4
 800df28:	f104 0115 	add.w	r1, r4, #21
 800df2c:	428f      	cmp	r7, r1
 800df2e:	bf38      	it	cc
 800df30:	2204      	movcc	r2, #4
 800df32:	9201      	str	r2, [sp, #4]
 800df34:	9a02      	ldr	r2, [sp, #8]
 800df36:	9303      	str	r3, [sp, #12]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d80c      	bhi.n	800df56 <__multiply+0x9e>
 800df3c:	2e00      	cmp	r6, #0
 800df3e:	dd03      	ble.n	800df48 <__multiply+0x90>
 800df40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df44:	2b00      	cmp	r3, #0
 800df46:	d05a      	beq.n	800dffe <__multiply+0x146>
 800df48:	6106      	str	r6, [r0, #16]
 800df4a:	b005      	add	sp, #20
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	f843 2b04 	str.w	r2, [r3], #4
 800df54:	e7d8      	b.n	800df08 <__multiply+0x50>
 800df56:	f8b3 a000 	ldrh.w	sl, [r3]
 800df5a:	f1ba 0f00 	cmp.w	sl, #0
 800df5e:	d024      	beq.n	800dfaa <__multiply+0xf2>
 800df60:	f104 0e14 	add.w	lr, r4, #20
 800df64:	46a9      	mov	r9, r5
 800df66:	f04f 0c00 	mov.w	ip, #0
 800df6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df6e:	f8d9 1000 	ldr.w	r1, [r9]
 800df72:	fa1f fb82 	uxth.w	fp, r2
 800df76:	b289      	uxth	r1, r1
 800df78:	fb0a 110b 	mla	r1, sl, fp, r1
 800df7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df80:	f8d9 2000 	ldr.w	r2, [r9]
 800df84:	4461      	add	r1, ip
 800df86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800df8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df92:	b289      	uxth	r1, r1
 800df94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df98:	4577      	cmp	r7, lr
 800df9a:	f849 1b04 	str.w	r1, [r9], #4
 800df9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfa2:	d8e2      	bhi.n	800df6a <__multiply+0xb2>
 800dfa4:	9a01      	ldr	r2, [sp, #4]
 800dfa6:	f845 c002 	str.w	ip, [r5, r2]
 800dfaa:	9a03      	ldr	r2, [sp, #12]
 800dfac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	f1b9 0f00 	cmp.w	r9, #0
 800dfb6:	d020      	beq.n	800dffa <__multiply+0x142>
 800dfb8:	6829      	ldr	r1, [r5, #0]
 800dfba:	f104 0c14 	add.w	ip, r4, #20
 800dfbe:	46ae      	mov	lr, r5
 800dfc0:	f04f 0a00 	mov.w	sl, #0
 800dfc4:	f8bc b000 	ldrh.w	fp, [ip]
 800dfc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dfcc:	fb09 220b 	mla	r2, r9, fp, r2
 800dfd0:	4492      	add	sl, r2
 800dfd2:	b289      	uxth	r1, r1
 800dfd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dfd8:	f84e 1b04 	str.w	r1, [lr], #4
 800dfdc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dfe0:	f8be 1000 	ldrh.w	r1, [lr]
 800dfe4:	0c12      	lsrs	r2, r2, #16
 800dfe6:	fb09 1102 	mla	r1, r9, r2, r1
 800dfea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dfee:	4567      	cmp	r7, ip
 800dff0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dff4:	d8e6      	bhi.n	800dfc4 <__multiply+0x10c>
 800dff6:	9a01      	ldr	r2, [sp, #4]
 800dff8:	50a9      	str	r1, [r5, r2]
 800dffa:	3504      	adds	r5, #4
 800dffc:	e79a      	b.n	800df34 <__multiply+0x7c>
 800dffe:	3e01      	subs	r6, #1
 800e000:	e79c      	b.n	800df3c <__multiply+0x84>
 800e002:	bf00      	nop
 800e004:	080100f0 	.word	0x080100f0
 800e008:	0801017c 	.word	0x0801017c

0800e00c <__pow5mult>:
 800e00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e010:	4615      	mov	r5, r2
 800e012:	f012 0203 	ands.w	r2, r2, #3
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	d007      	beq.n	800e02c <__pow5mult+0x20>
 800e01c:	4c25      	ldr	r4, [pc, #148]	; (800e0b4 <__pow5mult+0xa8>)
 800e01e:	3a01      	subs	r2, #1
 800e020:	2300      	movs	r3, #0
 800e022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e026:	f7ff fe51 	bl	800dccc <__multadd>
 800e02a:	4607      	mov	r7, r0
 800e02c:	10ad      	asrs	r5, r5, #2
 800e02e:	d03d      	beq.n	800e0ac <__pow5mult+0xa0>
 800e030:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e032:	b97c      	cbnz	r4, 800e054 <__pow5mult+0x48>
 800e034:	2010      	movs	r0, #16
 800e036:	f7fc fddb 	bl	800abf0 <malloc>
 800e03a:	4602      	mov	r2, r0
 800e03c:	6270      	str	r0, [r6, #36]	; 0x24
 800e03e:	b928      	cbnz	r0, 800e04c <__pow5mult+0x40>
 800e040:	4b1d      	ldr	r3, [pc, #116]	; (800e0b8 <__pow5mult+0xac>)
 800e042:	481e      	ldr	r0, [pc, #120]	; (800e0bc <__pow5mult+0xb0>)
 800e044:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e048:	f001 f84c 	bl	800f0e4 <__assert_func>
 800e04c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e050:	6004      	str	r4, [r0, #0]
 800e052:	60c4      	str	r4, [r0, #12]
 800e054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e05c:	b94c      	cbnz	r4, 800e072 <__pow5mult+0x66>
 800e05e:	f240 2171 	movw	r1, #625	; 0x271
 800e062:	4630      	mov	r0, r6
 800e064:	f7ff ff12 	bl	800de8c <__i2b>
 800e068:	2300      	movs	r3, #0
 800e06a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e06e:	4604      	mov	r4, r0
 800e070:	6003      	str	r3, [r0, #0]
 800e072:	f04f 0900 	mov.w	r9, #0
 800e076:	07eb      	lsls	r3, r5, #31
 800e078:	d50a      	bpl.n	800e090 <__pow5mult+0x84>
 800e07a:	4639      	mov	r1, r7
 800e07c:	4622      	mov	r2, r4
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff ff1a 	bl	800deb8 <__multiply>
 800e084:	4639      	mov	r1, r7
 800e086:	4680      	mov	r8, r0
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff fdfd 	bl	800dc88 <_Bfree>
 800e08e:	4647      	mov	r7, r8
 800e090:	106d      	asrs	r5, r5, #1
 800e092:	d00b      	beq.n	800e0ac <__pow5mult+0xa0>
 800e094:	6820      	ldr	r0, [r4, #0]
 800e096:	b938      	cbnz	r0, 800e0a8 <__pow5mult+0x9c>
 800e098:	4622      	mov	r2, r4
 800e09a:	4621      	mov	r1, r4
 800e09c:	4630      	mov	r0, r6
 800e09e:	f7ff ff0b 	bl	800deb8 <__multiply>
 800e0a2:	6020      	str	r0, [r4, #0]
 800e0a4:	f8c0 9000 	str.w	r9, [r0]
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	e7e4      	b.n	800e076 <__pow5mult+0x6a>
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0b2:	bf00      	nop
 800e0b4:	080102c8 	.word	0x080102c8
 800e0b8:	0801007e 	.word	0x0801007e
 800e0bc:	0801017c 	.word	0x0801017c

0800e0c0 <__lshift>:
 800e0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	6849      	ldr	r1, [r1, #4]
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0ce:	68a3      	ldr	r3, [r4, #8]
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	4691      	mov	r9, r2
 800e0d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0d8:	f108 0601 	add.w	r6, r8, #1
 800e0dc:	42b3      	cmp	r3, r6
 800e0de:	db0b      	blt.n	800e0f8 <__lshift+0x38>
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f7ff fd91 	bl	800dc08 <_Balloc>
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	b948      	cbnz	r0, 800e0fe <__lshift+0x3e>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	4b2a      	ldr	r3, [pc, #168]	; (800e198 <__lshift+0xd8>)
 800e0ee:	482b      	ldr	r0, [pc, #172]	; (800e19c <__lshift+0xdc>)
 800e0f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e0f4:	f000 fff6 	bl	800f0e4 <__assert_func>
 800e0f8:	3101      	adds	r1, #1
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	e7ee      	b.n	800e0dc <__lshift+0x1c>
 800e0fe:	2300      	movs	r3, #0
 800e100:	f100 0114 	add.w	r1, r0, #20
 800e104:	f100 0210 	add.w	r2, r0, #16
 800e108:	4618      	mov	r0, r3
 800e10a:	4553      	cmp	r3, sl
 800e10c:	db37      	blt.n	800e17e <__lshift+0xbe>
 800e10e:	6920      	ldr	r0, [r4, #16]
 800e110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e114:	f104 0314 	add.w	r3, r4, #20
 800e118:	f019 091f 	ands.w	r9, r9, #31
 800e11c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e120:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e124:	d02f      	beq.n	800e186 <__lshift+0xc6>
 800e126:	f1c9 0e20 	rsb	lr, r9, #32
 800e12a:	468a      	mov	sl, r1
 800e12c:	f04f 0c00 	mov.w	ip, #0
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	fa02 f209 	lsl.w	r2, r2, r9
 800e136:	ea42 020c 	orr.w	r2, r2, ip
 800e13a:	f84a 2b04 	str.w	r2, [sl], #4
 800e13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e142:	4298      	cmp	r0, r3
 800e144:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e148:	d8f2      	bhi.n	800e130 <__lshift+0x70>
 800e14a:	1b03      	subs	r3, r0, r4
 800e14c:	3b15      	subs	r3, #21
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	3304      	adds	r3, #4
 800e154:	f104 0215 	add.w	r2, r4, #21
 800e158:	4290      	cmp	r0, r2
 800e15a:	bf38      	it	cc
 800e15c:	2304      	movcc	r3, #4
 800e15e:	f841 c003 	str.w	ip, [r1, r3]
 800e162:	f1bc 0f00 	cmp.w	ip, #0
 800e166:	d001      	beq.n	800e16c <__lshift+0xac>
 800e168:	f108 0602 	add.w	r6, r8, #2
 800e16c:	3e01      	subs	r6, #1
 800e16e:	4638      	mov	r0, r7
 800e170:	612e      	str	r6, [r5, #16]
 800e172:	4621      	mov	r1, r4
 800e174:	f7ff fd88 	bl	800dc88 <_Bfree>
 800e178:	4628      	mov	r0, r5
 800e17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e182:	3301      	adds	r3, #1
 800e184:	e7c1      	b.n	800e10a <__lshift+0x4a>
 800e186:	3904      	subs	r1, #4
 800e188:	f853 2b04 	ldr.w	r2, [r3], #4
 800e18c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e190:	4298      	cmp	r0, r3
 800e192:	d8f9      	bhi.n	800e188 <__lshift+0xc8>
 800e194:	e7ea      	b.n	800e16c <__lshift+0xac>
 800e196:	bf00      	nop
 800e198:	080100f0 	.word	0x080100f0
 800e19c:	0801017c 	.word	0x0801017c

0800e1a0 <__mcmp>:
 800e1a0:	b530      	push	{r4, r5, lr}
 800e1a2:	6902      	ldr	r2, [r0, #16]
 800e1a4:	690c      	ldr	r4, [r1, #16]
 800e1a6:	1b12      	subs	r2, r2, r4
 800e1a8:	d10e      	bne.n	800e1c8 <__mcmp+0x28>
 800e1aa:	f100 0314 	add.w	r3, r0, #20
 800e1ae:	3114      	adds	r1, #20
 800e1b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e1b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e1b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e1bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e1c0:	42a5      	cmp	r5, r4
 800e1c2:	d003      	beq.n	800e1cc <__mcmp+0x2c>
 800e1c4:	d305      	bcc.n	800e1d2 <__mcmp+0x32>
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	bd30      	pop	{r4, r5, pc}
 800e1cc:	4283      	cmp	r3, r0
 800e1ce:	d3f3      	bcc.n	800e1b8 <__mcmp+0x18>
 800e1d0:	e7fa      	b.n	800e1c8 <__mcmp+0x28>
 800e1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1d6:	e7f7      	b.n	800e1c8 <__mcmp+0x28>

0800e1d8 <__mdiff>:
 800e1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	460c      	mov	r4, r1
 800e1de:	4606      	mov	r6, r0
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	4690      	mov	r8, r2
 800e1e6:	f7ff ffdb 	bl	800e1a0 <__mcmp>
 800e1ea:	1e05      	subs	r5, r0, #0
 800e1ec:	d110      	bne.n	800e210 <__mdiff+0x38>
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7ff fd09 	bl	800dc08 <_Balloc>
 800e1f6:	b930      	cbnz	r0, 800e206 <__mdiff+0x2e>
 800e1f8:	4b3a      	ldr	r3, [pc, #232]	; (800e2e4 <__mdiff+0x10c>)
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	f240 2132 	movw	r1, #562	; 0x232
 800e200:	4839      	ldr	r0, [pc, #228]	; (800e2e8 <__mdiff+0x110>)
 800e202:	f000 ff6f 	bl	800f0e4 <__assert_func>
 800e206:	2301      	movs	r3, #1
 800e208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e20c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	bfa4      	itt	ge
 800e212:	4643      	movge	r3, r8
 800e214:	46a0      	movge	r8, r4
 800e216:	4630      	mov	r0, r6
 800e218:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e21c:	bfa6      	itte	ge
 800e21e:	461c      	movge	r4, r3
 800e220:	2500      	movge	r5, #0
 800e222:	2501      	movlt	r5, #1
 800e224:	f7ff fcf0 	bl	800dc08 <_Balloc>
 800e228:	b920      	cbnz	r0, 800e234 <__mdiff+0x5c>
 800e22a:	4b2e      	ldr	r3, [pc, #184]	; (800e2e4 <__mdiff+0x10c>)
 800e22c:	4602      	mov	r2, r0
 800e22e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e232:	e7e5      	b.n	800e200 <__mdiff+0x28>
 800e234:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e238:	6926      	ldr	r6, [r4, #16]
 800e23a:	60c5      	str	r5, [r0, #12]
 800e23c:	f104 0914 	add.w	r9, r4, #20
 800e240:	f108 0514 	add.w	r5, r8, #20
 800e244:	f100 0e14 	add.w	lr, r0, #20
 800e248:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e24c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e250:	f108 0210 	add.w	r2, r8, #16
 800e254:	46f2      	mov	sl, lr
 800e256:	2100      	movs	r1, #0
 800e258:	f859 3b04 	ldr.w	r3, [r9], #4
 800e25c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e260:	fa1f f883 	uxth.w	r8, r3
 800e264:	fa11 f18b 	uxtah	r1, r1, fp
 800e268:	0c1b      	lsrs	r3, r3, #16
 800e26a:	eba1 0808 	sub.w	r8, r1, r8
 800e26e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e272:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e276:	fa1f f888 	uxth.w	r8, r8
 800e27a:	1419      	asrs	r1, r3, #16
 800e27c:	454e      	cmp	r6, r9
 800e27e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e282:	f84a 3b04 	str.w	r3, [sl], #4
 800e286:	d8e7      	bhi.n	800e258 <__mdiff+0x80>
 800e288:	1b33      	subs	r3, r6, r4
 800e28a:	3b15      	subs	r3, #21
 800e28c:	f023 0303 	bic.w	r3, r3, #3
 800e290:	3304      	adds	r3, #4
 800e292:	3415      	adds	r4, #21
 800e294:	42a6      	cmp	r6, r4
 800e296:	bf38      	it	cc
 800e298:	2304      	movcc	r3, #4
 800e29a:	441d      	add	r5, r3
 800e29c:	4473      	add	r3, lr
 800e29e:	469e      	mov	lr, r3
 800e2a0:	462e      	mov	r6, r5
 800e2a2:	4566      	cmp	r6, ip
 800e2a4:	d30e      	bcc.n	800e2c4 <__mdiff+0xec>
 800e2a6:	f10c 0203 	add.w	r2, ip, #3
 800e2aa:	1b52      	subs	r2, r2, r5
 800e2ac:	f022 0203 	bic.w	r2, r2, #3
 800e2b0:	3d03      	subs	r5, #3
 800e2b2:	45ac      	cmp	ip, r5
 800e2b4:	bf38      	it	cc
 800e2b6:	2200      	movcc	r2, #0
 800e2b8:	441a      	add	r2, r3
 800e2ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e2be:	b17b      	cbz	r3, 800e2e0 <__mdiff+0x108>
 800e2c0:	6107      	str	r7, [r0, #16]
 800e2c2:	e7a3      	b.n	800e20c <__mdiff+0x34>
 800e2c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e2c8:	fa11 f288 	uxtah	r2, r1, r8
 800e2cc:	1414      	asrs	r4, r2, #16
 800e2ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2d2:	b292      	uxth	r2, r2
 800e2d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e2d8:	f84e 2b04 	str.w	r2, [lr], #4
 800e2dc:	1421      	asrs	r1, r4, #16
 800e2de:	e7e0      	b.n	800e2a2 <__mdiff+0xca>
 800e2e0:	3f01      	subs	r7, #1
 800e2e2:	e7ea      	b.n	800e2ba <__mdiff+0xe2>
 800e2e4:	080100f0 	.word	0x080100f0
 800e2e8:	0801017c 	.word	0x0801017c

0800e2ec <__ulp>:
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	ed8d 0b00 	vstr	d0, [sp]
 800e2f2:	9b01      	ldr	r3, [sp, #4]
 800e2f4:	4912      	ldr	r1, [pc, #72]	; (800e340 <__ulp+0x54>)
 800e2f6:	4019      	ands	r1, r3
 800e2f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	dd05      	ble.n	800e30c <__ulp+0x20>
 800e300:	2200      	movs	r2, #0
 800e302:	460b      	mov	r3, r1
 800e304:	ec43 2b10 	vmov	d0, r2, r3
 800e308:	b002      	add	sp, #8
 800e30a:	4770      	bx	lr
 800e30c:	4249      	negs	r1, r1
 800e30e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e312:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e316:	f04f 0200 	mov.w	r2, #0
 800e31a:	f04f 0300 	mov.w	r3, #0
 800e31e:	da04      	bge.n	800e32a <__ulp+0x3e>
 800e320:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e324:	fa41 f300 	asr.w	r3, r1, r0
 800e328:	e7ec      	b.n	800e304 <__ulp+0x18>
 800e32a:	f1a0 0114 	sub.w	r1, r0, #20
 800e32e:	291e      	cmp	r1, #30
 800e330:	bfda      	itte	le
 800e332:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e336:	fa20 f101 	lsrle.w	r1, r0, r1
 800e33a:	2101      	movgt	r1, #1
 800e33c:	460a      	mov	r2, r1
 800e33e:	e7e1      	b.n	800e304 <__ulp+0x18>
 800e340:	7ff00000 	.word	0x7ff00000

0800e344 <__b2d>:
 800e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e346:	6905      	ldr	r5, [r0, #16]
 800e348:	f100 0714 	add.w	r7, r0, #20
 800e34c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e350:	1f2e      	subs	r6, r5, #4
 800e352:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e356:	4620      	mov	r0, r4
 800e358:	f7ff fd48 	bl	800ddec <__hi0bits>
 800e35c:	f1c0 0320 	rsb	r3, r0, #32
 800e360:	280a      	cmp	r0, #10
 800e362:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e3e0 <__b2d+0x9c>
 800e366:	600b      	str	r3, [r1, #0]
 800e368:	dc14      	bgt.n	800e394 <__b2d+0x50>
 800e36a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e36e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e372:	42b7      	cmp	r7, r6
 800e374:	ea41 030c 	orr.w	r3, r1, ip
 800e378:	bf34      	ite	cc
 800e37a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e37e:	2100      	movcs	r1, #0
 800e380:	3015      	adds	r0, #21
 800e382:	fa04 f000 	lsl.w	r0, r4, r0
 800e386:	fa21 f10e 	lsr.w	r1, r1, lr
 800e38a:	ea40 0201 	orr.w	r2, r0, r1
 800e38e:	ec43 2b10 	vmov	d0, r2, r3
 800e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e394:	42b7      	cmp	r7, r6
 800e396:	bf3a      	itte	cc
 800e398:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e39c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e3a0:	2100      	movcs	r1, #0
 800e3a2:	380b      	subs	r0, #11
 800e3a4:	d017      	beq.n	800e3d6 <__b2d+0x92>
 800e3a6:	f1c0 0c20 	rsb	ip, r0, #32
 800e3aa:	fa04 f500 	lsl.w	r5, r4, r0
 800e3ae:	42be      	cmp	r6, r7
 800e3b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800e3b4:	ea45 0504 	orr.w	r5, r5, r4
 800e3b8:	bf8c      	ite	hi
 800e3ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e3be:	2400      	movls	r4, #0
 800e3c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e3c4:	fa01 f000 	lsl.w	r0, r1, r0
 800e3c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e3cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e3d0:	ea40 0204 	orr.w	r2, r0, r4
 800e3d4:	e7db      	b.n	800e38e <__b2d+0x4a>
 800e3d6:	ea44 030c 	orr.w	r3, r4, ip
 800e3da:	460a      	mov	r2, r1
 800e3dc:	e7d7      	b.n	800e38e <__b2d+0x4a>
 800e3de:	bf00      	nop
 800e3e0:	3ff00000 	.word	0x3ff00000

0800e3e4 <__d2b>:
 800e3e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3e8:	4689      	mov	r9, r1
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	ec57 6b10 	vmov	r6, r7, d0
 800e3f0:	4690      	mov	r8, r2
 800e3f2:	f7ff fc09 	bl	800dc08 <_Balloc>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	b930      	cbnz	r0, 800e408 <__d2b+0x24>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	4b25      	ldr	r3, [pc, #148]	; (800e494 <__d2b+0xb0>)
 800e3fe:	4826      	ldr	r0, [pc, #152]	; (800e498 <__d2b+0xb4>)
 800e400:	f240 310a 	movw	r1, #778	; 0x30a
 800e404:	f000 fe6e 	bl	800f0e4 <__assert_func>
 800e408:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e40c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e410:	bb35      	cbnz	r5, 800e460 <__d2b+0x7c>
 800e412:	2e00      	cmp	r6, #0
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	d028      	beq.n	800e46a <__d2b+0x86>
 800e418:	4668      	mov	r0, sp
 800e41a:	9600      	str	r6, [sp, #0]
 800e41c:	f7ff fd06 	bl	800de2c <__lo0bits>
 800e420:	9900      	ldr	r1, [sp, #0]
 800e422:	b300      	cbz	r0, 800e466 <__d2b+0x82>
 800e424:	9a01      	ldr	r2, [sp, #4]
 800e426:	f1c0 0320 	rsb	r3, r0, #32
 800e42a:	fa02 f303 	lsl.w	r3, r2, r3
 800e42e:	430b      	orrs	r3, r1
 800e430:	40c2      	lsrs	r2, r0
 800e432:	6163      	str	r3, [r4, #20]
 800e434:	9201      	str	r2, [sp, #4]
 800e436:	9b01      	ldr	r3, [sp, #4]
 800e438:	61a3      	str	r3, [r4, #24]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bf14      	ite	ne
 800e43e:	2202      	movne	r2, #2
 800e440:	2201      	moveq	r2, #1
 800e442:	6122      	str	r2, [r4, #16]
 800e444:	b1d5      	cbz	r5, 800e47c <__d2b+0x98>
 800e446:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e44a:	4405      	add	r5, r0
 800e44c:	f8c9 5000 	str.w	r5, [r9]
 800e450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e454:	f8c8 0000 	str.w	r0, [r8]
 800e458:	4620      	mov	r0, r4
 800e45a:	b003      	add	sp, #12
 800e45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e464:	e7d5      	b.n	800e412 <__d2b+0x2e>
 800e466:	6161      	str	r1, [r4, #20]
 800e468:	e7e5      	b.n	800e436 <__d2b+0x52>
 800e46a:	a801      	add	r0, sp, #4
 800e46c:	f7ff fcde 	bl	800de2c <__lo0bits>
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	6163      	str	r3, [r4, #20]
 800e474:	2201      	movs	r2, #1
 800e476:	6122      	str	r2, [r4, #16]
 800e478:	3020      	adds	r0, #32
 800e47a:	e7e3      	b.n	800e444 <__d2b+0x60>
 800e47c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e484:	f8c9 0000 	str.w	r0, [r9]
 800e488:	6918      	ldr	r0, [r3, #16]
 800e48a:	f7ff fcaf 	bl	800ddec <__hi0bits>
 800e48e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e492:	e7df      	b.n	800e454 <__d2b+0x70>
 800e494:	080100f0 	.word	0x080100f0
 800e498:	0801017c 	.word	0x0801017c

0800e49c <__ratio>:
 800e49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a0:	4688      	mov	r8, r1
 800e4a2:	4669      	mov	r1, sp
 800e4a4:	4681      	mov	r9, r0
 800e4a6:	f7ff ff4d 	bl	800e344 <__b2d>
 800e4aa:	a901      	add	r1, sp, #4
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	ec55 4b10 	vmov	r4, r5, d0
 800e4b2:	ee10 aa10 	vmov	sl, s0
 800e4b6:	f7ff ff45 	bl	800e344 <__b2d>
 800e4ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e4c2:	1a59      	subs	r1, r3, r1
 800e4c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e4ce:	ec57 6b10 	vmov	r6, r7, d0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bfd6      	itet	le
 800e4d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e4da:	462a      	movgt	r2, r5
 800e4dc:	463a      	movle	r2, r7
 800e4de:	46ab      	mov	fp, r5
 800e4e0:	bfd6      	itet	le
 800e4e2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e4e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e4ea:	ee00 3a90 	vmovle	s1, r3
 800e4ee:	ec4b ab17 	vmov	d7, sl, fp
 800e4f2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e4f6:	b003      	add	sp, #12
 800e4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e4fc <__copybits>:
 800e4fc:	3901      	subs	r1, #1
 800e4fe:	b570      	push	{r4, r5, r6, lr}
 800e500:	1149      	asrs	r1, r1, #5
 800e502:	6914      	ldr	r4, [r2, #16]
 800e504:	3101      	adds	r1, #1
 800e506:	f102 0314 	add.w	r3, r2, #20
 800e50a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e50e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e512:	1f05      	subs	r5, r0, #4
 800e514:	42a3      	cmp	r3, r4
 800e516:	d30c      	bcc.n	800e532 <__copybits+0x36>
 800e518:	1aa3      	subs	r3, r4, r2
 800e51a:	3b11      	subs	r3, #17
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	3211      	adds	r2, #17
 800e522:	42a2      	cmp	r2, r4
 800e524:	bf88      	it	hi
 800e526:	2300      	movhi	r3, #0
 800e528:	4418      	add	r0, r3
 800e52a:	2300      	movs	r3, #0
 800e52c:	4288      	cmp	r0, r1
 800e52e:	d305      	bcc.n	800e53c <__copybits+0x40>
 800e530:	bd70      	pop	{r4, r5, r6, pc}
 800e532:	f853 6b04 	ldr.w	r6, [r3], #4
 800e536:	f845 6f04 	str.w	r6, [r5, #4]!
 800e53a:	e7eb      	b.n	800e514 <__copybits+0x18>
 800e53c:	f840 3b04 	str.w	r3, [r0], #4
 800e540:	e7f4      	b.n	800e52c <__copybits+0x30>

0800e542 <__any_on>:
 800e542:	f100 0214 	add.w	r2, r0, #20
 800e546:	6900      	ldr	r0, [r0, #16]
 800e548:	114b      	asrs	r3, r1, #5
 800e54a:	4298      	cmp	r0, r3
 800e54c:	b510      	push	{r4, lr}
 800e54e:	db11      	blt.n	800e574 <__any_on+0x32>
 800e550:	dd0a      	ble.n	800e568 <__any_on+0x26>
 800e552:	f011 011f 	ands.w	r1, r1, #31
 800e556:	d007      	beq.n	800e568 <__any_on+0x26>
 800e558:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e55c:	fa24 f001 	lsr.w	r0, r4, r1
 800e560:	fa00 f101 	lsl.w	r1, r0, r1
 800e564:	428c      	cmp	r4, r1
 800e566:	d10b      	bne.n	800e580 <__any_on+0x3e>
 800e568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d803      	bhi.n	800e578 <__any_on+0x36>
 800e570:	2000      	movs	r0, #0
 800e572:	bd10      	pop	{r4, pc}
 800e574:	4603      	mov	r3, r0
 800e576:	e7f7      	b.n	800e568 <__any_on+0x26>
 800e578:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e57c:	2900      	cmp	r1, #0
 800e57e:	d0f5      	beq.n	800e56c <__any_on+0x2a>
 800e580:	2001      	movs	r0, #1
 800e582:	e7f6      	b.n	800e572 <__any_on+0x30>

0800e584 <_calloc_r>:
 800e584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e586:	fba1 2402 	umull	r2, r4, r1, r2
 800e58a:	b94c      	cbnz	r4, 800e5a0 <_calloc_r+0x1c>
 800e58c:	4611      	mov	r1, r2
 800e58e:	9201      	str	r2, [sp, #4]
 800e590:	f7fc fbaa 	bl	800ace8 <_malloc_r>
 800e594:	9a01      	ldr	r2, [sp, #4]
 800e596:	4605      	mov	r5, r0
 800e598:	b930      	cbnz	r0, 800e5a8 <_calloc_r+0x24>
 800e59a:	4628      	mov	r0, r5
 800e59c:	b003      	add	sp, #12
 800e59e:	bd30      	pop	{r4, r5, pc}
 800e5a0:	220c      	movs	r2, #12
 800e5a2:	6002      	str	r2, [r0, #0]
 800e5a4:	2500      	movs	r5, #0
 800e5a6:	e7f8      	b.n	800e59a <_calloc_r+0x16>
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	f7fc fb29 	bl	800ac00 <memset>
 800e5ae:	e7f4      	b.n	800e59a <_calloc_r+0x16>

0800e5b0 <__ssputs_r>:
 800e5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b4:	688e      	ldr	r6, [r1, #8]
 800e5b6:	429e      	cmp	r6, r3
 800e5b8:	4682      	mov	sl, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	4690      	mov	r8, r2
 800e5be:	461f      	mov	r7, r3
 800e5c0:	d838      	bhi.n	800e634 <__ssputs_r+0x84>
 800e5c2:	898a      	ldrh	r2, [r1, #12]
 800e5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5c8:	d032      	beq.n	800e630 <__ssputs_r+0x80>
 800e5ca:	6825      	ldr	r5, [r4, #0]
 800e5cc:	6909      	ldr	r1, [r1, #16]
 800e5ce:	eba5 0901 	sub.w	r9, r5, r1
 800e5d2:	6965      	ldr	r5, [r4, #20]
 800e5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e5dc:	3301      	adds	r3, #1
 800e5de:	444b      	add	r3, r9
 800e5e0:	106d      	asrs	r5, r5, #1
 800e5e2:	429d      	cmp	r5, r3
 800e5e4:	bf38      	it	cc
 800e5e6:	461d      	movcc	r5, r3
 800e5e8:	0553      	lsls	r3, r2, #21
 800e5ea:	d531      	bpl.n	800e650 <__ssputs_r+0xa0>
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7fc fb7b 	bl	800ace8 <_malloc_r>
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	b950      	cbnz	r0, 800e60c <__ssputs_r+0x5c>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	f8ca 3000 	str.w	r3, [sl]
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60c:	6921      	ldr	r1, [r4, #16]
 800e60e:	464a      	mov	r2, r9
 800e610:	f7ff fae0 	bl	800dbd4 <memcpy>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e61e:	81a3      	strh	r3, [r4, #12]
 800e620:	6126      	str	r6, [r4, #16]
 800e622:	6165      	str	r5, [r4, #20]
 800e624:	444e      	add	r6, r9
 800e626:	eba5 0509 	sub.w	r5, r5, r9
 800e62a:	6026      	str	r6, [r4, #0]
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	463e      	mov	r6, r7
 800e630:	42be      	cmp	r6, r7
 800e632:	d900      	bls.n	800e636 <__ssputs_r+0x86>
 800e634:	463e      	mov	r6, r7
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	4632      	mov	r2, r6
 800e63a:	4641      	mov	r1, r8
 800e63c:	f000 ff39 	bl	800f4b2 <memmove>
 800e640:	68a3      	ldr	r3, [r4, #8]
 800e642:	1b9b      	subs	r3, r3, r6
 800e644:	60a3      	str	r3, [r4, #8]
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	4433      	add	r3, r6
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	2000      	movs	r0, #0
 800e64e:	e7db      	b.n	800e608 <__ssputs_r+0x58>
 800e650:	462a      	mov	r2, r5
 800e652:	f000 ff48 	bl	800f4e6 <_realloc_r>
 800e656:	4606      	mov	r6, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	d1e1      	bne.n	800e620 <__ssputs_r+0x70>
 800e65c:	6921      	ldr	r1, [r4, #16]
 800e65e:	4650      	mov	r0, sl
 800e660:	f7fc fad6 	bl	800ac10 <_free_r>
 800e664:	e7c7      	b.n	800e5f6 <__ssputs_r+0x46>
	...

0800e668 <_svfiprintf_r>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	4698      	mov	r8, r3
 800e66e:	898b      	ldrh	r3, [r1, #12]
 800e670:	061b      	lsls	r3, r3, #24
 800e672:	b09d      	sub	sp, #116	; 0x74
 800e674:	4607      	mov	r7, r0
 800e676:	460d      	mov	r5, r1
 800e678:	4614      	mov	r4, r2
 800e67a:	d50e      	bpl.n	800e69a <_svfiprintf_r+0x32>
 800e67c:	690b      	ldr	r3, [r1, #16]
 800e67e:	b963      	cbnz	r3, 800e69a <_svfiprintf_r+0x32>
 800e680:	2140      	movs	r1, #64	; 0x40
 800e682:	f7fc fb31 	bl	800ace8 <_malloc_r>
 800e686:	6028      	str	r0, [r5, #0]
 800e688:	6128      	str	r0, [r5, #16]
 800e68a:	b920      	cbnz	r0, 800e696 <_svfiprintf_r+0x2e>
 800e68c:	230c      	movs	r3, #12
 800e68e:	603b      	str	r3, [r7, #0]
 800e690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e694:	e0d1      	b.n	800e83a <_svfiprintf_r+0x1d2>
 800e696:	2340      	movs	r3, #64	; 0x40
 800e698:	616b      	str	r3, [r5, #20]
 800e69a:	2300      	movs	r3, #0
 800e69c:	9309      	str	r3, [sp, #36]	; 0x24
 800e69e:	2320      	movs	r3, #32
 800e6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6a8:	2330      	movs	r3, #48	; 0x30
 800e6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e854 <_svfiprintf_r+0x1ec>
 800e6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6b2:	f04f 0901 	mov.w	r9, #1
 800e6b6:	4623      	mov	r3, r4
 800e6b8:	469a      	mov	sl, r3
 800e6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6be:	b10a      	cbz	r2, 800e6c4 <_svfiprintf_r+0x5c>
 800e6c0:	2a25      	cmp	r2, #37	; 0x25
 800e6c2:	d1f9      	bne.n	800e6b8 <_svfiprintf_r+0x50>
 800e6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e6c8:	d00b      	beq.n	800e6e2 <_svfiprintf_r+0x7a>
 800e6ca:	465b      	mov	r3, fp
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f7ff ff6d 	bl	800e5b0 <__ssputs_r>
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	f000 80aa 	beq.w	800e830 <_svfiprintf_r+0x1c8>
 800e6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6de:	445a      	add	r2, fp
 800e6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f000 80a2 	beq.w	800e830 <_svfiprintf_r+0x1c8>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6f6:	f10a 0a01 	add.w	sl, sl, #1
 800e6fa:	9304      	str	r3, [sp, #16]
 800e6fc:	9307      	str	r3, [sp, #28]
 800e6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e702:	931a      	str	r3, [sp, #104]	; 0x68
 800e704:	4654      	mov	r4, sl
 800e706:	2205      	movs	r2, #5
 800e708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70c:	4851      	ldr	r0, [pc, #324]	; (800e854 <_svfiprintf_r+0x1ec>)
 800e70e:	f7f1 fdef 	bl	80002f0 <memchr>
 800e712:	9a04      	ldr	r2, [sp, #16]
 800e714:	b9d8      	cbnz	r0, 800e74e <_svfiprintf_r+0xe6>
 800e716:	06d0      	lsls	r0, r2, #27
 800e718:	bf44      	itt	mi
 800e71a:	2320      	movmi	r3, #32
 800e71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e720:	0711      	lsls	r1, r2, #28
 800e722:	bf44      	itt	mi
 800e724:	232b      	movmi	r3, #43	; 0x2b
 800e726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e72a:	f89a 3000 	ldrb.w	r3, [sl]
 800e72e:	2b2a      	cmp	r3, #42	; 0x2a
 800e730:	d015      	beq.n	800e75e <_svfiprintf_r+0xf6>
 800e732:	9a07      	ldr	r2, [sp, #28]
 800e734:	4654      	mov	r4, sl
 800e736:	2000      	movs	r0, #0
 800e738:	f04f 0c0a 	mov.w	ip, #10
 800e73c:	4621      	mov	r1, r4
 800e73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e742:	3b30      	subs	r3, #48	; 0x30
 800e744:	2b09      	cmp	r3, #9
 800e746:	d94e      	bls.n	800e7e6 <_svfiprintf_r+0x17e>
 800e748:	b1b0      	cbz	r0, 800e778 <_svfiprintf_r+0x110>
 800e74a:	9207      	str	r2, [sp, #28]
 800e74c:	e014      	b.n	800e778 <_svfiprintf_r+0x110>
 800e74e:	eba0 0308 	sub.w	r3, r0, r8
 800e752:	fa09 f303 	lsl.w	r3, r9, r3
 800e756:	4313      	orrs	r3, r2
 800e758:	9304      	str	r3, [sp, #16]
 800e75a:	46a2      	mov	sl, r4
 800e75c:	e7d2      	b.n	800e704 <_svfiprintf_r+0x9c>
 800e75e:	9b03      	ldr	r3, [sp, #12]
 800e760:	1d19      	adds	r1, r3, #4
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	9103      	str	r1, [sp, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	bfbb      	ittet	lt
 800e76a:	425b      	neglt	r3, r3
 800e76c:	f042 0202 	orrlt.w	r2, r2, #2
 800e770:	9307      	strge	r3, [sp, #28]
 800e772:	9307      	strlt	r3, [sp, #28]
 800e774:	bfb8      	it	lt
 800e776:	9204      	strlt	r2, [sp, #16]
 800e778:	7823      	ldrb	r3, [r4, #0]
 800e77a:	2b2e      	cmp	r3, #46	; 0x2e
 800e77c:	d10c      	bne.n	800e798 <_svfiprintf_r+0x130>
 800e77e:	7863      	ldrb	r3, [r4, #1]
 800e780:	2b2a      	cmp	r3, #42	; 0x2a
 800e782:	d135      	bne.n	800e7f0 <_svfiprintf_r+0x188>
 800e784:	9b03      	ldr	r3, [sp, #12]
 800e786:	1d1a      	adds	r2, r3, #4
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	9203      	str	r2, [sp, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfb8      	it	lt
 800e790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e794:	3402      	adds	r4, #2
 800e796:	9305      	str	r3, [sp, #20]
 800e798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e864 <_svfiprintf_r+0x1fc>
 800e79c:	7821      	ldrb	r1, [r4, #0]
 800e79e:	2203      	movs	r2, #3
 800e7a0:	4650      	mov	r0, sl
 800e7a2:	f7f1 fda5 	bl	80002f0 <memchr>
 800e7a6:	b140      	cbz	r0, 800e7ba <_svfiprintf_r+0x152>
 800e7a8:	2340      	movs	r3, #64	; 0x40
 800e7aa:	eba0 000a 	sub.w	r0, r0, sl
 800e7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e7b2:	9b04      	ldr	r3, [sp, #16]
 800e7b4:	4303      	orrs	r3, r0
 800e7b6:	3401      	adds	r4, #1
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7be:	4826      	ldr	r0, [pc, #152]	; (800e858 <_svfiprintf_r+0x1f0>)
 800e7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7c4:	2206      	movs	r2, #6
 800e7c6:	f7f1 fd93 	bl	80002f0 <memchr>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d038      	beq.n	800e840 <_svfiprintf_r+0x1d8>
 800e7ce:	4b23      	ldr	r3, [pc, #140]	; (800e85c <_svfiprintf_r+0x1f4>)
 800e7d0:	bb1b      	cbnz	r3, 800e81a <_svfiprintf_r+0x1b2>
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	3307      	adds	r3, #7
 800e7d6:	f023 0307 	bic.w	r3, r3, #7
 800e7da:	3308      	adds	r3, #8
 800e7dc:	9303      	str	r3, [sp, #12]
 800e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e0:	4433      	add	r3, r6
 800e7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e4:	e767      	b.n	800e6b6 <_svfiprintf_r+0x4e>
 800e7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	2001      	movs	r0, #1
 800e7ee:	e7a5      	b.n	800e73c <_svfiprintf_r+0xd4>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	3401      	adds	r4, #1
 800e7f4:	9305      	str	r3, [sp, #20]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f04f 0c0a 	mov.w	ip, #10
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e802:	3a30      	subs	r2, #48	; 0x30
 800e804:	2a09      	cmp	r2, #9
 800e806:	d903      	bls.n	800e810 <_svfiprintf_r+0x1a8>
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0c5      	beq.n	800e798 <_svfiprintf_r+0x130>
 800e80c:	9105      	str	r1, [sp, #20]
 800e80e:	e7c3      	b.n	800e798 <_svfiprintf_r+0x130>
 800e810:	fb0c 2101 	mla	r1, ip, r1, r2
 800e814:	4604      	mov	r4, r0
 800e816:	2301      	movs	r3, #1
 800e818:	e7f0      	b.n	800e7fc <_svfiprintf_r+0x194>
 800e81a:	ab03      	add	r3, sp, #12
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	462a      	mov	r2, r5
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <_svfiprintf_r+0x1f8>)
 800e822:	a904      	add	r1, sp, #16
 800e824:	4638      	mov	r0, r7
 800e826:	f7fc fb63 	bl	800aef0 <_printf_float>
 800e82a:	1c42      	adds	r2, r0, #1
 800e82c:	4606      	mov	r6, r0
 800e82e:	d1d6      	bne.n	800e7de <_svfiprintf_r+0x176>
 800e830:	89ab      	ldrh	r3, [r5, #12]
 800e832:	065b      	lsls	r3, r3, #25
 800e834:	f53f af2c 	bmi.w	800e690 <_svfiprintf_r+0x28>
 800e838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e83a:	b01d      	add	sp, #116	; 0x74
 800e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e840:	ab03      	add	r3, sp, #12
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	462a      	mov	r2, r5
 800e846:	4b06      	ldr	r3, [pc, #24]	; (800e860 <_svfiprintf_r+0x1f8>)
 800e848:	a904      	add	r1, sp, #16
 800e84a:	4638      	mov	r0, r7
 800e84c:	f7fc fddc 	bl	800b408 <_printf_i>
 800e850:	e7eb      	b.n	800e82a <_svfiprintf_r+0x1c2>
 800e852:	bf00      	nop
 800e854:	080102d4 	.word	0x080102d4
 800e858:	080102de 	.word	0x080102de
 800e85c:	0800aef1 	.word	0x0800aef1
 800e860:	0800e5b1 	.word	0x0800e5b1
 800e864:	080102da 	.word	0x080102da

0800e868 <_sungetc_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	1c4b      	adds	r3, r1, #1
 800e86c:	4614      	mov	r4, r2
 800e86e:	d103      	bne.n	800e878 <_sungetc_r+0x10>
 800e870:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e874:	4628      	mov	r0, r5
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	8993      	ldrh	r3, [r2, #12]
 800e87a:	f023 0320 	bic.w	r3, r3, #32
 800e87e:	8193      	strh	r3, [r2, #12]
 800e880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e882:	6852      	ldr	r2, [r2, #4]
 800e884:	b2cd      	uxtb	r5, r1
 800e886:	b18b      	cbz	r3, 800e8ac <_sungetc_r+0x44>
 800e888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e88a:	4293      	cmp	r3, r2
 800e88c:	dd08      	ble.n	800e8a0 <_sungetc_r+0x38>
 800e88e:	6823      	ldr	r3, [r4, #0]
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	6022      	str	r2, [r4, #0]
 800e894:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e898:	6863      	ldr	r3, [r4, #4]
 800e89a:	3301      	adds	r3, #1
 800e89c:	6063      	str	r3, [r4, #4]
 800e89e:	e7e9      	b.n	800e874 <_sungetc_r+0xc>
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	f000 fbd7 	bl	800f054 <__submore>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d0f1      	beq.n	800e88e <_sungetc_r+0x26>
 800e8aa:	e7e1      	b.n	800e870 <_sungetc_r+0x8>
 800e8ac:	6921      	ldr	r1, [r4, #16]
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	b151      	cbz	r1, 800e8c8 <_sungetc_r+0x60>
 800e8b2:	4299      	cmp	r1, r3
 800e8b4:	d208      	bcs.n	800e8c8 <_sungetc_r+0x60>
 800e8b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e8ba:	42a9      	cmp	r1, r5
 800e8bc:	d104      	bne.n	800e8c8 <_sungetc_r+0x60>
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	6023      	str	r3, [r4, #0]
 800e8c4:	6062      	str	r2, [r4, #4]
 800e8c6:	e7d5      	b.n	800e874 <_sungetc_r+0xc>
 800e8c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8d0:	6363      	str	r3, [r4, #52]	; 0x34
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8d6:	4623      	mov	r3, r4
 800e8d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e7dc      	b.n	800e89c <_sungetc_r+0x34>

0800e8e2 <__ssrefill_r>:
 800e8e2:	b510      	push	{r4, lr}
 800e8e4:	460c      	mov	r4, r1
 800e8e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e8e8:	b169      	cbz	r1, 800e906 <__ssrefill_r+0x24>
 800e8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8ee:	4299      	cmp	r1, r3
 800e8f0:	d001      	beq.n	800e8f6 <__ssrefill_r+0x14>
 800e8f2:	f7fc f98d 	bl	800ac10 <_free_r>
 800e8f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e8fe:	b113      	cbz	r3, 800e906 <__ssrefill_r+0x24>
 800e900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e902:	6023      	str	r3, [r4, #0]
 800e904:	bd10      	pop	{r4, pc}
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	2300      	movs	r3, #0
 800e90c:	6063      	str	r3, [r4, #4]
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	f043 0320 	orr.w	r3, r3, #32
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e91a:	e7f3      	b.n	800e904 <__ssrefill_r+0x22>

0800e91c <__ssvfiscanf_r>:
 800e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e920:	460c      	mov	r4, r1
 800e922:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e926:	2100      	movs	r1, #0
 800e928:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e92c:	49a6      	ldr	r1, [pc, #664]	; (800ebc8 <__ssvfiscanf_r+0x2ac>)
 800e92e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e930:	f10d 0804 	add.w	r8, sp, #4
 800e934:	49a5      	ldr	r1, [pc, #660]	; (800ebcc <__ssvfiscanf_r+0x2b0>)
 800e936:	4fa6      	ldr	r7, [pc, #664]	; (800ebd0 <__ssvfiscanf_r+0x2b4>)
 800e938:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ebd4 <__ssvfiscanf_r+0x2b8>
 800e93c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e940:	4606      	mov	r6, r0
 800e942:	91a1      	str	r1, [sp, #644]	; 0x284
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	7813      	ldrb	r3, [r2, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 815a 	beq.w	800ec02 <__ssvfiscanf_r+0x2e6>
 800e94e:	5dd9      	ldrb	r1, [r3, r7]
 800e950:	f011 0108 	ands.w	r1, r1, #8
 800e954:	f102 0501 	add.w	r5, r2, #1
 800e958:	d019      	beq.n	800e98e <__ssvfiscanf_r+0x72>
 800e95a:	6863      	ldr	r3, [r4, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dd0f      	ble.n	800e980 <__ssvfiscanf_r+0x64>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	781a      	ldrb	r2, [r3, #0]
 800e964:	5cba      	ldrb	r2, [r7, r2]
 800e966:	0712      	lsls	r2, r2, #28
 800e968:	d401      	bmi.n	800e96e <__ssvfiscanf_r+0x52>
 800e96a:	462a      	mov	r2, r5
 800e96c:	e7eb      	b.n	800e946 <__ssvfiscanf_r+0x2a>
 800e96e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e970:	3201      	adds	r2, #1
 800e972:	9245      	str	r2, [sp, #276]	; 0x114
 800e974:	6862      	ldr	r2, [r4, #4]
 800e976:	3301      	adds	r3, #1
 800e978:	3a01      	subs	r2, #1
 800e97a:	6062      	str	r2, [r4, #4]
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	e7ec      	b.n	800e95a <__ssvfiscanf_r+0x3e>
 800e980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e982:	4621      	mov	r1, r4
 800e984:	4630      	mov	r0, r6
 800e986:	4798      	blx	r3
 800e988:	2800      	cmp	r0, #0
 800e98a:	d0e9      	beq.n	800e960 <__ssvfiscanf_r+0x44>
 800e98c:	e7ed      	b.n	800e96a <__ssvfiscanf_r+0x4e>
 800e98e:	2b25      	cmp	r3, #37	; 0x25
 800e990:	d012      	beq.n	800e9b8 <__ssvfiscanf_r+0x9c>
 800e992:	469a      	mov	sl, r3
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f340 8091 	ble.w	800eabe <__ssvfiscanf_r+0x1a2>
 800e99c:	6822      	ldr	r2, [r4, #0]
 800e99e:	7813      	ldrb	r3, [r2, #0]
 800e9a0:	4553      	cmp	r3, sl
 800e9a2:	f040 812e 	bne.w	800ec02 <__ssvfiscanf_r+0x2e6>
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	6063      	str	r3, [r4, #4]
 800e9ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e9ae:	3201      	adds	r2, #1
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	6022      	str	r2, [r4, #0]
 800e9b4:	9345      	str	r3, [sp, #276]	; 0x114
 800e9b6:	e7d8      	b.n	800e96a <__ssvfiscanf_r+0x4e>
 800e9b8:	9141      	str	r1, [sp, #260]	; 0x104
 800e9ba:	9143      	str	r1, [sp, #268]	; 0x10c
 800e9bc:	7853      	ldrb	r3, [r2, #1]
 800e9be:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c0:	bf02      	ittt	eq
 800e9c2:	2310      	moveq	r3, #16
 800e9c4:	1c95      	addeq	r5, r2, #2
 800e9c6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e9c8:	220a      	movs	r2, #10
 800e9ca:	46aa      	mov	sl, r5
 800e9cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e9d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e9d4:	2b09      	cmp	r3, #9
 800e9d6:	d91d      	bls.n	800ea14 <__ssvfiscanf_r+0xf8>
 800e9d8:	487e      	ldr	r0, [pc, #504]	; (800ebd4 <__ssvfiscanf_r+0x2b8>)
 800e9da:	2203      	movs	r2, #3
 800e9dc:	f7f1 fc88 	bl	80002f0 <memchr>
 800e9e0:	b140      	cbz	r0, 800e9f4 <__ssvfiscanf_r+0xd8>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	eba0 0009 	sub.w	r0, r0, r9
 800e9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e9ee:	4318      	orrs	r0, r3
 800e9f0:	9041      	str	r0, [sp, #260]	; 0x104
 800e9f2:	4655      	mov	r5, sl
 800e9f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e9f8:	2b78      	cmp	r3, #120	; 0x78
 800e9fa:	d806      	bhi.n	800ea0a <__ssvfiscanf_r+0xee>
 800e9fc:	2b57      	cmp	r3, #87	; 0x57
 800e9fe:	d810      	bhi.n	800ea22 <__ssvfiscanf_r+0x106>
 800ea00:	2b25      	cmp	r3, #37	; 0x25
 800ea02:	d0c6      	beq.n	800e992 <__ssvfiscanf_r+0x76>
 800ea04:	d856      	bhi.n	800eab4 <__ssvfiscanf_r+0x198>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d064      	beq.n	800ead4 <__ssvfiscanf_r+0x1b8>
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ea0e:	230a      	movs	r3, #10
 800ea10:	9342      	str	r3, [sp, #264]	; 0x108
 800ea12:	e071      	b.n	800eaf8 <__ssvfiscanf_r+0x1dc>
 800ea14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ea16:	fb02 1103 	mla	r1, r2, r3, r1
 800ea1a:	3930      	subs	r1, #48	; 0x30
 800ea1c:	9143      	str	r1, [sp, #268]	; 0x10c
 800ea1e:	4655      	mov	r5, sl
 800ea20:	e7d3      	b.n	800e9ca <__ssvfiscanf_r+0xae>
 800ea22:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ea26:	2a20      	cmp	r2, #32
 800ea28:	d8ef      	bhi.n	800ea0a <__ssvfiscanf_r+0xee>
 800ea2a:	a101      	add	r1, pc, #4	; (adr r1, 800ea30 <__ssvfiscanf_r+0x114>)
 800ea2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea30:	0800eae3 	.word	0x0800eae3
 800ea34:	0800ea0b 	.word	0x0800ea0b
 800ea38:	0800ea0b 	.word	0x0800ea0b
 800ea3c:	0800eb41 	.word	0x0800eb41
 800ea40:	0800ea0b 	.word	0x0800ea0b
 800ea44:	0800ea0b 	.word	0x0800ea0b
 800ea48:	0800ea0b 	.word	0x0800ea0b
 800ea4c:	0800ea0b 	.word	0x0800ea0b
 800ea50:	0800ea0b 	.word	0x0800ea0b
 800ea54:	0800ea0b 	.word	0x0800ea0b
 800ea58:	0800ea0b 	.word	0x0800ea0b
 800ea5c:	0800eb57 	.word	0x0800eb57
 800ea60:	0800eb2d 	.word	0x0800eb2d
 800ea64:	0800eabb 	.word	0x0800eabb
 800ea68:	0800eabb 	.word	0x0800eabb
 800ea6c:	0800eabb 	.word	0x0800eabb
 800ea70:	0800ea0b 	.word	0x0800ea0b
 800ea74:	0800eb31 	.word	0x0800eb31
 800ea78:	0800ea0b 	.word	0x0800ea0b
 800ea7c:	0800ea0b 	.word	0x0800ea0b
 800ea80:	0800ea0b 	.word	0x0800ea0b
 800ea84:	0800ea0b 	.word	0x0800ea0b
 800ea88:	0800eb67 	.word	0x0800eb67
 800ea8c:	0800eb39 	.word	0x0800eb39
 800ea90:	0800eadb 	.word	0x0800eadb
 800ea94:	0800ea0b 	.word	0x0800ea0b
 800ea98:	0800ea0b 	.word	0x0800ea0b
 800ea9c:	0800eb63 	.word	0x0800eb63
 800eaa0:	0800ea0b 	.word	0x0800ea0b
 800eaa4:	0800eb2d 	.word	0x0800eb2d
 800eaa8:	0800ea0b 	.word	0x0800ea0b
 800eaac:	0800ea0b 	.word	0x0800ea0b
 800eab0:	0800eae3 	.word	0x0800eae3
 800eab4:	3b45      	subs	r3, #69	; 0x45
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d8a7      	bhi.n	800ea0a <__ssvfiscanf_r+0xee>
 800eaba:	2305      	movs	r3, #5
 800eabc:	e01b      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eabe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eac0:	4621      	mov	r1, r4
 800eac2:	4630      	mov	r0, r6
 800eac4:	4798      	blx	r3
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f43f af68 	beq.w	800e99c <__ssvfiscanf_r+0x80>
 800eacc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800eace:	2800      	cmp	r0, #0
 800ead0:	f040 808d 	bne.w	800ebee <__ssvfiscanf_r+0x2d2>
 800ead4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ead8:	e08f      	b.n	800ebfa <__ssvfiscanf_r+0x2de>
 800eada:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800eadc:	f042 0220 	orr.w	r2, r2, #32
 800eae0:	9241      	str	r2, [sp, #260]	; 0x104
 800eae2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800eae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eae8:	9241      	str	r2, [sp, #260]	; 0x104
 800eaea:	2210      	movs	r2, #16
 800eaec:	2b6f      	cmp	r3, #111	; 0x6f
 800eaee:	9242      	str	r2, [sp, #264]	; 0x108
 800eaf0:	bf34      	ite	cc
 800eaf2:	2303      	movcc	r3, #3
 800eaf4:	2304      	movcs	r3, #4
 800eaf6:	9347      	str	r3, [sp, #284]	; 0x11c
 800eaf8:	6863      	ldr	r3, [r4, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	dd42      	ble.n	800eb84 <__ssvfiscanf_r+0x268>
 800eafe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eb00:	0659      	lsls	r1, r3, #25
 800eb02:	d404      	bmi.n	800eb0e <__ssvfiscanf_r+0x1f2>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	781a      	ldrb	r2, [r3, #0]
 800eb08:	5cba      	ldrb	r2, [r7, r2]
 800eb0a:	0712      	lsls	r2, r2, #28
 800eb0c:	d441      	bmi.n	800eb92 <__ssvfiscanf_r+0x276>
 800eb0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	dc50      	bgt.n	800ebb6 <__ssvfiscanf_r+0x29a>
 800eb14:	466b      	mov	r3, sp
 800eb16:	4622      	mov	r2, r4
 800eb18:	a941      	add	r1, sp, #260	; 0x104
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f000 f876 	bl	800ec0c <_scanf_chars>
 800eb20:	2801      	cmp	r0, #1
 800eb22:	d06e      	beq.n	800ec02 <__ssvfiscanf_r+0x2e6>
 800eb24:	2802      	cmp	r0, #2
 800eb26:	f47f af20 	bne.w	800e96a <__ssvfiscanf_r+0x4e>
 800eb2a:	e7cf      	b.n	800eacc <__ssvfiscanf_r+0x1b0>
 800eb2c:	220a      	movs	r2, #10
 800eb2e:	e7dd      	b.n	800eaec <__ssvfiscanf_r+0x1d0>
 800eb30:	2300      	movs	r3, #0
 800eb32:	9342      	str	r3, [sp, #264]	; 0x108
 800eb34:	2303      	movs	r3, #3
 800eb36:	e7de      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eb38:	2308      	movs	r3, #8
 800eb3a:	9342      	str	r3, [sp, #264]	; 0x108
 800eb3c:	2304      	movs	r3, #4
 800eb3e:	e7da      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eb40:	4629      	mov	r1, r5
 800eb42:	4640      	mov	r0, r8
 800eb44:	f000 f9c6 	bl	800eed4 <__sccl>
 800eb48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4e:	9341      	str	r3, [sp, #260]	; 0x104
 800eb50:	4605      	mov	r5, r0
 800eb52:	2301      	movs	r3, #1
 800eb54:	e7cf      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eb56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eb58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb5c:	9341      	str	r3, [sp, #260]	; 0x104
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e7c9      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eb62:	2302      	movs	r3, #2
 800eb64:	e7c7      	b.n	800eaf6 <__ssvfiscanf_r+0x1da>
 800eb66:	9841      	ldr	r0, [sp, #260]	; 0x104
 800eb68:	06c3      	lsls	r3, r0, #27
 800eb6a:	f53f aefe 	bmi.w	800e96a <__ssvfiscanf_r+0x4e>
 800eb6e:	9b00      	ldr	r3, [sp, #0]
 800eb70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eb72:	1d19      	adds	r1, r3, #4
 800eb74:	9100      	str	r1, [sp, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f010 0f01 	tst.w	r0, #1
 800eb7c:	bf14      	ite	ne
 800eb7e:	801a      	strhne	r2, [r3, #0]
 800eb80:	601a      	streq	r2, [r3, #0]
 800eb82:	e6f2      	b.n	800e96a <__ssvfiscanf_r+0x4e>
 800eb84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eb86:	4621      	mov	r1, r4
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4798      	blx	r3
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d0b6      	beq.n	800eafe <__ssvfiscanf_r+0x1e2>
 800eb90:	e79c      	b.n	800eacc <__ssvfiscanf_r+0x1b0>
 800eb92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eb94:	3201      	adds	r2, #1
 800eb96:	9245      	str	r2, [sp, #276]	; 0x114
 800eb98:	6862      	ldr	r2, [r4, #4]
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	2a00      	cmp	r2, #0
 800eb9e:	6062      	str	r2, [r4, #4]
 800eba0:	dd02      	ble.n	800eba8 <__ssvfiscanf_r+0x28c>
 800eba2:	3301      	adds	r3, #1
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	e7ad      	b.n	800eb04 <__ssvfiscanf_r+0x1e8>
 800eba8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4630      	mov	r0, r6
 800ebae:	4798      	blx	r3
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d0a7      	beq.n	800eb04 <__ssvfiscanf_r+0x1e8>
 800ebb4:	e78a      	b.n	800eacc <__ssvfiscanf_r+0x1b0>
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	dc0e      	bgt.n	800ebd8 <__ssvfiscanf_r+0x2bc>
 800ebba:	466b      	mov	r3, sp
 800ebbc:	4622      	mov	r2, r4
 800ebbe:	a941      	add	r1, sp, #260	; 0x104
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f000 f87d 	bl	800ecc0 <_scanf_i>
 800ebc6:	e7ab      	b.n	800eb20 <__ssvfiscanf_r+0x204>
 800ebc8:	0800e869 	.word	0x0800e869
 800ebcc:	0800e8e3 	.word	0x0800e8e3
 800ebd0:	0800ff71 	.word	0x0800ff71
 800ebd4:	080102da 	.word	0x080102da
 800ebd8:	4b0b      	ldr	r3, [pc, #44]	; (800ec08 <__ssvfiscanf_r+0x2ec>)
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f43f aec5 	beq.w	800e96a <__ssvfiscanf_r+0x4e>
 800ebe0:	466b      	mov	r3, sp
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	a941      	add	r1, sp, #260	; 0x104
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7fc fd34 	bl	800b654 <_scanf_float>
 800ebec:	e798      	b.n	800eb20 <__ssvfiscanf_r+0x204>
 800ebee:	89a3      	ldrh	r3, [r4, #12]
 800ebf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ebf4:	bf18      	it	ne
 800ebf6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ebfa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ebfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec02:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ec04:	e7f9      	b.n	800ebfa <__ssvfiscanf_r+0x2de>
 800ec06:	bf00      	nop
 800ec08:	0800b655 	.word	0x0800b655

0800ec0c <_scanf_chars>:
 800ec0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec10:	4615      	mov	r5, r2
 800ec12:	688a      	ldr	r2, [r1, #8]
 800ec14:	4680      	mov	r8, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	b932      	cbnz	r2, 800ec28 <_scanf_chars+0x1c>
 800ec1a:	698a      	ldr	r2, [r1, #24]
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	bf0c      	ite	eq
 800ec20:	2201      	moveq	r2, #1
 800ec22:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800ec26:	608a      	str	r2, [r1, #8]
 800ec28:	6822      	ldr	r2, [r4, #0]
 800ec2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ecbc <_scanf_chars+0xb0>
 800ec2e:	06d1      	lsls	r1, r2, #27
 800ec30:	bf5f      	itttt	pl
 800ec32:	681a      	ldrpl	r2, [r3, #0]
 800ec34:	1d11      	addpl	r1, r2, #4
 800ec36:	6019      	strpl	r1, [r3, #0]
 800ec38:	6816      	ldrpl	r6, [r2, #0]
 800ec3a:	2700      	movs	r7, #0
 800ec3c:	69a0      	ldr	r0, [r4, #24]
 800ec3e:	b188      	cbz	r0, 800ec64 <_scanf_chars+0x58>
 800ec40:	2801      	cmp	r0, #1
 800ec42:	d107      	bne.n	800ec54 <_scanf_chars+0x48>
 800ec44:	682a      	ldr	r2, [r5, #0]
 800ec46:	7811      	ldrb	r1, [r2, #0]
 800ec48:	6962      	ldr	r2, [r4, #20]
 800ec4a:	5c52      	ldrb	r2, [r2, r1]
 800ec4c:	b952      	cbnz	r2, 800ec64 <_scanf_chars+0x58>
 800ec4e:	2f00      	cmp	r7, #0
 800ec50:	d031      	beq.n	800ecb6 <_scanf_chars+0xaa>
 800ec52:	e022      	b.n	800ec9a <_scanf_chars+0x8e>
 800ec54:	2802      	cmp	r0, #2
 800ec56:	d120      	bne.n	800ec9a <_scanf_chars+0x8e>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ec60:	071b      	lsls	r3, r3, #28
 800ec62:	d41a      	bmi.n	800ec9a <_scanf_chars+0x8e>
 800ec64:	6823      	ldr	r3, [r4, #0]
 800ec66:	06da      	lsls	r2, r3, #27
 800ec68:	bf5e      	ittt	pl
 800ec6a:	682b      	ldrpl	r3, [r5, #0]
 800ec6c:	781b      	ldrbpl	r3, [r3, #0]
 800ec6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ec72:	682a      	ldr	r2, [r5, #0]
 800ec74:	686b      	ldr	r3, [r5, #4]
 800ec76:	3201      	adds	r2, #1
 800ec78:	602a      	str	r2, [r5, #0]
 800ec7a:	68a2      	ldr	r2, [r4, #8]
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	3a01      	subs	r2, #1
 800ec80:	606b      	str	r3, [r5, #4]
 800ec82:	3701      	adds	r7, #1
 800ec84:	60a2      	str	r2, [r4, #8]
 800ec86:	b142      	cbz	r2, 800ec9a <_scanf_chars+0x8e>
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dcd7      	bgt.n	800ec3c <_scanf_chars+0x30>
 800ec8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec90:	4629      	mov	r1, r5
 800ec92:	4640      	mov	r0, r8
 800ec94:	4798      	blx	r3
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0d0      	beq.n	800ec3c <_scanf_chars+0x30>
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	f013 0310 	ands.w	r3, r3, #16
 800eca0:	d105      	bne.n	800ecae <_scanf_chars+0xa2>
 800eca2:	68e2      	ldr	r2, [r4, #12]
 800eca4:	3201      	adds	r2, #1
 800eca6:	60e2      	str	r2, [r4, #12]
 800eca8:	69a2      	ldr	r2, [r4, #24]
 800ecaa:	b102      	cbz	r2, 800ecae <_scanf_chars+0xa2>
 800ecac:	7033      	strb	r3, [r6, #0]
 800ecae:	6923      	ldr	r3, [r4, #16]
 800ecb0:	443b      	add	r3, r7
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecba:	bf00      	nop
 800ecbc:	0800ff71 	.word	0x0800ff71

0800ecc0 <_scanf_i>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	4698      	mov	r8, r3
 800ecc6:	4b76      	ldr	r3, [pc, #472]	; (800eea0 <_scanf_i+0x1e0>)
 800ecc8:	460c      	mov	r4, r1
 800ecca:	4682      	mov	sl, r0
 800eccc:	4616      	mov	r6, r2
 800ecce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	ab03      	add	r3, sp, #12
 800ecd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ecda:	4b72      	ldr	r3, [pc, #456]	; (800eea4 <_scanf_i+0x1e4>)
 800ecdc:	69a1      	ldr	r1, [r4, #24]
 800ecde:	4a72      	ldr	r2, [pc, #456]	; (800eea8 <_scanf_i+0x1e8>)
 800ece0:	2903      	cmp	r1, #3
 800ece2:	bf18      	it	ne
 800ece4:	461a      	movne	r2, r3
 800ece6:	68a3      	ldr	r3, [r4, #8]
 800ece8:	9201      	str	r2, [sp, #4]
 800ecea:	1e5a      	subs	r2, r3, #1
 800ecec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ecf0:	bf88      	it	hi
 800ecf2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ecf6:	4627      	mov	r7, r4
 800ecf8:	bf82      	ittt	hi
 800ecfa:	eb03 0905 	addhi.w	r9, r3, r5
 800ecfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed02:	60a3      	strhi	r3, [r4, #8]
 800ed04:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ed08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ed0c:	bf98      	it	ls
 800ed0e:	f04f 0900 	movls.w	r9, #0
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	463d      	mov	r5, r7
 800ed16:	f04f 0b00 	mov.w	fp, #0
 800ed1a:	6831      	ldr	r1, [r6, #0]
 800ed1c:	ab03      	add	r3, sp, #12
 800ed1e:	7809      	ldrb	r1, [r1, #0]
 800ed20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ed24:	2202      	movs	r2, #2
 800ed26:	f7f1 fae3 	bl	80002f0 <memchr>
 800ed2a:	b328      	cbz	r0, 800ed78 <_scanf_i+0xb8>
 800ed2c:	f1bb 0f01 	cmp.w	fp, #1
 800ed30:	d159      	bne.n	800ede6 <_scanf_i+0x126>
 800ed32:	6862      	ldr	r2, [r4, #4]
 800ed34:	b92a      	cbnz	r2, 800ed42 <_scanf_i+0x82>
 800ed36:	6822      	ldr	r2, [r4, #0]
 800ed38:	2308      	movs	r3, #8
 800ed3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed3e:	6063      	str	r3, [r4, #4]
 800ed40:	6022      	str	r2, [r4, #0]
 800ed42:	6822      	ldr	r2, [r4, #0]
 800ed44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ed48:	6022      	str	r2, [r4, #0]
 800ed4a:	68a2      	ldr	r2, [r4, #8]
 800ed4c:	1e51      	subs	r1, r2, #1
 800ed4e:	60a1      	str	r1, [r4, #8]
 800ed50:	b192      	cbz	r2, 800ed78 <_scanf_i+0xb8>
 800ed52:	6832      	ldr	r2, [r6, #0]
 800ed54:	1c51      	adds	r1, r2, #1
 800ed56:	6031      	str	r1, [r6, #0]
 800ed58:	7812      	ldrb	r2, [r2, #0]
 800ed5a:	f805 2b01 	strb.w	r2, [r5], #1
 800ed5e:	6872      	ldr	r2, [r6, #4]
 800ed60:	3a01      	subs	r2, #1
 800ed62:	2a00      	cmp	r2, #0
 800ed64:	6072      	str	r2, [r6, #4]
 800ed66:	dc07      	bgt.n	800ed78 <_scanf_i+0xb8>
 800ed68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4650      	mov	r0, sl
 800ed70:	4790      	blx	r2
 800ed72:	2800      	cmp	r0, #0
 800ed74:	f040 8085 	bne.w	800ee82 <_scanf_i+0x1c2>
 800ed78:	f10b 0b01 	add.w	fp, fp, #1
 800ed7c:	f1bb 0f03 	cmp.w	fp, #3
 800ed80:	d1cb      	bne.n	800ed1a <_scanf_i+0x5a>
 800ed82:	6863      	ldr	r3, [r4, #4]
 800ed84:	b90b      	cbnz	r3, 800ed8a <_scanf_i+0xca>
 800ed86:	230a      	movs	r3, #10
 800ed88:	6063      	str	r3, [r4, #4]
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	4947      	ldr	r1, [pc, #284]	; (800eeac <_scanf_i+0x1ec>)
 800ed8e:	6960      	ldr	r0, [r4, #20]
 800ed90:	1ac9      	subs	r1, r1, r3
 800ed92:	f000 f89f 	bl	800eed4 <__sccl>
 800ed96:	f04f 0b00 	mov.w	fp, #0
 800ed9a:	68a3      	ldr	r3, [r4, #8]
 800ed9c:	6822      	ldr	r2, [r4, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d03d      	beq.n	800ee1e <_scanf_i+0x15e>
 800eda2:	6831      	ldr	r1, [r6, #0]
 800eda4:	6960      	ldr	r0, [r4, #20]
 800eda6:	f891 c000 	ldrb.w	ip, [r1]
 800edaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800edae:	2800      	cmp	r0, #0
 800edb0:	d035      	beq.n	800ee1e <_scanf_i+0x15e>
 800edb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800edb6:	d124      	bne.n	800ee02 <_scanf_i+0x142>
 800edb8:	0510      	lsls	r0, r2, #20
 800edba:	d522      	bpl.n	800ee02 <_scanf_i+0x142>
 800edbc:	f10b 0b01 	add.w	fp, fp, #1
 800edc0:	f1b9 0f00 	cmp.w	r9, #0
 800edc4:	d003      	beq.n	800edce <_scanf_i+0x10e>
 800edc6:	3301      	adds	r3, #1
 800edc8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800edcc:	60a3      	str	r3, [r4, #8]
 800edce:	6873      	ldr	r3, [r6, #4]
 800edd0:	3b01      	subs	r3, #1
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	6073      	str	r3, [r6, #4]
 800edd6:	dd1b      	ble.n	800ee10 <_scanf_i+0x150>
 800edd8:	6833      	ldr	r3, [r6, #0]
 800edda:	3301      	adds	r3, #1
 800eddc:	6033      	str	r3, [r6, #0]
 800edde:	68a3      	ldr	r3, [r4, #8]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	60a3      	str	r3, [r4, #8]
 800ede4:	e7d9      	b.n	800ed9a <_scanf_i+0xda>
 800ede6:	f1bb 0f02 	cmp.w	fp, #2
 800edea:	d1ae      	bne.n	800ed4a <_scanf_i+0x8a>
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800edf2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800edf6:	d1bf      	bne.n	800ed78 <_scanf_i+0xb8>
 800edf8:	2310      	movs	r3, #16
 800edfa:	6063      	str	r3, [r4, #4]
 800edfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee00:	e7a2      	b.n	800ed48 <_scanf_i+0x88>
 800ee02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ee06:	6022      	str	r2, [r4, #0]
 800ee08:	780b      	ldrb	r3, [r1, #0]
 800ee0a:	f805 3b01 	strb.w	r3, [r5], #1
 800ee0e:	e7de      	b.n	800edce <_scanf_i+0x10e>
 800ee10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee14:	4631      	mov	r1, r6
 800ee16:	4650      	mov	r0, sl
 800ee18:	4798      	blx	r3
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d0df      	beq.n	800edde <_scanf_i+0x11e>
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	05db      	lsls	r3, r3, #23
 800ee22:	d50d      	bpl.n	800ee40 <_scanf_i+0x180>
 800ee24:	42bd      	cmp	r5, r7
 800ee26:	d909      	bls.n	800ee3c <_scanf_i+0x17c>
 800ee28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ee2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee30:	4632      	mov	r2, r6
 800ee32:	4650      	mov	r0, sl
 800ee34:	4798      	blx	r3
 800ee36:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ee3a:	464d      	mov	r5, r9
 800ee3c:	42bd      	cmp	r5, r7
 800ee3e:	d02d      	beq.n	800ee9c <_scanf_i+0x1dc>
 800ee40:	6822      	ldr	r2, [r4, #0]
 800ee42:	f012 0210 	ands.w	r2, r2, #16
 800ee46:	d113      	bne.n	800ee70 <_scanf_i+0x1b0>
 800ee48:	702a      	strb	r2, [r5, #0]
 800ee4a:	6863      	ldr	r3, [r4, #4]
 800ee4c:	9e01      	ldr	r6, [sp, #4]
 800ee4e:	4639      	mov	r1, r7
 800ee50:	4650      	mov	r0, sl
 800ee52:	47b0      	blx	r6
 800ee54:	6821      	ldr	r1, [r4, #0]
 800ee56:	f8d8 3000 	ldr.w	r3, [r8]
 800ee5a:	f011 0f20 	tst.w	r1, #32
 800ee5e:	d013      	beq.n	800ee88 <_scanf_i+0x1c8>
 800ee60:	1d1a      	adds	r2, r3, #4
 800ee62:	f8c8 2000 	str.w	r2, [r8]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6018      	str	r0, [r3, #0]
 800ee6a:	68e3      	ldr	r3, [r4, #12]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	60e3      	str	r3, [r4, #12]
 800ee70:	1bed      	subs	r5, r5, r7
 800ee72:	44ab      	add	fp, r5
 800ee74:	6925      	ldr	r5, [r4, #16]
 800ee76:	445d      	add	r5, fp
 800ee78:	6125      	str	r5, [r4, #16]
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	b007      	add	sp, #28
 800ee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee82:	f04f 0b00 	mov.w	fp, #0
 800ee86:	e7ca      	b.n	800ee1e <_scanf_i+0x15e>
 800ee88:	1d1a      	adds	r2, r3, #4
 800ee8a:	f8c8 2000 	str.w	r2, [r8]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f011 0f01 	tst.w	r1, #1
 800ee94:	bf14      	ite	ne
 800ee96:	8018      	strhne	r0, [r3, #0]
 800ee98:	6018      	streq	r0, [r3, #0]
 800ee9a:	e7e6      	b.n	800ee6a <_scanf_i+0x1aa>
 800ee9c:	2001      	movs	r0, #1
 800ee9e:	e7ed      	b.n	800ee7c <_scanf_i+0x1bc>
 800eea0:	0800fc54 	.word	0x0800fc54
 800eea4:	0800f051 	.word	0x0800f051
 800eea8:	0800c865 	.word	0x0800c865
 800eeac:	080102fe 	.word	0x080102fe

0800eeb0 <_read_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	; (800eed0 <_read_r+0x20>)
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	4608      	mov	r0, r1
 800eeb8:	4611      	mov	r1, r2
 800eeba:	2200      	movs	r2, #0
 800eebc:	602a      	str	r2, [r5, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	f7f3 faba 	bl	8002438 <_read>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d102      	bne.n	800eece <_read_r+0x1e>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	b103      	cbz	r3, 800eece <_read_r+0x1e>
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	240004b0 	.word	0x240004b0

0800eed4 <__sccl>:
 800eed4:	b570      	push	{r4, r5, r6, lr}
 800eed6:	780b      	ldrb	r3, [r1, #0]
 800eed8:	4604      	mov	r4, r0
 800eeda:	2b5e      	cmp	r3, #94	; 0x5e
 800eedc:	bf0b      	itete	eq
 800eede:	784b      	ldrbeq	r3, [r1, #1]
 800eee0:	1c48      	addne	r0, r1, #1
 800eee2:	1c88      	addeq	r0, r1, #2
 800eee4:	2200      	movne	r2, #0
 800eee6:	bf08      	it	eq
 800eee8:	2201      	moveq	r2, #1
 800eeea:	1e61      	subs	r1, r4, #1
 800eeec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eef0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800eef4:	42a9      	cmp	r1, r5
 800eef6:	d1fb      	bne.n	800eef0 <__sccl+0x1c>
 800eef8:	b90b      	cbnz	r3, 800eefe <__sccl+0x2a>
 800eefa:	3801      	subs	r0, #1
 800eefc:	bd70      	pop	{r4, r5, r6, pc}
 800eefe:	f082 0201 	eor.w	r2, r2, #1
 800ef02:	54e2      	strb	r2, [r4, r3]
 800ef04:	4605      	mov	r5, r0
 800ef06:	4628      	mov	r0, r5
 800ef08:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ef0c:	292d      	cmp	r1, #45	; 0x2d
 800ef0e:	d006      	beq.n	800ef1e <__sccl+0x4a>
 800ef10:	295d      	cmp	r1, #93	; 0x5d
 800ef12:	d0f3      	beq.n	800eefc <__sccl+0x28>
 800ef14:	b909      	cbnz	r1, 800ef1a <__sccl+0x46>
 800ef16:	4628      	mov	r0, r5
 800ef18:	e7f0      	b.n	800eefc <__sccl+0x28>
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	e7f1      	b.n	800ef02 <__sccl+0x2e>
 800ef1e:	786e      	ldrb	r6, [r5, #1]
 800ef20:	2e5d      	cmp	r6, #93	; 0x5d
 800ef22:	d0fa      	beq.n	800ef1a <__sccl+0x46>
 800ef24:	42b3      	cmp	r3, r6
 800ef26:	dcf8      	bgt.n	800ef1a <__sccl+0x46>
 800ef28:	3502      	adds	r5, #2
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	3101      	adds	r1, #1
 800ef2e:	428e      	cmp	r6, r1
 800ef30:	5462      	strb	r2, [r4, r1]
 800ef32:	dcfb      	bgt.n	800ef2c <__sccl+0x58>
 800ef34:	1af1      	subs	r1, r6, r3
 800ef36:	3901      	subs	r1, #1
 800ef38:	1c58      	adds	r0, r3, #1
 800ef3a:	42b3      	cmp	r3, r6
 800ef3c:	bfa8      	it	ge
 800ef3e:	2100      	movge	r1, #0
 800ef40:	1843      	adds	r3, r0, r1
 800ef42:	e7e0      	b.n	800ef06 <__sccl+0x32>

0800ef44 <strncmp>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	b17a      	cbz	r2, 800ef68 <strncmp+0x24>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	3901      	subs	r1, #1
 800ef4c:	1884      	adds	r4, r0, r2
 800ef4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef56:	4290      	cmp	r0, r2
 800ef58:	d101      	bne.n	800ef5e <strncmp+0x1a>
 800ef5a:	42a3      	cmp	r3, r4
 800ef5c:	d101      	bne.n	800ef62 <strncmp+0x1e>
 800ef5e:	1a80      	subs	r0, r0, r2
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d1f3      	bne.n	800ef4e <strncmp+0xa>
 800ef66:	e7fa      	b.n	800ef5e <strncmp+0x1a>
 800ef68:	4610      	mov	r0, r2
 800ef6a:	e7f9      	b.n	800ef60 <strncmp+0x1c>

0800ef6c <_strtoul_l.constprop.0>:
 800ef6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef70:	4f36      	ldr	r7, [pc, #216]	; (800f04c <_strtoul_l.constprop.0+0xe0>)
 800ef72:	4686      	mov	lr, r0
 800ef74:	460d      	mov	r5, r1
 800ef76:	4628      	mov	r0, r5
 800ef78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef7c:	5de6      	ldrb	r6, [r4, r7]
 800ef7e:	f016 0608 	ands.w	r6, r6, #8
 800ef82:	d1f8      	bne.n	800ef76 <_strtoul_l.constprop.0+0xa>
 800ef84:	2c2d      	cmp	r4, #45	; 0x2d
 800ef86:	d12f      	bne.n	800efe8 <_strtoul_l.constprop.0+0x7c>
 800ef88:	782c      	ldrb	r4, [r5, #0]
 800ef8a:	2601      	movs	r6, #1
 800ef8c:	1c85      	adds	r5, r0, #2
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d057      	beq.n	800f042 <_strtoul_l.constprop.0+0xd6>
 800ef92:	2b10      	cmp	r3, #16
 800ef94:	d109      	bne.n	800efaa <_strtoul_l.constprop.0+0x3e>
 800ef96:	2c30      	cmp	r4, #48	; 0x30
 800ef98:	d107      	bne.n	800efaa <_strtoul_l.constprop.0+0x3e>
 800ef9a:	7828      	ldrb	r0, [r5, #0]
 800ef9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800efa0:	2858      	cmp	r0, #88	; 0x58
 800efa2:	d149      	bne.n	800f038 <_strtoul_l.constprop.0+0xcc>
 800efa4:	786c      	ldrb	r4, [r5, #1]
 800efa6:	2310      	movs	r3, #16
 800efa8:	3502      	adds	r5, #2
 800efaa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800efae:	2700      	movs	r7, #0
 800efb0:	fbb8 f8f3 	udiv	r8, r8, r3
 800efb4:	fb03 f908 	mul.w	r9, r3, r8
 800efb8:	ea6f 0909 	mvn.w	r9, r9
 800efbc:	4638      	mov	r0, r7
 800efbe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800efc2:	f1bc 0f09 	cmp.w	ip, #9
 800efc6:	d814      	bhi.n	800eff2 <_strtoul_l.constprop.0+0x86>
 800efc8:	4664      	mov	r4, ip
 800efca:	42a3      	cmp	r3, r4
 800efcc:	dd22      	ble.n	800f014 <_strtoul_l.constprop.0+0xa8>
 800efce:	2f00      	cmp	r7, #0
 800efd0:	db1d      	blt.n	800f00e <_strtoul_l.constprop.0+0xa2>
 800efd2:	4580      	cmp	r8, r0
 800efd4:	d31b      	bcc.n	800f00e <_strtoul_l.constprop.0+0xa2>
 800efd6:	d101      	bne.n	800efdc <_strtoul_l.constprop.0+0x70>
 800efd8:	45a1      	cmp	r9, r4
 800efda:	db18      	blt.n	800f00e <_strtoul_l.constprop.0+0xa2>
 800efdc:	fb00 4003 	mla	r0, r0, r3, r4
 800efe0:	2701      	movs	r7, #1
 800efe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efe6:	e7ea      	b.n	800efbe <_strtoul_l.constprop.0+0x52>
 800efe8:	2c2b      	cmp	r4, #43	; 0x2b
 800efea:	bf04      	itt	eq
 800efec:	782c      	ldrbeq	r4, [r5, #0]
 800efee:	1c85      	addeq	r5, r0, #2
 800eff0:	e7cd      	b.n	800ef8e <_strtoul_l.constprop.0+0x22>
 800eff2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eff6:	f1bc 0f19 	cmp.w	ip, #25
 800effa:	d801      	bhi.n	800f000 <_strtoul_l.constprop.0+0x94>
 800effc:	3c37      	subs	r4, #55	; 0x37
 800effe:	e7e4      	b.n	800efca <_strtoul_l.constprop.0+0x5e>
 800f000:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f004:	f1bc 0f19 	cmp.w	ip, #25
 800f008:	d804      	bhi.n	800f014 <_strtoul_l.constprop.0+0xa8>
 800f00a:	3c57      	subs	r4, #87	; 0x57
 800f00c:	e7dd      	b.n	800efca <_strtoul_l.constprop.0+0x5e>
 800f00e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f012:	e7e6      	b.n	800efe2 <_strtoul_l.constprop.0+0x76>
 800f014:	2f00      	cmp	r7, #0
 800f016:	da07      	bge.n	800f028 <_strtoul_l.constprop.0+0xbc>
 800f018:	2322      	movs	r3, #34	; 0x22
 800f01a:	f8ce 3000 	str.w	r3, [lr]
 800f01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f022:	b932      	cbnz	r2, 800f032 <_strtoul_l.constprop.0+0xc6>
 800f024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f028:	b106      	cbz	r6, 800f02c <_strtoul_l.constprop.0+0xc0>
 800f02a:	4240      	negs	r0, r0
 800f02c:	2a00      	cmp	r2, #0
 800f02e:	d0f9      	beq.n	800f024 <_strtoul_l.constprop.0+0xb8>
 800f030:	b107      	cbz	r7, 800f034 <_strtoul_l.constprop.0+0xc8>
 800f032:	1e69      	subs	r1, r5, #1
 800f034:	6011      	str	r1, [r2, #0]
 800f036:	e7f5      	b.n	800f024 <_strtoul_l.constprop.0+0xb8>
 800f038:	2430      	movs	r4, #48	; 0x30
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1b5      	bne.n	800efaa <_strtoul_l.constprop.0+0x3e>
 800f03e:	2308      	movs	r3, #8
 800f040:	e7b3      	b.n	800efaa <_strtoul_l.constprop.0+0x3e>
 800f042:	2c30      	cmp	r4, #48	; 0x30
 800f044:	d0a9      	beq.n	800ef9a <_strtoul_l.constprop.0+0x2e>
 800f046:	230a      	movs	r3, #10
 800f048:	e7af      	b.n	800efaa <_strtoul_l.constprop.0+0x3e>
 800f04a:	bf00      	nop
 800f04c:	0800ff71 	.word	0x0800ff71

0800f050 <_strtoul_r>:
 800f050:	f7ff bf8c 	b.w	800ef6c <_strtoul_l.constprop.0>

0800f054 <__submore>:
 800f054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f058:	460c      	mov	r4, r1
 800f05a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f060:	4299      	cmp	r1, r3
 800f062:	d11d      	bne.n	800f0a0 <__submore+0x4c>
 800f064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f068:	f7fb fe3e 	bl	800ace8 <_malloc_r>
 800f06c:	b918      	cbnz	r0, 800f076 <__submore+0x22>
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f07a:	63a3      	str	r3, [r4, #56]	; 0x38
 800f07c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f080:	6360      	str	r0, [r4, #52]	; 0x34
 800f082:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f086:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f08a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f08e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f092:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f096:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f09a:	6020      	str	r0, [r4, #0]
 800f09c:	2000      	movs	r0, #0
 800f09e:	e7e8      	b.n	800f072 <__submore+0x1e>
 800f0a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f0a2:	0077      	lsls	r7, r6, #1
 800f0a4:	463a      	mov	r2, r7
 800f0a6:	f000 fa1e 	bl	800f4e6 <_realloc_r>
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d0de      	beq.n	800f06e <__submore+0x1a>
 800f0b0:	eb00 0806 	add.w	r8, r0, r6
 800f0b4:	4601      	mov	r1, r0
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	f7fe fd8b 	bl	800dbd4 <memcpy>
 800f0be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f0c2:	f8c4 8000 	str.w	r8, [r4]
 800f0c6:	e7e9      	b.n	800f09c <__submore+0x48>

0800f0c8 <__ascii_wctomb>:
 800f0c8:	b149      	cbz	r1, 800f0de <__ascii_wctomb+0x16>
 800f0ca:	2aff      	cmp	r2, #255	; 0xff
 800f0cc:	bf85      	ittet	hi
 800f0ce:	238a      	movhi	r3, #138	; 0x8a
 800f0d0:	6003      	strhi	r3, [r0, #0]
 800f0d2:	700a      	strbls	r2, [r1, #0]
 800f0d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f0d8:	bf98      	it	ls
 800f0da:	2001      	movls	r0, #1
 800f0dc:	4770      	bx	lr
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4770      	bx	lr
	...

0800f0e4 <__assert_func>:
 800f0e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0e6:	4614      	mov	r4, r2
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4b09      	ldr	r3, [pc, #36]	; (800f110 <__assert_func+0x2c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	68d8      	ldr	r0, [r3, #12]
 800f0f2:	b14c      	cbz	r4, 800f108 <__assert_func+0x24>
 800f0f4:	4b07      	ldr	r3, [pc, #28]	; (800f114 <__assert_func+0x30>)
 800f0f6:	9100      	str	r1, [sp, #0]
 800f0f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0fc:	4906      	ldr	r1, [pc, #24]	; (800f118 <__assert_func+0x34>)
 800f0fe:	462b      	mov	r3, r5
 800f100:	f000 f9a6 	bl	800f450 <fiprintf>
 800f104:	f000 fc38 	bl	800f978 <abort>
 800f108:	4b04      	ldr	r3, [pc, #16]	; (800f11c <__assert_func+0x38>)
 800f10a:	461c      	mov	r4, r3
 800f10c:	e7f3      	b.n	800f0f6 <__assert_func+0x12>
 800f10e:	bf00      	nop
 800f110:	24000010 	.word	0x24000010
 800f114:	08010300 	.word	0x08010300
 800f118:	0801030d 	.word	0x0801030d
 800f11c:	0801033b 	.word	0x0801033b

0800f120 <__sflush_r>:
 800f120:	898a      	ldrh	r2, [r1, #12]
 800f122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f126:	4605      	mov	r5, r0
 800f128:	0710      	lsls	r0, r2, #28
 800f12a:	460c      	mov	r4, r1
 800f12c:	d458      	bmi.n	800f1e0 <__sflush_r+0xc0>
 800f12e:	684b      	ldr	r3, [r1, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	dc05      	bgt.n	800f140 <__sflush_r+0x20>
 800f134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f136:	2b00      	cmp	r3, #0
 800f138:	dc02      	bgt.n	800f140 <__sflush_r+0x20>
 800f13a:	2000      	movs	r0, #0
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f142:	2e00      	cmp	r6, #0
 800f144:	d0f9      	beq.n	800f13a <__sflush_r+0x1a>
 800f146:	2300      	movs	r3, #0
 800f148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f14c:	682f      	ldr	r7, [r5, #0]
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	d032      	beq.n	800f1b8 <__sflush_r+0x98>
 800f152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	075a      	lsls	r2, r3, #29
 800f158:	d505      	bpl.n	800f166 <__sflush_r+0x46>
 800f15a:	6863      	ldr	r3, [r4, #4]
 800f15c:	1ac0      	subs	r0, r0, r3
 800f15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f160:	b10b      	cbz	r3, 800f166 <__sflush_r+0x46>
 800f162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f164:	1ac0      	subs	r0, r0, r3
 800f166:	2300      	movs	r3, #0
 800f168:	4602      	mov	r2, r0
 800f16a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f16c:	6a21      	ldr	r1, [r4, #32]
 800f16e:	4628      	mov	r0, r5
 800f170:	47b0      	blx	r6
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	d106      	bne.n	800f186 <__sflush_r+0x66>
 800f178:	6829      	ldr	r1, [r5, #0]
 800f17a:	291d      	cmp	r1, #29
 800f17c:	d82c      	bhi.n	800f1d8 <__sflush_r+0xb8>
 800f17e:	4a2a      	ldr	r2, [pc, #168]	; (800f228 <__sflush_r+0x108>)
 800f180:	40ca      	lsrs	r2, r1
 800f182:	07d6      	lsls	r6, r2, #31
 800f184:	d528      	bpl.n	800f1d8 <__sflush_r+0xb8>
 800f186:	2200      	movs	r2, #0
 800f188:	6062      	str	r2, [r4, #4]
 800f18a:	04d9      	lsls	r1, r3, #19
 800f18c:	6922      	ldr	r2, [r4, #16]
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	d504      	bpl.n	800f19c <__sflush_r+0x7c>
 800f192:	1c42      	adds	r2, r0, #1
 800f194:	d101      	bne.n	800f19a <__sflush_r+0x7a>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b903      	cbnz	r3, 800f19c <__sflush_r+0x7c>
 800f19a:	6560      	str	r0, [r4, #84]	; 0x54
 800f19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f19e:	602f      	str	r7, [r5, #0]
 800f1a0:	2900      	cmp	r1, #0
 800f1a2:	d0ca      	beq.n	800f13a <__sflush_r+0x1a>
 800f1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1a8:	4299      	cmp	r1, r3
 800f1aa:	d002      	beq.n	800f1b2 <__sflush_r+0x92>
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f7fb fd2f 	bl	800ac10 <_free_r>
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800f1b6:	e7c1      	b.n	800f13c <__sflush_r+0x1c>
 800f1b8:	6a21      	ldr	r1, [r4, #32]
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4628      	mov	r0, r5
 800f1be:	47b0      	blx	r6
 800f1c0:	1c41      	adds	r1, r0, #1
 800f1c2:	d1c7      	bne.n	800f154 <__sflush_r+0x34>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d0c4      	beq.n	800f154 <__sflush_r+0x34>
 800f1ca:	2b1d      	cmp	r3, #29
 800f1cc:	d001      	beq.n	800f1d2 <__sflush_r+0xb2>
 800f1ce:	2b16      	cmp	r3, #22
 800f1d0:	d101      	bne.n	800f1d6 <__sflush_r+0xb6>
 800f1d2:	602f      	str	r7, [r5, #0]
 800f1d4:	e7b1      	b.n	800f13a <__sflush_r+0x1a>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	e7ad      	b.n	800f13c <__sflush_r+0x1c>
 800f1e0:	690f      	ldr	r7, [r1, #16]
 800f1e2:	2f00      	cmp	r7, #0
 800f1e4:	d0a9      	beq.n	800f13a <__sflush_r+0x1a>
 800f1e6:	0793      	lsls	r3, r2, #30
 800f1e8:	680e      	ldr	r6, [r1, #0]
 800f1ea:	bf08      	it	eq
 800f1ec:	694b      	ldreq	r3, [r1, #20]
 800f1ee:	600f      	str	r7, [r1, #0]
 800f1f0:	bf18      	it	ne
 800f1f2:	2300      	movne	r3, #0
 800f1f4:	eba6 0807 	sub.w	r8, r6, r7
 800f1f8:	608b      	str	r3, [r1, #8]
 800f1fa:	f1b8 0f00 	cmp.w	r8, #0
 800f1fe:	dd9c      	ble.n	800f13a <__sflush_r+0x1a>
 800f200:	6a21      	ldr	r1, [r4, #32]
 800f202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f204:	4643      	mov	r3, r8
 800f206:	463a      	mov	r2, r7
 800f208:	4628      	mov	r0, r5
 800f20a:	47b0      	blx	r6
 800f20c:	2800      	cmp	r0, #0
 800f20e:	dc06      	bgt.n	800f21e <__sflush_r+0xfe>
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f21c:	e78e      	b.n	800f13c <__sflush_r+0x1c>
 800f21e:	4407      	add	r7, r0
 800f220:	eba8 0800 	sub.w	r8, r8, r0
 800f224:	e7e9      	b.n	800f1fa <__sflush_r+0xda>
 800f226:	bf00      	nop
 800f228:	20400001 	.word	0x20400001

0800f22c <_fflush_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	690b      	ldr	r3, [r1, #16]
 800f230:	4605      	mov	r5, r0
 800f232:	460c      	mov	r4, r1
 800f234:	b913      	cbnz	r3, 800f23c <_fflush_r+0x10>
 800f236:	2500      	movs	r5, #0
 800f238:	4628      	mov	r0, r5
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	b118      	cbz	r0, 800f246 <_fflush_r+0x1a>
 800f23e:	6983      	ldr	r3, [r0, #24]
 800f240:	b90b      	cbnz	r3, 800f246 <_fflush_r+0x1a>
 800f242:	f000 f887 	bl	800f354 <__sinit>
 800f246:	4b14      	ldr	r3, [pc, #80]	; (800f298 <_fflush_r+0x6c>)
 800f248:	429c      	cmp	r4, r3
 800f24a:	d11b      	bne.n	800f284 <_fflush_r+0x58>
 800f24c:	686c      	ldr	r4, [r5, #4]
 800f24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0ef      	beq.n	800f236 <_fflush_r+0xa>
 800f256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f258:	07d0      	lsls	r0, r2, #31
 800f25a:	d404      	bmi.n	800f266 <_fflush_r+0x3a>
 800f25c:	0599      	lsls	r1, r3, #22
 800f25e:	d402      	bmi.n	800f266 <_fflush_r+0x3a>
 800f260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f262:	f7f3 fa52 	bl	800270a <__retarget_lock_acquire_recursive>
 800f266:	4628      	mov	r0, r5
 800f268:	4621      	mov	r1, r4
 800f26a:	f7ff ff59 	bl	800f120 <__sflush_r>
 800f26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f270:	07da      	lsls	r2, r3, #31
 800f272:	4605      	mov	r5, r0
 800f274:	d4e0      	bmi.n	800f238 <_fflush_r+0xc>
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	059b      	lsls	r3, r3, #22
 800f27a:	d4dd      	bmi.n	800f238 <_fflush_r+0xc>
 800f27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f27e:	f7f3 fa58 	bl	8002732 <__retarget_lock_release_recursive>
 800f282:	e7d9      	b.n	800f238 <_fflush_r+0xc>
 800f284:	4b05      	ldr	r3, [pc, #20]	; (800f29c <_fflush_r+0x70>)
 800f286:	429c      	cmp	r4, r3
 800f288:	d101      	bne.n	800f28e <_fflush_r+0x62>
 800f28a:	68ac      	ldr	r4, [r5, #8]
 800f28c:	e7df      	b.n	800f24e <_fflush_r+0x22>
 800f28e:	4b04      	ldr	r3, [pc, #16]	; (800f2a0 <_fflush_r+0x74>)
 800f290:	429c      	cmp	r4, r3
 800f292:	bf08      	it	eq
 800f294:	68ec      	ldreq	r4, [r5, #12]
 800f296:	e7da      	b.n	800f24e <_fflush_r+0x22>
 800f298:	0801035c 	.word	0x0801035c
 800f29c:	0801037c 	.word	0x0801037c
 800f2a0:	0801033c 	.word	0x0801033c

0800f2a4 <std>:
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2b2:	6083      	str	r3, [r0, #8]
 800f2b4:	8181      	strh	r1, [r0, #12]
 800f2b6:	6643      	str	r3, [r0, #100]	; 0x64
 800f2b8:	81c2      	strh	r2, [r0, #14]
 800f2ba:	6183      	str	r3, [r0, #24]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	2208      	movs	r2, #8
 800f2c0:	305c      	adds	r0, #92	; 0x5c
 800f2c2:	f7fb fc9d 	bl	800ac00 <memset>
 800f2c6:	4b05      	ldr	r3, [pc, #20]	; (800f2dc <std+0x38>)
 800f2c8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2ca:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <std+0x3c>)
 800f2cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2ce:	4b05      	ldr	r3, [pc, #20]	; (800f2e4 <std+0x40>)
 800f2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2d2:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <std+0x44>)
 800f2d4:	6224      	str	r4, [r4, #32]
 800f2d6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2d8:	bd10      	pop	{r4, pc}
 800f2da:	bf00      	nop
 800f2dc:	0800bb25 	.word	0x0800bb25
 800f2e0:	0800bb4b 	.word	0x0800bb4b
 800f2e4:	0800bb83 	.word	0x0800bb83
 800f2e8:	0800bba7 	.word	0x0800bba7

0800f2ec <_cleanup_r>:
 800f2ec:	4901      	ldr	r1, [pc, #4]	; (800f2f4 <_cleanup_r+0x8>)
 800f2ee:	f000 b8c1 	b.w	800f474 <_fwalk_reent>
 800f2f2:	bf00      	nop
 800f2f4:	0800f22d 	.word	0x0800f22d

0800f2f8 <__sfmoreglue>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	2268      	movs	r2, #104	; 0x68
 800f2fc:	1e4d      	subs	r5, r1, #1
 800f2fe:	4355      	muls	r5, r2
 800f300:	460e      	mov	r6, r1
 800f302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f306:	f7fb fcef 	bl	800ace8 <_malloc_r>
 800f30a:	4604      	mov	r4, r0
 800f30c:	b140      	cbz	r0, 800f320 <__sfmoreglue+0x28>
 800f30e:	2100      	movs	r1, #0
 800f310:	e9c0 1600 	strd	r1, r6, [r0]
 800f314:	300c      	adds	r0, #12
 800f316:	60a0      	str	r0, [r4, #8]
 800f318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f31c:	f7fb fc70 	bl	800ac00 <memset>
 800f320:	4620      	mov	r0, r4
 800f322:	bd70      	pop	{r4, r5, r6, pc}

0800f324 <__sfp_lock_acquire>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__sfp_lock_acquire+0x8>)
 800f326:	f7f3 b9f0 	b.w	800270a <__retarget_lock_acquire_recursive>
 800f32a:	bf00      	nop
 800f32c:	2400049c 	.word	0x2400049c

0800f330 <__sfp_lock_release>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__sfp_lock_release+0x8>)
 800f332:	f7f3 b9fe 	b.w	8002732 <__retarget_lock_release_recursive>
 800f336:	bf00      	nop
 800f338:	2400049c 	.word	0x2400049c

0800f33c <__sinit_lock_acquire>:
 800f33c:	4801      	ldr	r0, [pc, #4]	; (800f344 <__sinit_lock_acquire+0x8>)
 800f33e:	f7f3 b9e4 	b.w	800270a <__retarget_lock_acquire_recursive>
 800f342:	bf00      	nop
 800f344:	24000498 	.word	0x24000498

0800f348 <__sinit_lock_release>:
 800f348:	4801      	ldr	r0, [pc, #4]	; (800f350 <__sinit_lock_release+0x8>)
 800f34a:	f7f3 b9f2 	b.w	8002732 <__retarget_lock_release_recursive>
 800f34e:	bf00      	nop
 800f350:	24000498 	.word	0x24000498

0800f354 <__sinit>:
 800f354:	b510      	push	{r4, lr}
 800f356:	4604      	mov	r4, r0
 800f358:	f7ff fff0 	bl	800f33c <__sinit_lock_acquire>
 800f35c:	69a3      	ldr	r3, [r4, #24]
 800f35e:	b11b      	cbz	r3, 800f368 <__sinit+0x14>
 800f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f364:	f7ff bff0 	b.w	800f348 <__sinit_lock_release>
 800f368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f36c:	6523      	str	r3, [r4, #80]	; 0x50
 800f36e:	4b13      	ldr	r3, [pc, #76]	; (800f3bc <__sinit+0x68>)
 800f370:	4a13      	ldr	r2, [pc, #76]	; (800f3c0 <__sinit+0x6c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	62a2      	str	r2, [r4, #40]	; 0x28
 800f376:	42a3      	cmp	r3, r4
 800f378:	bf04      	itt	eq
 800f37a:	2301      	moveq	r3, #1
 800f37c:	61a3      	streq	r3, [r4, #24]
 800f37e:	4620      	mov	r0, r4
 800f380:	f000 f820 	bl	800f3c4 <__sfp>
 800f384:	6060      	str	r0, [r4, #4]
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f81c 	bl	800f3c4 <__sfp>
 800f38c:	60a0      	str	r0, [r4, #8]
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 f818 	bl	800f3c4 <__sfp>
 800f394:	2200      	movs	r2, #0
 800f396:	60e0      	str	r0, [r4, #12]
 800f398:	2104      	movs	r1, #4
 800f39a:	6860      	ldr	r0, [r4, #4]
 800f39c:	f7ff ff82 	bl	800f2a4 <std>
 800f3a0:	68a0      	ldr	r0, [r4, #8]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	2109      	movs	r1, #9
 800f3a6:	f7ff ff7d 	bl	800f2a4 <std>
 800f3aa:	68e0      	ldr	r0, [r4, #12]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	2112      	movs	r1, #18
 800f3b0:	f7ff ff78 	bl	800f2a4 <std>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	61a3      	str	r3, [r4, #24]
 800f3b8:	e7d2      	b.n	800f360 <__sinit+0xc>
 800f3ba:	bf00      	nop
 800f3bc:	0800fee0 	.word	0x0800fee0
 800f3c0:	0800f2ed 	.word	0x0800f2ed

0800f3c4 <__sfp>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	4607      	mov	r7, r0
 800f3c8:	f7ff ffac 	bl	800f324 <__sfp_lock_acquire>
 800f3cc:	4b1e      	ldr	r3, [pc, #120]	; (800f448 <__sfp+0x84>)
 800f3ce:	681e      	ldr	r6, [r3, #0]
 800f3d0:	69b3      	ldr	r3, [r6, #24]
 800f3d2:	b913      	cbnz	r3, 800f3da <__sfp+0x16>
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff ffbd 	bl	800f354 <__sinit>
 800f3da:	3648      	adds	r6, #72	; 0x48
 800f3dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	d503      	bpl.n	800f3ec <__sfp+0x28>
 800f3e4:	6833      	ldr	r3, [r6, #0]
 800f3e6:	b30b      	cbz	r3, 800f42c <__sfp+0x68>
 800f3e8:	6836      	ldr	r6, [r6, #0]
 800f3ea:	e7f7      	b.n	800f3dc <__sfp+0x18>
 800f3ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3f0:	b9d5      	cbnz	r5, 800f428 <__sfp+0x64>
 800f3f2:	4b16      	ldr	r3, [pc, #88]	; (800f44c <__sfp+0x88>)
 800f3f4:	60e3      	str	r3, [r4, #12]
 800f3f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3fa:	6665      	str	r5, [r4, #100]	; 0x64
 800f3fc:	f7f3 f95f 	bl	80026be <__retarget_lock_init_recursive>
 800f400:	f7ff ff96 	bl	800f330 <__sfp_lock_release>
 800f404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f40c:	6025      	str	r5, [r4, #0]
 800f40e:	61a5      	str	r5, [r4, #24]
 800f410:	2208      	movs	r2, #8
 800f412:	4629      	mov	r1, r5
 800f414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f418:	f7fb fbf2 	bl	800ac00 <memset>
 800f41c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f424:	4620      	mov	r0, r4
 800f426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f428:	3468      	adds	r4, #104	; 0x68
 800f42a:	e7d9      	b.n	800f3e0 <__sfp+0x1c>
 800f42c:	2104      	movs	r1, #4
 800f42e:	4638      	mov	r0, r7
 800f430:	f7ff ff62 	bl	800f2f8 <__sfmoreglue>
 800f434:	4604      	mov	r4, r0
 800f436:	6030      	str	r0, [r6, #0]
 800f438:	2800      	cmp	r0, #0
 800f43a:	d1d5      	bne.n	800f3e8 <__sfp+0x24>
 800f43c:	f7ff ff78 	bl	800f330 <__sfp_lock_release>
 800f440:	230c      	movs	r3, #12
 800f442:	603b      	str	r3, [r7, #0]
 800f444:	e7ee      	b.n	800f424 <__sfp+0x60>
 800f446:	bf00      	nop
 800f448:	0800fee0 	.word	0x0800fee0
 800f44c:	ffff0001 	.word	0xffff0001

0800f450 <fiprintf>:
 800f450:	b40e      	push	{r1, r2, r3}
 800f452:	b503      	push	{r0, r1, lr}
 800f454:	4601      	mov	r1, r0
 800f456:	ab03      	add	r3, sp, #12
 800f458:	4805      	ldr	r0, [pc, #20]	; (800f470 <fiprintf+0x20>)
 800f45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f45e:	6800      	ldr	r0, [r0, #0]
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	f000 f899 	bl	800f598 <_vfiprintf_r>
 800f466:	b002      	add	sp, #8
 800f468:	f85d eb04 	ldr.w	lr, [sp], #4
 800f46c:	b003      	add	sp, #12
 800f46e:	4770      	bx	lr
 800f470:	24000010 	.word	0x24000010

0800f474 <_fwalk_reent>:
 800f474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f478:	4606      	mov	r6, r0
 800f47a:	4688      	mov	r8, r1
 800f47c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f480:	2700      	movs	r7, #0
 800f482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f486:	f1b9 0901 	subs.w	r9, r9, #1
 800f48a:	d505      	bpl.n	800f498 <_fwalk_reent+0x24>
 800f48c:	6824      	ldr	r4, [r4, #0]
 800f48e:	2c00      	cmp	r4, #0
 800f490:	d1f7      	bne.n	800f482 <_fwalk_reent+0xe>
 800f492:	4638      	mov	r0, r7
 800f494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f498:	89ab      	ldrh	r3, [r5, #12]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d907      	bls.n	800f4ae <_fwalk_reent+0x3a>
 800f49e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	d003      	beq.n	800f4ae <_fwalk_reent+0x3a>
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	47c0      	blx	r8
 800f4ac:	4307      	orrs	r7, r0
 800f4ae:	3568      	adds	r5, #104	; 0x68
 800f4b0:	e7e9      	b.n	800f486 <_fwalk_reent+0x12>

0800f4b2 <memmove>:
 800f4b2:	4288      	cmp	r0, r1
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	eb01 0402 	add.w	r4, r1, r2
 800f4ba:	d902      	bls.n	800f4c2 <memmove+0x10>
 800f4bc:	4284      	cmp	r4, r0
 800f4be:	4623      	mov	r3, r4
 800f4c0:	d807      	bhi.n	800f4d2 <memmove+0x20>
 800f4c2:	1e43      	subs	r3, r0, #1
 800f4c4:	42a1      	cmp	r1, r4
 800f4c6:	d008      	beq.n	800f4da <memmove+0x28>
 800f4c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4d0:	e7f8      	b.n	800f4c4 <memmove+0x12>
 800f4d2:	4402      	add	r2, r0
 800f4d4:	4601      	mov	r1, r0
 800f4d6:	428a      	cmp	r2, r1
 800f4d8:	d100      	bne.n	800f4dc <memmove+0x2a>
 800f4da:	bd10      	pop	{r4, pc}
 800f4dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4e4:	e7f7      	b.n	800f4d6 <memmove+0x24>

0800f4e6 <_realloc_r>:
 800f4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ea:	4680      	mov	r8, r0
 800f4ec:	4614      	mov	r4, r2
 800f4ee:	460e      	mov	r6, r1
 800f4f0:	b921      	cbnz	r1, 800f4fc <_realloc_r+0x16>
 800f4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	f7fb bbf6 	b.w	800ace8 <_malloc_r>
 800f4fc:	b92a      	cbnz	r2, 800f50a <_realloc_r+0x24>
 800f4fe:	f7fb fb87 	bl	800ac10 <_free_r>
 800f502:	4625      	mov	r5, r4
 800f504:	4628      	mov	r0, r5
 800f506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50a:	f000 faa1 	bl	800fa50 <_malloc_usable_size_r>
 800f50e:	4284      	cmp	r4, r0
 800f510:	4607      	mov	r7, r0
 800f512:	d802      	bhi.n	800f51a <_realloc_r+0x34>
 800f514:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f518:	d812      	bhi.n	800f540 <_realloc_r+0x5a>
 800f51a:	4621      	mov	r1, r4
 800f51c:	4640      	mov	r0, r8
 800f51e:	f7fb fbe3 	bl	800ace8 <_malloc_r>
 800f522:	4605      	mov	r5, r0
 800f524:	2800      	cmp	r0, #0
 800f526:	d0ed      	beq.n	800f504 <_realloc_r+0x1e>
 800f528:	42bc      	cmp	r4, r7
 800f52a:	4622      	mov	r2, r4
 800f52c:	4631      	mov	r1, r6
 800f52e:	bf28      	it	cs
 800f530:	463a      	movcs	r2, r7
 800f532:	f7fe fb4f 	bl	800dbd4 <memcpy>
 800f536:	4631      	mov	r1, r6
 800f538:	4640      	mov	r0, r8
 800f53a:	f7fb fb69 	bl	800ac10 <_free_r>
 800f53e:	e7e1      	b.n	800f504 <_realloc_r+0x1e>
 800f540:	4635      	mov	r5, r6
 800f542:	e7df      	b.n	800f504 <_realloc_r+0x1e>

0800f544 <__sfputc_r>:
 800f544:	6893      	ldr	r3, [r2, #8]
 800f546:	3b01      	subs	r3, #1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	b410      	push	{r4}
 800f54c:	6093      	str	r3, [r2, #8]
 800f54e:	da08      	bge.n	800f562 <__sfputc_r+0x1e>
 800f550:	6994      	ldr	r4, [r2, #24]
 800f552:	42a3      	cmp	r3, r4
 800f554:	db01      	blt.n	800f55a <__sfputc_r+0x16>
 800f556:	290a      	cmp	r1, #10
 800f558:	d103      	bne.n	800f562 <__sfputc_r+0x1e>
 800f55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f55e:	f000 b94b 	b.w	800f7f8 <__swbuf_r>
 800f562:	6813      	ldr	r3, [r2, #0]
 800f564:	1c58      	adds	r0, r3, #1
 800f566:	6010      	str	r0, [r2, #0]
 800f568:	7019      	strb	r1, [r3, #0]
 800f56a:	4608      	mov	r0, r1
 800f56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <__sfputs_r>:
 800f572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f574:	4606      	mov	r6, r0
 800f576:	460f      	mov	r7, r1
 800f578:	4614      	mov	r4, r2
 800f57a:	18d5      	adds	r5, r2, r3
 800f57c:	42ac      	cmp	r4, r5
 800f57e:	d101      	bne.n	800f584 <__sfputs_r+0x12>
 800f580:	2000      	movs	r0, #0
 800f582:	e007      	b.n	800f594 <__sfputs_r+0x22>
 800f584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f588:	463a      	mov	r2, r7
 800f58a:	4630      	mov	r0, r6
 800f58c:	f7ff ffda 	bl	800f544 <__sfputc_r>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d1f3      	bne.n	800f57c <__sfputs_r+0xa>
 800f594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f598 <_vfiprintf_r>:
 800f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59c:	460d      	mov	r5, r1
 800f59e:	b09d      	sub	sp, #116	; 0x74
 800f5a0:	4614      	mov	r4, r2
 800f5a2:	4698      	mov	r8, r3
 800f5a4:	4606      	mov	r6, r0
 800f5a6:	b118      	cbz	r0, 800f5b0 <_vfiprintf_r+0x18>
 800f5a8:	6983      	ldr	r3, [r0, #24]
 800f5aa:	b90b      	cbnz	r3, 800f5b0 <_vfiprintf_r+0x18>
 800f5ac:	f7ff fed2 	bl	800f354 <__sinit>
 800f5b0:	4b89      	ldr	r3, [pc, #548]	; (800f7d8 <_vfiprintf_r+0x240>)
 800f5b2:	429d      	cmp	r5, r3
 800f5b4:	d11b      	bne.n	800f5ee <_vfiprintf_r+0x56>
 800f5b6:	6875      	ldr	r5, [r6, #4]
 800f5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5ba:	07d9      	lsls	r1, r3, #31
 800f5bc:	d405      	bmi.n	800f5ca <_vfiprintf_r+0x32>
 800f5be:	89ab      	ldrh	r3, [r5, #12]
 800f5c0:	059a      	lsls	r2, r3, #22
 800f5c2:	d402      	bmi.n	800f5ca <_vfiprintf_r+0x32>
 800f5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5c6:	f7f3 f8a0 	bl	800270a <__retarget_lock_acquire_recursive>
 800f5ca:	89ab      	ldrh	r3, [r5, #12]
 800f5cc:	071b      	lsls	r3, r3, #28
 800f5ce:	d501      	bpl.n	800f5d4 <_vfiprintf_r+0x3c>
 800f5d0:	692b      	ldr	r3, [r5, #16]
 800f5d2:	b9eb      	cbnz	r3, 800f610 <_vfiprintf_r+0x78>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	f000 f960 	bl	800f89c <__swsetup_r>
 800f5dc:	b1c0      	cbz	r0, 800f610 <_vfiprintf_r+0x78>
 800f5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5e0:	07dc      	lsls	r4, r3, #31
 800f5e2:	d50e      	bpl.n	800f602 <_vfiprintf_r+0x6a>
 800f5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5e8:	b01d      	add	sp, #116	; 0x74
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ee:	4b7b      	ldr	r3, [pc, #492]	; (800f7dc <_vfiprintf_r+0x244>)
 800f5f0:	429d      	cmp	r5, r3
 800f5f2:	d101      	bne.n	800f5f8 <_vfiprintf_r+0x60>
 800f5f4:	68b5      	ldr	r5, [r6, #8]
 800f5f6:	e7df      	b.n	800f5b8 <_vfiprintf_r+0x20>
 800f5f8:	4b79      	ldr	r3, [pc, #484]	; (800f7e0 <_vfiprintf_r+0x248>)
 800f5fa:	429d      	cmp	r5, r3
 800f5fc:	bf08      	it	eq
 800f5fe:	68f5      	ldreq	r5, [r6, #12]
 800f600:	e7da      	b.n	800f5b8 <_vfiprintf_r+0x20>
 800f602:	89ab      	ldrh	r3, [r5, #12]
 800f604:	0598      	lsls	r0, r3, #22
 800f606:	d4ed      	bmi.n	800f5e4 <_vfiprintf_r+0x4c>
 800f608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f60a:	f7f3 f892 	bl	8002732 <__retarget_lock_release_recursive>
 800f60e:	e7e9      	b.n	800f5e4 <_vfiprintf_r+0x4c>
 800f610:	2300      	movs	r3, #0
 800f612:	9309      	str	r3, [sp, #36]	; 0x24
 800f614:	2320      	movs	r3, #32
 800f616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f61e:	2330      	movs	r3, #48	; 0x30
 800f620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f7e4 <_vfiprintf_r+0x24c>
 800f624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f628:	f04f 0901 	mov.w	r9, #1
 800f62c:	4623      	mov	r3, r4
 800f62e:	469a      	mov	sl, r3
 800f630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f634:	b10a      	cbz	r2, 800f63a <_vfiprintf_r+0xa2>
 800f636:	2a25      	cmp	r2, #37	; 0x25
 800f638:	d1f9      	bne.n	800f62e <_vfiprintf_r+0x96>
 800f63a:	ebba 0b04 	subs.w	fp, sl, r4
 800f63e:	d00b      	beq.n	800f658 <_vfiprintf_r+0xc0>
 800f640:	465b      	mov	r3, fp
 800f642:	4622      	mov	r2, r4
 800f644:	4629      	mov	r1, r5
 800f646:	4630      	mov	r0, r6
 800f648:	f7ff ff93 	bl	800f572 <__sfputs_r>
 800f64c:	3001      	adds	r0, #1
 800f64e:	f000 80aa 	beq.w	800f7a6 <_vfiprintf_r+0x20e>
 800f652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f654:	445a      	add	r2, fp
 800f656:	9209      	str	r2, [sp, #36]	; 0x24
 800f658:	f89a 3000 	ldrb.w	r3, [sl]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 80a2 	beq.w	800f7a6 <_vfiprintf_r+0x20e>
 800f662:	2300      	movs	r3, #0
 800f664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f66c:	f10a 0a01 	add.w	sl, sl, #1
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	9307      	str	r3, [sp, #28]
 800f674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f678:	931a      	str	r3, [sp, #104]	; 0x68
 800f67a:	4654      	mov	r4, sl
 800f67c:	2205      	movs	r2, #5
 800f67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f682:	4858      	ldr	r0, [pc, #352]	; (800f7e4 <_vfiprintf_r+0x24c>)
 800f684:	f7f0 fe34 	bl	80002f0 <memchr>
 800f688:	9a04      	ldr	r2, [sp, #16]
 800f68a:	b9d8      	cbnz	r0, 800f6c4 <_vfiprintf_r+0x12c>
 800f68c:	06d1      	lsls	r1, r2, #27
 800f68e:	bf44      	itt	mi
 800f690:	2320      	movmi	r3, #32
 800f692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f696:	0713      	lsls	r3, r2, #28
 800f698:	bf44      	itt	mi
 800f69a:	232b      	movmi	r3, #43	; 0x2b
 800f69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a6:	d015      	beq.n	800f6d4 <_vfiprintf_r+0x13c>
 800f6a8:	9a07      	ldr	r2, [sp, #28]
 800f6aa:	4654      	mov	r4, sl
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	f04f 0c0a 	mov.w	ip, #10
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6b8:	3b30      	subs	r3, #48	; 0x30
 800f6ba:	2b09      	cmp	r3, #9
 800f6bc:	d94e      	bls.n	800f75c <_vfiprintf_r+0x1c4>
 800f6be:	b1b0      	cbz	r0, 800f6ee <_vfiprintf_r+0x156>
 800f6c0:	9207      	str	r2, [sp, #28]
 800f6c2:	e014      	b.n	800f6ee <_vfiprintf_r+0x156>
 800f6c4:	eba0 0308 	sub.w	r3, r0, r8
 800f6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	46a2      	mov	sl, r4
 800f6d2:	e7d2      	b.n	800f67a <_vfiprintf_r+0xe2>
 800f6d4:	9b03      	ldr	r3, [sp, #12]
 800f6d6:	1d19      	adds	r1, r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	9103      	str	r1, [sp, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfbb      	ittet	lt
 800f6e0:	425b      	neglt	r3, r3
 800f6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f6e6:	9307      	strge	r3, [sp, #28]
 800f6e8:	9307      	strlt	r3, [sp, #28]
 800f6ea:	bfb8      	it	lt
 800f6ec:	9204      	strlt	r2, [sp, #16]
 800f6ee:	7823      	ldrb	r3, [r4, #0]
 800f6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f6f2:	d10c      	bne.n	800f70e <_vfiprintf_r+0x176>
 800f6f4:	7863      	ldrb	r3, [r4, #1]
 800f6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6f8:	d135      	bne.n	800f766 <_vfiprintf_r+0x1ce>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	1d1a      	adds	r2, r3, #4
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	9203      	str	r2, [sp, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	bfb8      	it	lt
 800f706:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f70a:	3402      	adds	r4, #2
 800f70c:	9305      	str	r3, [sp, #20]
 800f70e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f7f4 <_vfiprintf_r+0x25c>
 800f712:	7821      	ldrb	r1, [r4, #0]
 800f714:	2203      	movs	r2, #3
 800f716:	4650      	mov	r0, sl
 800f718:	f7f0 fdea 	bl	80002f0 <memchr>
 800f71c:	b140      	cbz	r0, 800f730 <_vfiprintf_r+0x198>
 800f71e:	2340      	movs	r3, #64	; 0x40
 800f720:	eba0 000a 	sub.w	r0, r0, sl
 800f724:	fa03 f000 	lsl.w	r0, r3, r0
 800f728:	9b04      	ldr	r3, [sp, #16]
 800f72a:	4303      	orrs	r3, r0
 800f72c:	3401      	adds	r4, #1
 800f72e:	9304      	str	r3, [sp, #16]
 800f730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f734:	482c      	ldr	r0, [pc, #176]	; (800f7e8 <_vfiprintf_r+0x250>)
 800f736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f73a:	2206      	movs	r2, #6
 800f73c:	f7f0 fdd8 	bl	80002f0 <memchr>
 800f740:	2800      	cmp	r0, #0
 800f742:	d03f      	beq.n	800f7c4 <_vfiprintf_r+0x22c>
 800f744:	4b29      	ldr	r3, [pc, #164]	; (800f7ec <_vfiprintf_r+0x254>)
 800f746:	bb1b      	cbnz	r3, 800f790 <_vfiprintf_r+0x1f8>
 800f748:	9b03      	ldr	r3, [sp, #12]
 800f74a:	3307      	adds	r3, #7
 800f74c:	f023 0307 	bic.w	r3, r3, #7
 800f750:	3308      	adds	r3, #8
 800f752:	9303      	str	r3, [sp, #12]
 800f754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f756:	443b      	add	r3, r7
 800f758:	9309      	str	r3, [sp, #36]	; 0x24
 800f75a:	e767      	b.n	800f62c <_vfiprintf_r+0x94>
 800f75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f760:	460c      	mov	r4, r1
 800f762:	2001      	movs	r0, #1
 800f764:	e7a5      	b.n	800f6b2 <_vfiprintf_r+0x11a>
 800f766:	2300      	movs	r3, #0
 800f768:	3401      	adds	r4, #1
 800f76a:	9305      	str	r3, [sp, #20]
 800f76c:	4619      	mov	r1, r3
 800f76e:	f04f 0c0a 	mov.w	ip, #10
 800f772:	4620      	mov	r0, r4
 800f774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f778:	3a30      	subs	r2, #48	; 0x30
 800f77a:	2a09      	cmp	r2, #9
 800f77c:	d903      	bls.n	800f786 <_vfiprintf_r+0x1ee>
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d0c5      	beq.n	800f70e <_vfiprintf_r+0x176>
 800f782:	9105      	str	r1, [sp, #20]
 800f784:	e7c3      	b.n	800f70e <_vfiprintf_r+0x176>
 800f786:	fb0c 2101 	mla	r1, ip, r1, r2
 800f78a:	4604      	mov	r4, r0
 800f78c:	2301      	movs	r3, #1
 800f78e:	e7f0      	b.n	800f772 <_vfiprintf_r+0x1da>
 800f790:	ab03      	add	r3, sp, #12
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	462a      	mov	r2, r5
 800f796:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <_vfiprintf_r+0x258>)
 800f798:	a904      	add	r1, sp, #16
 800f79a:	4630      	mov	r0, r6
 800f79c:	f7fb fba8 	bl	800aef0 <_printf_float>
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	1c78      	adds	r0, r7, #1
 800f7a4:	d1d6      	bne.n	800f754 <_vfiprintf_r+0x1bc>
 800f7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7a8:	07d9      	lsls	r1, r3, #31
 800f7aa:	d405      	bmi.n	800f7b8 <_vfiprintf_r+0x220>
 800f7ac:	89ab      	ldrh	r3, [r5, #12]
 800f7ae:	059a      	lsls	r2, r3, #22
 800f7b0:	d402      	bmi.n	800f7b8 <_vfiprintf_r+0x220>
 800f7b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7b4:	f7f2 ffbd 	bl	8002732 <__retarget_lock_release_recursive>
 800f7b8:	89ab      	ldrh	r3, [r5, #12]
 800f7ba:	065b      	lsls	r3, r3, #25
 800f7bc:	f53f af12 	bmi.w	800f5e4 <_vfiprintf_r+0x4c>
 800f7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7c2:	e711      	b.n	800f5e8 <_vfiprintf_r+0x50>
 800f7c4:	ab03      	add	r3, sp, #12
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	462a      	mov	r2, r5
 800f7ca:	4b09      	ldr	r3, [pc, #36]	; (800f7f0 <_vfiprintf_r+0x258>)
 800f7cc:	a904      	add	r1, sp, #16
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f7fb fe1a 	bl	800b408 <_printf_i>
 800f7d4:	e7e4      	b.n	800f7a0 <_vfiprintf_r+0x208>
 800f7d6:	bf00      	nop
 800f7d8:	0801035c 	.word	0x0801035c
 800f7dc:	0801037c 	.word	0x0801037c
 800f7e0:	0801033c 	.word	0x0801033c
 800f7e4:	080102d4 	.word	0x080102d4
 800f7e8:	080102de 	.word	0x080102de
 800f7ec:	0800aef1 	.word	0x0800aef1
 800f7f0:	0800f573 	.word	0x0800f573
 800f7f4:	080102da 	.word	0x080102da

0800f7f8 <__swbuf_r>:
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	460e      	mov	r6, r1
 800f7fc:	4614      	mov	r4, r2
 800f7fe:	4605      	mov	r5, r0
 800f800:	b118      	cbz	r0, 800f80a <__swbuf_r+0x12>
 800f802:	6983      	ldr	r3, [r0, #24]
 800f804:	b90b      	cbnz	r3, 800f80a <__swbuf_r+0x12>
 800f806:	f7ff fda5 	bl	800f354 <__sinit>
 800f80a:	4b21      	ldr	r3, [pc, #132]	; (800f890 <__swbuf_r+0x98>)
 800f80c:	429c      	cmp	r4, r3
 800f80e:	d12b      	bne.n	800f868 <__swbuf_r+0x70>
 800f810:	686c      	ldr	r4, [r5, #4]
 800f812:	69a3      	ldr	r3, [r4, #24]
 800f814:	60a3      	str	r3, [r4, #8]
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	071a      	lsls	r2, r3, #28
 800f81a:	d52f      	bpl.n	800f87c <__swbuf_r+0x84>
 800f81c:	6923      	ldr	r3, [r4, #16]
 800f81e:	b36b      	cbz	r3, 800f87c <__swbuf_r+0x84>
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	6820      	ldr	r0, [r4, #0]
 800f824:	1ac0      	subs	r0, r0, r3
 800f826:	6963      	ldr	r3, [r4, #20]
 800f828:	b2f6      	uxtb	r6, r6
 800f82a:	4283      	cmp	r3, r0
 800f82c:	4637      	mov	r7, r6
 800f82e:	dc04      	bgt.n	800f83a <__swbuf_r+0x42>
 800f830:	4621      	mov	r1, r4
 800f832:	4628      	mov	r0, r5
 800f834:	f7ff fcfa 	bl	800f22c <_fflush_r>
 800f838:	bb30      	cbnz	r0, 800f888 <__swbuf_r+0x90>
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	60a3      	str	r3, [r4, #8]
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	6022      	str	r2, [r4, #0]
 800f846:	701e      	strb	r6, [r3, #0]
 800f848:	6963      	ldr	r3, [r4, #20]
 800f84a:	3001      	adds	r0, #1
 800f84c:	4283      	cmp	r3, r0
 800f84e:	d004      	beq.n	800f85a <__swbuf_r+0x62>
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	07db      	lsls	r3, r3, #31
 800f854:	d506      	bpl.n	800f864 <__swbuf_r+0x6c>
 800f856:	2e0a      	cmp	r6, #10
 800f858:	d104      	bne.n	800f864 <__swbuf_r+0x6c>
 800f85a:	4621      	mov	r1, r4
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7ff fce5 	bl	800f22c <_fflush_r>
 800f862:	b988      	cbnz	r0, 800f888 <__swbuf_r+0x90>
 800f864:	4638      	mov	r0, r7
 800f866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f868:	4b0a      	ldr	r3, [pc, #40]	; (800f894 <__swbuf_r+0x9c>)
 800f86a:	429c      	cmp	r4, r3
 800f86c:	d101      	bne.n	800f872 <__swbuf_r+0x7a>
 800f86e:	68ac      	ldr	r4, [r5, #8]
 800f870:	e7cf      	b.n	800f812 <__swbuf_r+0x1a>
 800f872:	4b09      	ldr	r3, [pc, #36]	; (800f898 <__swbuf_r+0xa0>)
 800f874:	429c      	cmp	r4, r3
 800f876:	bf08      	it	eq
 800f878:	68ec      	ldreq	r4, [r5, #12]
 800f87a:	e7ca      	b.n	800f812 <__swbuf_r+0x1a>
 800f87c:	4621      	mov	r1, r4
 800f87e:	4628      	mov	r0, r5
 800f880:	f000 f80c 	bl	800f89c <__swsetup_r>
 800f884:	2800      	cmp	r0, #0
 800f886:	d0cb      	beq.n	800f820 <__swbuf_r+0x28>
 800f888:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f88c:	e7ea      	b.n	800f864 <__swbuf_r+0x6c>
 800f88e:	bf00      	nop
 800f890:	0801035c 	.word	0x0801035c
 800f894:	0801037c 	.word	0x0801037c
 800f898:	0801033c 	.word	0x0801033c

0800f89c <__swsetup_r>:
 800f89c:	4b32      	ldr	r3, [pc, #200]	; (800f968 <__swsetup_r+0xcc>)
 800f89e:	b570      	push	{r4, r5, r6, lr}
 800f8a0:	681d      	ldr	r5, [r3, #0]
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	b125      	cbz	r5, 800f8b2 <__swsetup_r+0x16>
 800f8a8:	69ab      	ldr	r3, [r5, #24]
 800f8aa:	b913      	cbnz	r3, 800f8b2 <__swsetup_r+0x16>
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f7ff fd51 	bl	800f354 <__sinit>
 800f8b2:	4b2e      	ldr	r3, [pc, #184]	; (800f96c <__swsetup_r+0xd0>)
 800f8b4:	429c      	cmp	r4, r3
 800f8b6:	d10f      	bne.n	800f8d8 <__swsetup_r+0x3c>
 800f8b8:	686c      	ldr	r4, [r5, #4]
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8c0:	0719      	lsls	r1, r3, #28
 800f8c2:	d42c      	bmi.n	800f91e <__swsetup_r+0x82>
 800f8c4:	06dd      	lsls	r5, r3, #27
 800f8c6:	d411      	bmi.n	800f8ec <__swsetup_r+0x50>
 800f8c8:	2309      	movs	r3, #9
 800f8ca:	6033      	str	r3, [r6, #0]
 800f8cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f8d0:	81a3      	strh	r3, [r4, #12]
 800f8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8d6:	e03e      	b.n	800f956 <__swsetup_r+0xba>
 800f8d8:	4b25      	ldr	r3, [pc, #148]	; (800f970 <__swsetup_r+0xd4>)
 800f8da:	429c      	cmp	r4, r3
 800f8dc:	d101      	bne.n	800f8e2 <__swsetup_r+0x46>
 800f8de:	68ac      	ldr	r4, [r5, #8]
 800f8e0:	e7eb      	b.n	800f8ba <__swsetup_r+0x1e>
 800f8e2:	4b24      	ldr	r3, [pc, #144]	; (800f974 <__swsetup_r+0xd8>)
 800f8e4:	429c      	cmp	r4, r3
 800f8e6:	bf08      	it	eq
 800f8e8:	68ec      	ldreq	r4, [r5, #12]
 800f8ea:	e7e6      	b.n	800f8ba <__swsetup_r+0x1e>
 800f8ec:	0758      	lsls	r0, r3, #29
 800f8ee:	d512      	bpl.n	800f916 <__swsetup_r+0x7a>
 800f8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8f2:	b141      	cbz	r1, 800f906 <__swsetup_r+0x6a>
 800f8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8f8:	4299      	cmp	r1, r3
 800f8fa:	d002      	beq.n	800f902 <__swsetup_r+0x66>
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f7fb f987 	bl	800ac10 <_free_r>
 800f902:	2300      	movs	r3, #0
 800f904:	6363      	str	r3, [r4, #52]	; 0x34
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f90c:	81a3      	strh	r3, [r4, #12]
 800f90e:	2300      	movs	r3, #0
 800f910:	6063      	str	r3, [r4, #4]
 800f912:	6923      	ldr	r3, [r4, #16]
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	89a3      	ldrh	r3, [r4, #12]
 800f918:	f043 0308 	orr.w	r3, r3, #8
 800f91c:	81a3      	strh	r3, [r4, #12]
 800f91e:	6923      	ldr	r3, [r4, #16]
 800f920:	b94b      	cbnz	r3, 800f936 <__swsetup_r+0x9a>
 800f922:	89a3      	ldrh	r3, [r4, #12]
 800f924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f92c:	d003      	beq.n	800f936 <__swsetup_r+0x9a>
 800f92e:	4621      	mov	r1, r4
 800f930:	4630      	mov	r0, r6
 800f932:	f000 f84d 	bl	800f9d0 <__smakebuf_r>
 800f936:	89a0      	ldrh	r0, [r4, #12]
 800f938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f93c:	f010 0301 	ands.w	r3, r0, #1
 800f940:	d00a      	beq.n	800f958 <__swsetup_r+0xbc>
 800f942:	2300      	movs	r3, #0
 800f944:	60a3      	str	r3, [r4, #8]
 800f946:	6963      	ldr	r3, [r4, #20]
 800f948:	425b      	negs	r3, r3
 800f94a:	61a3      	str	r3, [r4, #24]
 800f94c:	6923      	ldr	r3, [r4, #16]
 800f94e:	b943      	cbnz	r3, 800f962 <__swsetup_r+0xc6>
 800f950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f954:	d1ba      	bne.n	800f8cc <__swsetup_r+0x30>
 800f956:	bd70      	pop	{r4, r5, r6, pc}
 800f958:	0781      	lsls	r1, r0, #30
 800f95a:	bf58      	it	pl
 800f95c:	6963      	ldrpl	r3, [r4, #20]
 800f95e:	60a3      	str	r3, [r4, #8]
 800f960:	e7f4      	b.n	800f94c <__swsetup_r+0xb0>
 800f962:	2000      	movs	r0, #0
 800f964:	e7f7      	b.n	800f956 <__swsetup_r+0xba>
 800f966:	bf00      	nop
 800f968:	24000010 	.word	0x24000010
 800f96c:	0801035c 	.word	0x0801035c
 800f970:	0801037c 	.word	0x0801037c
 800f974:	0801033c 	.word	0x0801033c

0800f978 <abort>:
 800f978:	b508      	push	{r3, lr}
 800f97a:	2006      	movs	r0, #6
 800f97c:	f000 f898 	bl	800fab0 <raise>
 800f980:	2001      	movs	r0, #1
 800f982:	f7f2 fd4f 	bl	8002424 <_exit>

0800f986 <__swhatbuf_r>:
 800f986:	b570      	push	{r4, r5, r6, lr}
 800f988:	460e      	mov	r6, r1
 800f98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f98e:	2900      	cmp	r1, #0
 800f990:	b096      	sub	sp, #88	; 0x58
 800f992:	4614      	mov	r4, r2
 800f994:	461d      	mov	r5, r3
 800f996:	da08      	bge.n	800f9aa <__swhatbuf_r+0x24>
 800f998:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f99c:	2200      	movs	r2, #0
 800f99e:	602a      	str	r2, [r5, #0]
 800f9a0:	061a      	lsls	r2, r3, #24
 800f9a2:	d410      	bmi.n	800f9c6 <__swhatbuf_r+0x40>
 800f9a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9a8:	e00e      	b.n	800f9c8 <__swhatbuf_r+0x42>
 800f9aa:	466a      	mov	r2, sp
 800f9ac:	f000 f89c 	bl	800fae8 <_fstat_r>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	dbf1      	blt.n	800f998 <__swhatbuf_r+0x12>
 800f9b4:	9a01      	ldr	r2, [sp, #4]
 800f9b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9be:	425a      	negs	r2, r3
 800f9c0:	415a      	adcs	r2, r3
 800f9c2:	602a      	str	r2, [r5, #0]
 800f9c4:	e7ee      	b.n	800f9a4 <__swhatbuf_r+0x1e>
 800f9c6:	2340      	movs	r3, #64	; 0x40
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	b016      	add	sp, #88	; 0x58
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}

0800f9d0 <__smakebuf_r>:
 800f9d0:	898b      	ldrh	r3, [r1, #12]
 800f9d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9d4:	079d      	lsls	r5, r3, #30
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	d507      	bpl.n	800f9ec <__smakebuf_r+0x1c>
 800f9dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	6123      	str	r3, [r4, #16]
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	6163      	str	r3, [r4, #20]
 800f9e8:	b002      	add	sp, #8
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	ab01      	add	r3, sp, #4
 800f9ee:	466a      	mov	r2, sp
 800f9f0:	f7ff ffc9 	bl	800f986 <__swhatbuf_r>
 800f9f4:	9900      	ldr	r1, [sp, #0]
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7fb f975 	bl	800ace8 <_malloc_r>
 800f9fe:	b948      	cbnz	r0, 800fa14 <__smakebuf_r+0x44>
 800fa00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa04:	059a      	lsls	r2, r3, #22
 800fa06:	d4ef      	bmi.n	800f9e8 <__smakebuf_r+0x18>
 800fa08:	f023 0303 	bic.w	r3, r3, #3
 800fa0c:	f043 0302 	orr.w	r3, r3, #2
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	e7e3      	b.n	800f9dc <__smakebuf_r+0xc>
 800fa14:	4b0d      	ldr	r3, [pc, #52]	; (800fa4c <__smakebuf_r+0x7c>)
 800fa16:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	6020      	str	r0, [r4, #0]
 800fa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa20:	81a3      	strh	r3, [r4, #12]
 800fa22:	9b00      	ldr	r3, [sp, #0]
 800fa24:	6163      	str	r3, [r4, #20]
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	6120      	str	r0, [r4, #16]
 800fa2a:	b15b      	cbz	r3, 800fa44 <__smakebuf_r+0x74>
 800fa2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa30:	4630      	mov	r0, r6
 800fa32:	f000 f86b 	bl	800fb0c <_isatty_r>
 800fa36:	b128      	cbz	r0, 800fa44 <__smakebuf_r+0x74>
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	f023 0303 	bic.w	r3, r3, #3
 800fa3e:	f043 0301 	orr.w	r3, r3, #1
 800fa42:	81a3      	strh	r3, [r4, #12]
 800fa44:	89a0      	ldrh	r0, [r4, #12]
 800fa46:	4305      	orrs	r5, r0
 800fa48:	81a5      	strh	r5, [r4, #12]
 800fa4a:	e7cd      	b.n	800f9e8 <__smakebuf_r+0x18>
 800fa4c:	0800f2ed 	.word	0x0800f2ed

0800fa50 <_malloc_usable_size_r>:
 800fa50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa54:	1f18      	subs	r0, r3, #4
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	bfbc      	itt	lt
 800fa5a:	580b      	ldrlt	r3, [r1, r0]
 800fa5c:	18c0      	addlt	r0, r0, r3
 800fa5e:	4770      	bx	lr

0800fa60 <_raise_r>:
 800fa60:	291f      	cmp	r1, #31
 800fa62:	b538      	push	{r3, r4, r5, lr}
 800fa64:	4604      	mov	r4, r0
 800fa66:	460d      	mov	r5, r1
 800fa68:	d904      	bls.n	800fa74 <_raise_r+0x14>
 800fa6a:	2316      	movs	r3, #22
 800fa6c:	6003      	str	r3, [r0, #0]
 800fa6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa72:	bd38      	pop	{r3, r4, r5, pc}
 800fa74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa76:	b112      	cbz	r2, 800fa7e <_raise_r+0x1e>
 800fa78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa7c:	b94b      	cbnz	r3, 800fa92 <_raise_r+0x32>
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f000 f830 	bl	800fae4 <_getpid_r>
 800fa84:	462a      	mov	r2, r5
 800fa86:	4601      	mov	r1, r0
 800fa88:	4620      	mov	r0, r4
 800fa8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa8e:	f000 b817 	b.w	800fac0 <_kill_r>
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d00a      	beq.n	800faac <_raise_r+0x4c>
 800fa96:	1c59      	adds	r1, r3, #1
 800fa98:	d103      	bne.n	800faa2 <_raise_r+0x42>
 800fa9a:	2316      	movs	r3, #22
 800fa9c:	6003      	str	r3, [r0, #0]
 800fa9e:	2001      	movs	r0, #1
 800faa0:	e7e7      	b.n	800fa72 <_raise_r+0x12>
 800faa2:	2400      	movs	r4, #0
 800faa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faa8:	4628      	mov	r0, r5
 800faaa:	4798      	blx	r3
 800faac:	2000      	movs	r0, #0
 800faae:	e7e0      	b.n	800fa72 <_raise_r+0x12>

0800fab0 <raise>:
 800fab0:	4b02      	ldr	r3, [pc, #8]	; (800fabc <raise+0xc>)
 800fab2:	4601      	mov	r1, r0
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	f7ff bfd3 	b.w	800fa60 <_raise_r>
 800faba:	bf00      	nop
 800fabc:	24000010 	.word	0x24000010

0800fac0 <_kill_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d07      	ldr	r5, [pc, #28]	; (800fae0 <_kill_r+0x20>)
 800fac4:	2300      	movs	r3, #0
 800fac6:	4604      	mov	r4, r0
 800fac8:	4608      	mov	r0, r1
 800faca:	4611      	mov	r1, r2
 800facc:	602b      	str	r3, [r5, #0]
 800face:	f7f2 fc99 	bl	8002404 <_kill>
 800fad2:	1c43      	adds	r3, r0, #1
 800fad4:	d102      	bne.n	800fadc <_kill_r+0x1c>
 800fad6:	682b      	ldr	r3, [r5, #0]
 800fad8:	b103      	cbz	r3, 800fadc <_kill_r+0x1c>
 800fada:	6023      	str	r3, [r4, #0]
 800fadc:	bd38      	pop	{r3, r4, r5, pc}
 800fade:	bf00      	nop
 800fae0:	240004b0 	.word	0x240004b0

0800fae4 <_getpid_r>:
 800fae4:	f7f2 bc86 	b.w	80023f4 <_getpid>

0800fae8 <_fstat_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d07      	ldr	r5, [pc, #28]	; (800fb08 <_fstat_r+0x20>)
 800faec:	2300      	movs	r3, #0
 800faee:	4604      	mov	r4, r0
 800faf0:	4608      	mov	r0, r1
 800faf2:	4611      	mov	r1, r2
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f7f2 fce4 	bl	80024c2 <_fstat>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	d102      	bne.n	800fb04 <_fstat_r+0x1c>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	b103      	cbz	r3, 800fb04 <_fstat_r+0x1c>
 800fb02:	6023      	str	r3, [r4, #0]
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	bf00      	nop
 800fb08:	240004b0 	.word	0x240004b0

0800fb0c <_isatty_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d06      	ldr	r5, [pc, #24]	; (800fb28 <_isatty_r+0x1c>)
 800fb10:	2300      	movs	r3, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	4608      	mov	r0, r1
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	f7f2 fce3 	bl	80024e2 <_isatty>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_isatty_r+0x1a>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_isatty_r+0x1a>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	240004b0 	.word	0x240004b0

0800fb2c <_init>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	bf00      	nop
 800fb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb32:	bc08      	pop	{r3}
 800fb34:	469e      	mov	lr, r3
 800fb36:	4770      	bx	lr

0800fb38 <_fini>:
 800fb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3a:	bf00      	nop
 800fb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb3e:	bc08      	pop	{r3}
 800fb40:	469e      	mov	lr, r3
 800fb42:	4770      	bx	lr
